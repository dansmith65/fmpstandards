<?xml version="1.0" encoding="UTF-16"?>
<FMPReport link="Summary.xml" creationTime="11:34:38 AM" creationDate="2/7/2014" type="Report" version="13.0v1">
<File name="Log.fmp12" path="E:\Dan\GitHub\fmpstandards\Functions\Log\">
<BaseTableCatalog>
	<BaseTable id="130" records="0" name="Log">
		<FieldCatalog>
			<Field id="1" dataType="Text" fieldType="Normal" name="id">
				<Comment/>
				<AutoEnter allowEditing="True" overwriteExistingValue="False" alwaysEvaluate="False" constant="False" furigana="False" lookup="False" calculation="True">
					<ConstantData/>
					<Calculation table="Log"><![CDATA[Get ( UUID )]]></Calculation>
					<DisplayCalculation>
						<Chunk type="FunctionRef">Get</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FunctionRef">UUID</Chunk>
						<Chunk type="NoRef"> )</Chunk>
					</DisplayCalculation>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="Always">
					<NotEmpty value="False"/>
					<Unique value="True"/>
					<Existing value="False"/>
					<StrictValidation value="True"/>
				</Validation>
				<Storage autoIndex="True" index="Minimal" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="2" dataType="Text" fieldType="Normal" name="logData">
				<Comment>set of name/value pairs. this field is set when the error is logged, then parsed into separate ErrorLogItems at a later time.</Comment>
				<AutoEnter allowEditing="False" constant="False" furigana="False" lookup="False" calculation="False">
					<ConstantData/>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage autoIndex="True" index="Minimal" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="3" dataType="Text" fieldType="Normal" name="magicKey">
				<Comment/>
				<AutoEnter allowEditing="True" constant="False" furigana="False" lookup="False" calculation="False">
					<ConstantData/>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage indexLanguage="English" global="True" maxRepetition="1"/>
			</Field>
			<Field id="6" dataType="TimeStamp" fieldType="Normal" name="creationHostTimestamp">
				<Comment/>
				<AutoEnter allowEditing="False" overwriteExistingValue="False" alwaysEvaluate="False" constant="False" furigana="False" lookup="False" calculation="True">
					<ConstantData/>
					<Calculation table="Log"><![CDATA[Let ( ~trigger = GetField ( "" ) ; Get ( CurrentHostTimeStamp ) )]]></Calculation>
					<DisplayCalculation>
						<Chunk type="FunctionRef">Let</Chunk>
						<Chunk type="NoRef"> ( ~trigger = </Chunk>
						<Chunk type="FunctionRef">GetField</Chunk>
						<Chunk type="NoRef"> ( &quot;&quot; ) ; </Chunk>
						<Chunk type="FunctionRef">Get</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FunctionRef">CurrentHostTimeStamp</Chunk>
						<Chunk type="NoRef"> ) )</Chunk>
					</DisplayCalculation>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage index="All" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="7" dataType="Number" fieldType="Normal" name="checked">
				<Comment>for arbitrary selection/flagging of records</Comment>
				<AutoEnter allowEditing="True" constant="False" furigana="False" lookup="False" calculation="False">
					<ConstantData/>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage index="All" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="8" dataType="Text" fieldType="Normal" name="notes">
				<Comment/>
				<AutoEnter allowEditing="True" constant="False" furigana="False" lookup="False" calculation="False">
					<ConstantData/>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage autoIndex="True" index="None" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="10" dataType="Text" fieldType="Normal" name="logLevel">
				<Comment/>
				<AutoEnter allowEditing="False" overwriteExistingValue="False" alwaysEvaluate="False" constant="False" furigana="False" lookup="False" calculation="True">
					<ConstantData/>
					<Calculation table="Log"><![CDATA[Let ( 	~name = // get name of this field		GetValue (			Substitute (				GetFieldName ( Self ) ;				[ "::" ; ¶ ]			) ;			2		)	;	#Get ( logData ; ~name ))]]></Calculation>
					<DisplayCalculation>
						<Chunk type="FunctionRef">Let</Chunk>
						<Chunk type="NoRef"> ( 	~name = </Chunk>
						<Chunk type="FunctionRef">// get name of this field</Chunk>
						<Chunk type="NoRef">		</Chunk>
						<Chunk type="FunctionRef">GetValue</Chunk>
						<Chunk type="NoRef"> (			</Chunk>
						<Chunk type="FunctionRef">Substitute</Chunk>
						<Chunk type="NoRef"> (				</Chunk>
						<Chunk type="FunctionRef">GetFieldName</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FunctionRef">Self</Chunk>
						<Chunk type="NoRef"> ) ;				[ &quot;::&quot; ; ¶ ]			) ;			2		)	;	</Chunk>
						<Chunk type="CustomFunctionRef">#Get</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FieldRef">
							<Field table="Log" id="2" name="logData"/>
						</Chunk>
						<Chunk type="NoRef"> ; ~name ))</Chunk>
					</DisplayCalculation>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage autoIndex="True" index="Minimal" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="11" dataType="Text" fieldType="Normal" name="errorType">
				<Comment/>
				<AutoEnter allowEditing="False" overwriteExistingValue="False" alwaysEvaluate="False" constant="False" furigana="False" lookup="False" calculation="True">
					<ConstantData/>
					<Calculation table="Log"><![CDATA[Let ( 	~name = // get name of this field		GetValue (			Substitute (				GetFieldName ( Self ) ;				[ "::" ; ¶ ]			) ;			2		)	;	#Get ( logData ; ~name ))]]></Calculation>
					<DisplayCalculation>
						<Chunk type="FunctionRef">Let</Chunk>
						<Chunk type="NoRef"> ( 	~name = </Chunk>
						<Chunk type="FunctionRef">// get name of this field</Chunk>
						<Chunk type="NoRef">		</Chunk>
						<Chunk type="FunctionRef">GetValue</Chunk>
						<Chunk type="NoRef"> (			</Chunk>
						<Chunk type="FunctionRef">Substitute</Chunk>
						<Chunk type="NoRef"> (				</Chunk>
						<Chunk type="FunctionRef">GetFieldName</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FunctionRef">Self</Chunk>
						<Chunk type="NoRef"> ) ;				[ &quot;::&quot; ; ¶ ]			) ;			2		)	;	</Chunk>
						<Chunk type="CustomFunctionRef">#Get</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FieldRef">
							<Field table="Log" id="2" name="logData"/>
						</Chunk>
						<Chunk type="NoRef"> ; ~name ))</Chunk>
					</DisplayCalculation>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage autoIndex="True" index="None" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="12" dataType="Text" fieldType="Normal" name="errorCode">
				<Comment/>
				<AutoEnter allowEditing="False" overwriteExistingValue="False" alwaysEvaluate="False" constant="False" furigana="False" lookup="False" calculation="True">
					<ConstantData/>
					<Calculation table="Log"><![CDATA[Let ( 	~name = // get name of this field		GetValue (			Substitute (				GetFieldName ( Self ) ;				[ "::" ; ¶ ]			) ;			2		)	;	#Get ( logData ; ~name ))]]></Calculation>
					<DisplayCalculation>
						<Chunk type="FunctionRef">Let</Chunk>
						<Chunk type="NoRef"> ( 	~name = </Chunk>
						<Chunk type="FunctionRef">// get name of this field</Chunk>
						<Chunk type="NoRef">		</Chunk>
						<Chunk type="FunctionRef">GetValue</Chunk>
						<Chunk type="NoRef"> (			</Chunk>
						<Chunk type="FunctionRef">Substitute</Chunk>
						<Chunk type="NoRef"> (				</Chunk>
						<Chunk type="FunctionRef">GetFieldName</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FunctionRef">Self</Chunk>
						<Chunk type="NoRef"> ) ;				[ &quot;::&quot; ; ¶ ]			) ;			2		)	;	</Chunk>
						<Chunk type="CustomFunctionRef">#Get</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FieldRef">
							<Field table="Log" id="2" name="logData"/>
						</Chunk>
						<Chunk type="NoRef"> ; ~name ))</Chunk>
					</DisplayCalculation>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage autoIndex="True" index="None" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="13" dataType="Text" fieldType="Normal" name="errorDescription">
				<Comment/>
				<AutoEnter allowEditing="False" overwriteExistingValue="False" alwaysEvaluate="False" constant="False" furigana="False" lookup="False" calculation="True">
					<ConstantData/>
					<Calculation table="Log"><![CDATA[Let ( 	~name = // get name of this field		GetValue (			Substitute (				GetFieldName ( Self ) ;				[ "::" ; ¶ ]			) ;			2		)	;	#Get ( logData ; ~name ))]]></Calculation>
					<DisplayCalculation>
						<Chunk type="FunctionRef">Let</Chunk>
						<Chunk type="NoRef"> ( 	~name = </Chunk>
						<Chunk type="FunctionRef">// get name of this field</Chunk>
						<Chunk type="NoRef">		</Chunk>
						<Chunk type="FunctionRef">GetValue</Chunk>
						<Chunk type="NoRef"> (			</Chunk>
						<Chunk type="FunctionRef">Substitute</Chunk>
						<Chunk type="NoRef"> (				</Chunk>
						<Chunk type="FunctionRef">GetFieldName</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FunctionRef">Self</Chunk>
						<Chunk type="NoRef"> ) ;				[ &quot;::&quot; ; ¶ ]			) ;			2		)	;	</Chunk>
						<Chunk type="CustomFunctionRef">#Get</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FieldRef">
							<Field table="Log" id="2" name="logData"/>
						</Chunk>
						<Chunk type="NoRef"> ; ~name ))</Chunk>
					</DisplayCalculation>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage autoIndex="True" index="None" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="14" dataType="Text" fieldType="Normal" name="errorInfo">
				<Comment/>
				<AutoEnter allowEditing="False" overwriteExistingValue="False" alwaysEvaluate="False" constant="False" furigana="False" lookup="False" calculation="True">
					<ConstantData/>
					<Calculation table="Log"><![CDATA[Let ( 	~name = // get name of this field		GetValue (			Substitute (				GetFieldName ( Self ) ;				[ "::" ; ¶ ]			) ;			2		)	;	#Get ( logData ; ~name ))]]></Calculation>
					<DisplayCalculation>
						<Chunk type="FunctionRef">Let</Chunk>
						<Chunk type="NoRef"> ( 	~name = </Chunk>
						<Chunk type="FunctionRef">// get name of this field</Chunk>
						<Chunk type="NoRef">		</Chunk>
						<Chunk type="FunctionRef">GetValue</Chunk>
						<Chunk type="NoRef"> (			</Chunk>
						<Chunk type="FunctionRef">Substitute</Chunk>
						<Chunk type="NoRef"> (				</Chunk>
						<Chunk type="FunctionRef">GetFieldName</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FunctionRef">Self</Chunk>
						<Chunk type="NoRef"> ) ;				[ &quot;::&quot; ; ¶ ]			) ;			2		)	;	</Chunk>
						<Chunk type="CustomFunctionRef">#Get</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FieldRef">
							<Field table="Log" id="2" name="logData"/>
						</Chunk>
						<Chunk type="NoRef"> ; ~name ))</Chunk>
					</DisplayCalculation>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage autoIndex="True" index="None" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="15" dataType="Text" fieldType="Normal" name="scriptName">
				<Comment/>
				<AutoEnter allowEditing="False" overwriteExistingValue="False" alwaysEvaluate="False" constant="False" furigana="False" lookup="False" calculation="True">
					<ConstantData/>
					<Calculation table="Log"><![CDATA[Let ( 	~name = // get name of this field		GetValue (			Substitute (				GetFieldName ( Self ) ;				[ "::" ; ¶ ]			) ;			2		)	;	#Get ( logData ; ~name ))]]></Calculation>
					<DisplayCalculation>
						<Chunk type="FunctionRef">Let</Chunk>
						<Chunk type="NoRef"> ( 	~name = </Chunk>
						<Chunk type="FunctionRef">// get name of this field</Chunk>
						<Chunk type="NoRef">		</Chunk>
						<Chunk type="FunctionRef">GetValue</Chunk>
						<Chunk type="NoRef"> (			</Chunk>
						<Chunk type="FunctionRef">Substitute</Chunk>
						<Chunk type="NoRef"> (				</Chunk>
						<Chunk type="FunctionRef">GetFieldName</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FunctionRef">Self</Chunk>
						<Chunk type="NoRef"> ) ;				[ &quot;::&quot; ; ¶ ]			) ;			2		)	;	</Chunk>
						<Chunk type="CustomFunctionRef">#Get</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FieldRef">
							<Field table="Log" id="2" name="logData"/>
						</Chunk>
						<Chunk type="NoRef"> ; ~name ))</Chunk>
					</DisplayCalculation>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage autoIndex="True" index="None" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="16" dataType="Text" fieldType="Normal" name="fileName">
				<Comment/>
				<AutoEnter allowEditing="False" overwriteExistingValue="False" alwaysEvaluate="False" constant="False" furigana="False" lookup="False" calculation="True">
					<ConstantData/>
					<Calculation table="Log"><![CDATA[Let ( 	~name = // get name of this field		GetValue (			Substitute (				GetFieldName ( Self ) ;				[ "::" ; ¶ ]			) ;			2		)	;	#Get ( logData ; ~name ))]]></Calculation>
					<DisplayCalculation>
						<Chunk type="FunctionRef">Let</Chunk>
						<Chunk type="NoRef"> ( 	~name = </Chunk>
						<Chunk type="FunctionRef">// get name of this field</Chunk>
						<Chunk type="NoRef">		</Chunk>
						<Chunk type="FunctionRef">GetValue</Chunk>
						<Chunk type="NoRef"> (			</Chunk>
						<Chunk type="FunctionRef">Substitute</Chunk>
						<Chunk type="NoRef"> (				</Chunk>
						<Chunk type="FunctionRef">GetFieldName</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FunctionRef">Self</Chunk>
						<Chunk type="NoRef"> ) ;				[ &quot;::&quot; ; ¶ ]			) ;			2		)	;	</Chunk>
						<Chunk type="CustomFunctionRef">#Get</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FieldRef">
							<Field table="Log" id="2" name="logData"/>
						</Chunk>
						<Chunk type="NoRef"> ; ~name ))</Chunk>
					</DisplayCalculation>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage autoIndex="True" index="None" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="17" dataType="Text" fieldType="Normal" name="FILTER_NAME">
				<Comment>used to filter the portal of ScriptLogItems</Comment>
				<AutoEnter allowEditing="True" constant="False" furigana="False" lookup="False" calculation="False">
					<ConstantData/>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage indexLanguage="English" global="True" maxRepetition="1"/>
			</Field>
			<Field id="18" dataType="Text" fieldType="Normal" name="FILTER_VALUE">
				<Comment>used to filter the portal of ScriptLogItems</Comment>
				<AutoEnter allowEditing="True" constant="False" furigana="False" lookup="False" calculation="False">
					<ConstantData/>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage indexLanguage="English" global="True" maxRepetition="1"/>
			</Field>
			<Field id="19" dataType="Number" fieldType="Normal" name="REFRESH_RELATIONSHIP">
				<Comment/>
				<AutoEnter allowEditing="True" constant="False" furigana="False" lookup="False" calculation="False">
					<ConstantData/>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage indexLanguage="English" global="True" maxRepetition="1"/>
			</Field>
			<Field id="20" dataType="Text" fieldType="Normal" name="accountName">
				<Comment/>
				<AutoEnter allowEditing="False" overwriteExistingValue="False" alwaysEvaluate="False" constant="False" furigana="False" lookup="False" calculation="True">
					<ConstantData/>
					<Calculation table="Log"><![CDATA[Let ( 	~name = // get name of this field		GetValue (			Substitute (				GetFieldName ( Self ) ;				[ "::" ; ¶ ]			) ;			2		)	;	#Get ( logData ; ~name ))]]></Calculation>
					<DisplayCalculation>
						<Chunk type="FunctionRef">Let</Chunk>
						<Chunk type="NoRef"> ( 	~name = </Chunk>
						<Chunk type="FunctionRef">// get name of this field</Chunk>
						<Chunk type="NoRef">		</Chunk>
						<Chunk type="FunctionRef">GetValue</Chunk>
						<Chunk type="NoRef"> (			</Chunk>
						<Chunk type="FunctionRef">Substitute</Chunk>
						<Chunk type="NoRef"> (				</Chunk>
						<Chunk type="FunctionRef">GetFieldName</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FunctionRef">Self</Chunk>
						<Chunk type="NoRef"> ) ;				[ &quot;::&quot; ; ¶ ]			) ;			2		)	;	</Chunk>
						<Chunk type="CustomFunctionRef">#Get</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FieldRef">
							<Field table="Log" id="2" name="logData"/>
						</Chunk>
						<Chunk type="NoRef"> ; ~name ))</Chunk>
					</DisplayCalculation>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage autoIndex="True" index="None" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
		</FieldCatalog>
	</BaseTable>
	<BaseTable id="131" records="0" name="LogItem">
		<FieldCatalog>
			<Field id="1" dataType="Text" fieldType="Normal" name="id">
				<Comment/>
				<AutoEnter allowEditing="True" overwriteExistingValue="False" alwaysEvaluate="False" constant="False" furigana="False" lookup="False" calculation="True">
					<ConstantData/>
					<Calculation table="LogItem"><![CDATA[Get ( UUID )]]></Calculation>
					<DisplayCalculation>
						<Chunk type="FunctionRef">Get</Chunk>
						<Chunk type="NoRef"> ( </Chunk>
						<Chunk type="FunctionRef">UUID</Chunk>
						<Chunk type="NoRef"> )</Chunk>
					</DisplayCalculation>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="Always">
					<NotEmpty value="False"/>
					<Unique value="True"/>
					<Existing value="False"/>
					<StrictValidation value="True"/>
				</Validation>
				<Storage autoIndex="True" index="Minimal" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="2" dataType="Text" fieldType="Normal" name="id_Log">
				<Comment/>
				<AutoEnter allowEditing="True" constant="False" furigana="False" lookup="False" calculation="False">
					<ConstantData/>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage autoIndex="True" index="Minimal" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="3" dataType="Text" fieldType="Normal" name="name">
				<Comment/>
				<AutoEnter allowEditing="False" constant="False" furigana="False" lookup="False" calculation="False">
					<ConstantData/>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage index="All" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
			<Field id="4" dataType="Text" fieldType="Normal" name="value">
				<Comment/>
				<AutoEnter allowEditing="False" constant="False" furigana="False" lookup="False" calculation="False">
					<ConstantData/>
				</AutoEnter>
				<Validation message="False" maxLength="False" valuelist="False" calculation="False" alwaysValidateCalculation="False" type="OnlyDuringDataEntry">
					<NotEmpty value="False"/>
					<Unique value="False"/>
					<Existing value="False"/>
					<StrictValidation value="False"/>
				</Validation>
				<Storage index="All" indexLanguage="English" global="False" maxRepetition="1"/>
			</Field>
		</FieldCatalog>
	</BaseTable>
</BaseTableCatalog>
<BaseDirectoryCatalog>
	<Options>
		<Thumbnails type="Temporary" state="True"/>
	</Options>
	<BaseDirectoryList>
		<BaseDirectory id="0">Files/FileMaker-Error-Handling/</BaseDirectory>
	</BaseDirectoryList>
</BaseDirectoryCatalog>
<RelationshipGraph>
	<TableList>
		<Table id="1065092" color="#777777" baseTableId="131" baseTable="LogItem" name="LogItem__create"/>
		<Table id="1065090" color="#777777" baseTableId="130" baseTable="Log" name="Log"/>
		<Table id="1065091" color="#777777" baseTableId="131" baseTable="LogItem" name="LogItem"/>
	</TableList>
	<RelationshipList>
		<Relationship id="1">
			<LeftTable cascadeCreate="True" cascadeDelete="False" name="LogItem__create">
				<SortList Maintain="True" value="False"/>
			</LeftTable>
			<RightTable cascadeCreate="False" cascadeDelete="False" name="Log">
				<SortList Maintain="True" value="False"/>
			</RightTable>
			<JoinPredicateList>
				<JoinPredicate type="Equal">
					<LeftField>
						<Field table="LogItem__create" id="1" name="id"/>
					</LeftField>
					<RightField>
						<Field table="Log" id="3" name="magicKey"/>
					</RightField>
				</JoinPredicate>
			</JoinPredicateList>
		</Relationship>
		<Relationship id="2">
			<LeftTable cascadeCreate="False" cascadeDelete="False" name="LogItem">
				<SortList Maintain="True" value="False"/>
			</LeftTable>
			<RightTable cascadeCreate="False" cascadeDelete="False" name="Log">
				<SortList Maintain="True" value="False"/>
			</RightTable>
			<JoinPredicateList>
				<JoinPredicate type="Equal">
					<LeftField>
						<Field table="LogItem" id="2" name="id_Log"/>
					</LeftField>
					<RightField>
						<Field table="Log" id="1" name="id"/>
					</RightField>
				</JoinPredicate>
				<JoinPredicate type="CartesianProduct">
					<LeftField>
						<Field table="LogItem" id="2" name="id_Log"/>
					</LeftField>
					<RightField>
						<Field table="Log" id="19" name="REFRESH_RELATIONSHIP"/>
					</RightField>
				</JoinPredicate>
			</JoinPredicateList>
		</Relationship>
	</RelationshipList>
</RelationshipGraph>
<LayoutCatalog>
<Layout width="256" quickFind="True" includeInMenu="False" id="10" name="Log: Blank">
<Table id="1065090" name="Log"/>
<CustomMenuSet id="0" name=""/>
<Theme name="Classic" id="02"/>
<Options showRecordIndicator="True" showFieldFramesCurrentRecord="False" showFieldFrames="True" saveRecord="True"/>
<Object type="Text" key="1" LabelKey="0" flags="-1073741824" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="104.0000000" right="256.0000000"/>
<TextObj flags="10" tableViewVisibility="0">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-size: 18pt;&#10;&#09;color: rgba(22.7451%,32.1569%,45.4902%,1);&#10;&#09;text-align: center;&#10;&#09;-fm-text-vertical-align: center;&#10;}&#10;</LocalCSS>
</Styles>
<CharacterStyleVector>
<Style>
<Data>{{WindowName}}</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="0">Arial</Font-family>
<Font-size>18</Font-size>
<Face>0</Face>
<Color>#3A5274</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>{{WindowName}}</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
<FieldList quickFind="False"></FieldList></TextObj>
</Object>
<Object type="GroupButton" key="4" LabelKey="0" flags="-268369920" rotation="0">
<Bounds top="96.0000000" left="184.0000000" bottom="128.0000000" right="256.0000000"/>
<GroupButtonObj numOfObjs="1">
<Step enable="True" id="1" name="Perform Script"><StepText>Perform Script [ “Log Viewer: FM: Open Window” ]</StepText><CurrentScript value="Pause"></CurrentScript><Script id="109" name="Log Viewer: FM: Open Window"></Script></Step>
<Styles>
</Styles>
<Object type="Text" key="3" LabelKey="0" flags="-268435456" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="32.0000000" right="72.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-family: -fm-font-family(tahoma,sans-serif,roman);&#10;&#09;color: rgba(22.7451%,32.1569%,45.4902%,1);&#10;&#09;text-align: center;&#10;&#09;-fm-underline: underline;&#10;&#09;-fm-text-vertical-align: center;&#10;}&#10;</LocalCSS>
</Styles>
<CharacterStyleVector>
<Style>
<Data>view log</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>1024</Face>
<Color>#3A5274</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>view log</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
</GroupButtonObj>
</Object>
<Object type="GroupButton" key="7" LabelKey="0" flags="-268369920" rotation="0">
<Bounds top="96.0000000" left="112.0000000" bottom="128.0000000" right="184.0000000"/>
<GroupButtonObj numOfObjs="1">
<Step enable="True" id="1" name="Perform Script"><StepText>Perform Script [ “Hide Window” ]</StepText><CurrentScript value="Pause"></CurrentScript><Script id="198" name="Hide Window"></Script></Step>
<Styles>
</Styles>
<Object type="Text" key="8" LabelKey="0" flags="-268435456" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="32.0000000" right="72.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-family: -fm-font-family(tahoma,sans-serif,roman);&#10;&#09;color: rgba(22.7451%,32.1569%,45.4902%,1);&#10;&#09;text-align: center;&#10;&#09;-fm-underline: underline;&#10;&#09;-fm-text-vertical-align: center;&#10;}&#10;</LocalCSS>
</Styles>
<CharacterStyleVector>
<Style>
<Data>hide</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>1024</Face>
<Color>#3A5274</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>hide</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
</GroupButtonObj>
</Object>
</Layout>
<Layout width="1104" quickFind="True" includeInMenu="True" id="2" name="Log: List">
<Table id="1065090" name="Log"/>
<CustomMenuSet id="0" name=""/>
<Theme name="River Flat" id="04"/>
<Options showRecordIndicator="False" showFieldFramesCurrentRecord="True" showFieldFrames="False" saveRecord="True"/>
<Object type="Text" key="245" LabelKey="0" flags="1073741825" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[Log::logLevel <= 1]]></Calculation><DisplayCalculation><Chunk type="FieldRef"><Field table="Log" id="10" name="logLevel"></Field></Chunk><Chunk type="NoRef"> &lt;= 1</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(98.0392%,83.9216%,82.7451%,0.5);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
<Item id="1" flags="5">
<Condition op="0">
<Calculation><![CDATA[Log::logLevel = 2]]></Calculation><DisplayCalculation><Chunk type="FieldRef"><Field table="Log" id="10" name="logLevel"></Field></Chunk><Chunk type="NoRef"> = 2</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(100%,93.7255%,79.6078%,0.5);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="80.0000000" left="0.0000000" bottom="128.0000000" right="1104.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
</Styles>
<CharacterStyleVector>
<Style>
<Data> </Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#72674E</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data> </Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
<Object type="Text" key="238" LabelKey="0" flags="0" rotation="0">
<Bounds top="98.0000000" left="8.0000000" bottom="110.0000000" right="20.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Graphic: Arrow</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data> </Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#72674E</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data> </Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
<Object type="Button" key="235" LabelKey="0" flags="16384" rotation="0">
<Bounds top="80.0000000" left="0.0000000" bottom="128.0000000" right="28.0000000"/>
<ToolTip>
<Calculation><![CDATA["go to Detail"]]></Calculation><DisplayCalculation><Chunk type="NoRef">&quot;go to Detail&quot;</Chunk></DisplayCalculation></ToolTip>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Button: Detail</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data></Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>1024</Face>
<Color>#3A5274</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data></Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
<Step enable="True" id="6" name="Go to Layout"><StepText>Go to Layout [ “Log: Detail” (Log) ]</StepText><LayoutDestination value="SelectedLayout"></LayoutDestination><Layout id="4" name="Log: Detail"></Layout></Step>
</ButtonObj>
</Object>
<Object type="Text" key="150" LabelKey="0" flags="1073741824" rotation="0">
<Bounds top="16.0000000" left="16.0000000" bottom="48.0000000" right="512.0000000"/>
<TextObj flags="10" tableViewVisibility="0">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Title Text 1</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>{{LayoutName}}</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>24</Font-size>
<Face>256</Face>
<Color>#F4EFE2</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>{{LayoutName}}</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
<FieldList quickFind="False"></FieldList></TextObj>
</Object>
<Object type="Field" key="151" LabelKey="152" flags="1" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[True]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">True</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="84.0000000" left="48.0000000" bottom="124.0000000" right="144.0000000"/>
<FieldObj numOfReps="1" flags="32804" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::creationHostTimestamp</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="1" charStyle="0" monthStyle="1" dayStyle="1" separator="47">
<DateElement>8</DateElement>
<DateElement>4</DateElement>
<DateElement>1</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">-</DateElementSep>
<DateElementSep index="2">-</DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="135" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>List</Name></CustomStyles>
</Styles>
<DDRInfo>
<Field name="creationHostTimestamp" id="6" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="GroupButton" key="213" LabelKey="0" flags="0" rotation="0">
<Bounds top="56.0000000" left="50.0000000" bottom="80.0000000" right="144.0000000"/>
<GroupButtonObj numOfObjs="1">
<Step enable="True" id="39" name="Sort Records"><StepText>Sort Records [ Keep records in sorted order; Specified Sort Order: Log::creationHostTimestamp; ascending ]&#13;[ Restore; No dialog ]</StepText><NoInteract state="True"></NoInteract><Restore state="True"></Restore><SortList Maintain="True" value="True"><Sort type="Ascending"><PrimaryField><Field table="Log" id="6" name="creationHostTimestamp"></Field></PrimaryField></Sort></SortList></Step>
<Styles>
</Styles>
<Object type="Text" key="152" LabelKey="0" flags="0" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="24.0000000" right="94.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="14" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Column Title</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>created</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>11</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>created</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
</GroupButtonObj>
</Object>
<Object type="Button" key="153" LabelKey="0" flags="1342177280" rotation="0">
<Bounds top="16.0000000" left="888.0000000" bottom="48.0000000" right="1016.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Header Button</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>Parse All Log Data</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>Parse All Log Data</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
<Step enable="True" id="1" name="Perform Script"><StepText>Perform Script [ “Log Viewer: FM: Parse All Log Data” ]</StepText><CurrentScript value="Pause"></CurrentScript><Script id="5" name="Log Viewer: FM: Parse All Log Data"></Script></Step>
</ButtonObj>
</Object>
<Object type="Field" key="157" LabelKey="0" flags="0" rotation="0">
<Bounds top="93.0000000" left="30.0000000" bottom="114.0000000" right="48.0000000"/>
<FieldObj numOfReps="1" flags="32" inputMode="0" keyboardType="0" displayType="3" tableViewVisibility="0" quickFind="1" pictFormat="5">
<Name>Log::checked</Name>
<ValueList>1</ValueList>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-size: 16pt;&#10;}&#10;self .text&#10;{&#10;&#09;margin-left: 5pt;&#10;}&#10;</LocalCSS>
</Styles>
<DDRInfo>
<Field name="checked" id="7" repetition="1" maxRepetition="1" table="Log"/>
<ValueList name="1" id="3"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="Field" key="164" LabelKey="0" flags="1" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[True]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">True</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="84.0000000" left="384.0000000" bottom="124.0000000" right="440.0000000"/>
<FieldObj numOfReps="1" flags="32800" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::logLevel</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>List</Name></CustomStyles>
</Styles>
<DDRInfo>
<Field name="logLevel" id="10" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="Field" key="178" LabelKey="0" flags="1" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[True]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">True</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="84.0000000" left="440.0000000" bottom="124.0000000" right="536.0000000"/>
<FieldObj numOfReps="1" flags="32800" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::errorType</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>List</Name></CustomStyles>
</Styles>
<DDRInfo>
<Field name="errorType" id="11" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="GroupButton" key="193" LabelKey="0" name="test" flags="0" rotation="0">
<Bounds top="56.0000000" left="384.0000000" bottom="80.0000000" right="440.0000000"/>
<GroupButtonObj numOfObjs="1">
<Step enable="True" id="39" name="Sort Records"><StepText>Sort Records [ Keep records in sorted order; Specified Sort Order: Log::logLevel; ascending ]&#13;[ Restore; No dialog ]</StepText><NoInteract state="True"></NoInteract><Restore state="True"></Restore><SortList Maintain="True" value="True"><Sort type="Ascending"><PrimaryField><Field table="Log" id="10" name="logLevel"></Field></PrimaryField></Sort></SortList></Step>
<Styles>
</Styles>
<Object type="Text" key="181" LabelKey="0" flags="0" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="24.0000000" right="56.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="14" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self .inner_border&#10;{&#10;&#09;padding-right: 0pt;&#10;}&#10;</LocalCSS>
<CustomStyles>
<Name>Column Title</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>logLevel</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>11</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>logLevel</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
</GroupButtonObj>
</Object>
<Object type="GroupButton" key="194" LabelKey="0" flags="0" rotation="0">
<Bounds top="56.0000000" left="440.0000000" bottom="80.0000000" right="536.0000000"/>
<GroupButtonObj numOfObjs="1">
<Step enable="True" id="39" name="Sort Records"><StepText>Sort Records [ Keep records in sorted order; Specified Sort Order: Log::errorType; ascending ]&#13;[ Restore; No dialog ]</StepText><NoInteract state="True"></NoInteract><Restore state="True"></Restore><SortList Maintain="True" value="True"><Sort type="Ascending"><PrimaryField><Field table="Log" id="11" name="errorType"></Field></PrimaryField></Sort></SortList></Step>
<Styles>
</Styles>
<Object type="Text" key="182" LabelKey="0" flags="0" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="24.0000000" right="96.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="14" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Column Title</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>errorType</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>11</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>errorType</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
</GroupButtonObj>
</Object>
<Object type="Field" key="183" LabelKey="0" flags="1" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[True]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">True</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="84.0000000" left="536.0000000" bottom="124.0000000" right="600.0000000"/>
<FieldObj numOfReps="1" flags="32800" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::errorCode</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>List</Name></CustomStyles>
</Styles>
<DDRInfo>
<Field name="errorCode" id="12" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="GroupButton" key="200" LabelKey="0" flags="0" rotation="0">
<Bounds top="56.0000000" left="536.0000000" bottom="80.0000000" right="600.0000000"/>
<GroupButtonObj numOfObjs="1">
<Step enable="True" id="39" name="Sort Records"><StepText>Sort Records [ Keep records in sorted order; Specified Sort Order: Log::errorCode; ascending ]&#13;[ Restore; No dialog ]</StepText><NoInteract state="True"></NoInteract><Restore state="True"></Restore><SortList Maintain="True" value="True"><Sort type="Ascending"><PrimaryField><Field table="Log" id="12" name="errorCode"></Field></PrimaryField></Sort></SortList></Step>
<Styles>
</Styles>
<Object type="Text" key="184" LabelKey="0" flags="0" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="24.0000000" right="64.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="14" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self .inner_border&#10;{&#10;&#09;padding-right: 0pt;&#10;}&#10;</LocalCSS>
<CustomStyles>
<Name>Column Title</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>errorCode</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>11</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>errorCode</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
</GroupButtonObj>
</Object>
<Object type="Field" key="185" LabelKey="0" flags="1" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[True]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">True</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="84.0000000" left="600.0000000" bottom="124.0000000" right="768.0000000"/>
<FieldObj numOfReps="1" flags="32800" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::errorDescription</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>List</Name></CustomStyles>
</Styles>
<DDRInfo>
<Field name="errorDescription" id="13" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="GroupButton" key="201" LabelKey="0" flags="0" rotation="0">
<Bounds top="56.0000000" left="600.0000000" bottom="80.0000000" right="768.0000000"/>
<GroupButtonObj numOfObjs="1">
<Step enable="True" id="39" name="Sort Records"><StepText>Sort Records [ Keep records in sorted order; Specified Sort Order: Log::errorDescription; ascending ]&#13;[ Restore; No dialog ]</StepText><NoInteract state="True"></NoInteract><Restore state="True"></Restore><SortList Maintain="True" value="True"><Sort type="Ascending"><PrimaryField><Field table="Log" id="13" name="errorDescription"></Field></PrimaryField></Sort></SortList></Step>
<Styles>
</Styles>
<Object type="Text" key="186" LabelKey="0" flags="0" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="24.0000000" right="168.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="14" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Column Title</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>errorDescription</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>11</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>errorDescription</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
</GroupButtonObj>
</Object>
<Object type="Field" key="187" LabelKey="0" flags="1" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[True]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">True</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="84.0000000" left="768.0000000" bottom="124.0000000" right="960.0000000"/>
<FieldObj numOfReps="1" flags="32800" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::errorInfo</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>List</Name></CustomStyles>
</Styles>
<DDRInfo>
<Field name="errorInfo" id="14" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="GroupButton" key="202" LabelKey="0" flags="0" rotation="0">
<Bounds top="56.0000000" left="768.0000000" bottom="80.0000000" right="960.0000000"/>
<GroupButtonObj numOfObjs="1">
<Step enable="True" id="39" name="Sort Records"><StepText>Sort Records [ Keep records in sorted order; Specified Sort Order: Log::errorInfo; ascending ]&#13;[ Restore; No dialog ]</StepText><NoInteract state="True"></NoInteract><Restore state="True"></Restore><SortList Maintain="True" value="True"><Sort type="Ascending"><PrimaryField><Field table="Log" id="14" name="errorInfo"></Field></PrimaryField></Sort></SortList></Step>
<Styles>
</Styles>
<Object type="Text" key="188" LabelKey="0" flags="0" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="24.0000000" right="192.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="14" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Column Title</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>errorInfo</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>11</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>errorInfo</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
</GroupButtonObj>
</Object>
<Object type="Field" key="189" LabelKey="0" flags="1073741825" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[True]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">True</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="84.0000000" left="960.0000000" bottom="124.0000000" right="1096.0000000"/>
<FieldObj numOfReps="1" flags="32800" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::scriptName</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>List</Name></CustomStyles>
</Styles>
<DDRInfo>
<Field name="scriptName" id="15" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="GroupButton" key="203" LabelKey="0" flags="1073741824" rotation="0">
<Bounds top="56.0000000" left="960.0000000" bottom="80.0000000" right="1096.0000000"/>
<GroupButtonObj numOfObjs="1">
<Step enable="True" id="39" name="Sort Records"><StepText>Sort Records [ Keep records in sorted order; Specified Sort Order: Log::scriptName; ascending ]&#13;[ Restore; No dialog ]</StepText><NoInteract state="True"></NoInteract><Restore state="True"></Restore><SortList Maintain="True" value="True"><Sort type="Ascending"><PrimaryField><Field table="Log" id="15" name="scriptName"></Field></PrimaryField></Sort></SortList></Step>
<Styles>
</Styles>
<Object type="Text" key="190" LabelKey="0" flags="1073741824" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="24.0000000" right="136.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="14" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Column Title</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>scriptName</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>11</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>scriptName</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
</GroupButtonObj>
</Object>
<Object type="Field" key="191" LabelKey="0" flags="1" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[True]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">True</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="84.0000000" left="144.0000000" bottom="124.0000000" right="296.0000000"/>
<FieldObj numOfReps="1" flags="32800" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::fileName</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>List</Name></CustomStyles>
</Styles>
<DDRInfo>
<Field name="fileName" id="16" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="GroupButton" key="204" LabelKey="0" flags="0" rotation="0">
<Bounds top="56.0000000" left="144.0000000" bottom="80.0000000" right="296.0000000"/>
<GroupButtonObj numOfObjs="1">
<Step enable="True" id="39" name="Sort Records"><StepText>Sort Records [ Keep records in sorted order; Specified Sort Order: Log::fileName; ascending ]&#13;[ Restore; No dialog ]</StepText><NoInteract state="True"></NoInteract><Restore state="True"></Restore><SortList Maintain="True" value="True"><Sort type="Ascending"><PrimaryField><Field table="Log" id="16" name="fileName"></Field></PrimaryField></Sort></SortList></Step>
<Styles>
</Styles>
<Object type="Text" key="192" LabelKey="0" flags="0" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="24.0000000" right="152.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="14" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Column Title</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>fileName</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>11</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>fileName</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
</GroupButtonObj>
</Object>
<Object type="Button" key="240" LabelKey="0" flags="1342193664" rotation="0">
<Bounds top="16.0000000" left="1032.0000000" bottom="48.0000000" right="1088.0000000"/>
<ToolTip>
<Calculation><![CDATA["Go to related LogItem records."& ¶& "Use after performing a find to see the log items related to the found set."]]></Calculation><DisplayCalculation><Chunk type="NoRef">&quot;Go to related LogItem records.&quot;&#13;&amp; ¶&#13;&amp; &quot;Use after performing a find to see the log items related to the found set.&quot;</Chunk></DisplayCalculation></ToolTip>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Header Button</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>GTRR</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>GTRR</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
<Step enable="True" id="74" name="Go to Related Record"><StepText>Go to Related Record [ From table: “LogItem”; Using layout: “Log Item: Detail” (LogItem) ]&#13;[ Show only related records; Match found set ]</StepText><Option state="False"></Option><MatchAllRecords state="True"></MatchAllRecords><ShowInNewWindow state="False"></ShowInNewWindow><Restore state="True"></Restore><LayoutDestination value="SelectedLayout"></LayoutDestination><NewWndStyles Styles="983554"></NewWndStyles><Table id="1065091" name="LogItem"></Table><Layout id="3" name="Log Item: Detail"></Layout></Step>
</ButtonObj>
</Object>
<Object type="Field" key="241" LabelKey="0" flags="1" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[True]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">True</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="84.0000000" left="296.0000000" bottom="124.0000000" right="384.0000000"/>
<FieldObj numOfReps="1" flags="32800" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::accountName</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>List</Name></CustomStyles>
</Styles>
<DDRInfo>
<Field name="accountName" id="20" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="GroupButton" key="242" LabelKey="0" flags="0" rotation="0">
<Bounds top="56.0000000" left="296.0000000" bottom="80.0000000" right="384.0000000"/>
<GroupButtonObj numOfObjs="1">
<Step enable="True" id="39" name="Sort Records"><StepText>Sort Records [ Keep records in sorted order; Specified Sort Order: Log::fileName; ascending ]&#13;[ Restore; No dialog ]</StepText><NoInteract state="True"></NoInteract><Restore state="True"></Restore><SortList Maintain="True" value="True"><Sort type="Ascending"><PrimaryField><Field table="Log" id="16" name="fileName"></Field></PrimaryField></Sort></SortList></Step>
<Styles>
</Styles>
<Object type="Text" key="243" LabelKey="0" flags="0" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="24.0000000" right="88.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="14" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Column Title</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>accountName</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>11</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>accountName</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
</GroupButtonObj>
</Object>
</Layout>
<Layout width="592" quickFind="True" includeInMenu="True" id="4" name="Log: Detail">
<Table id="1065090" name="Log"/>
<CustomMenuSet id="0" name=""/>
<Theme name="River Flat" id="04"/>
<Options showRecordIndicator="True" showFieldFramesCurrentRecord="True" showFieldFrames="False" saveRecord="True"/>
<ScriptTriggers>
<Trigger event="OnRecordLoad" id="103" triggerFlags="1">
<Script id="156" name="Log Viewer: FM: Detail OnRecordLoad Trigger">
</Script>
<TriggerText>&quot;Log Viewer: FM: Detail OnRecordLoad Trigger&quot;</TriggerText>
</Trigger>
</ScriptTriggers>
<Object type="Text" key="22" LabelKey="0" flags="1073741824" rotation="0">
<Bounds top="16.0000000" left="88.0000000" bottom="48.0000000" right="432.0000000"/>
<TextObj flags="10" tableViewVisibility="0">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Title Text 1</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>{{LayoutName}}</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>24</Font-size>
<Face>256</Face>
<Color>#F4EFE2</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>{{LayoutName}}</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
<FieldList quickFind="False"></FieldList></TextObj>
</Object>
<Object type="Text" key="19" LabelKey="0" flags="-1610612736" rotation="0">
<Bounds top="266.0000000" left="16.0000000" bottom="283.0000000" right="80.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>notes</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#72674E</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>notes</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
<Object type="Field" key="20" LabelKey="19" flags="-536870912" rotation="0">
<Bounds top="282.0000000" left="16.0000000" bottom="344.0000000" right="576.0000000"/>
<FieldObj numOfReps="1" flags="32" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="1" pictFormat="5">
<Name>Log::notes</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
</Styles>
<DDRInfo>
<Field name="notes" id="8" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="Field" key="21" LabelKey="0" flags="0" rotation="0">
<Bounds top="66.0000000" left="16.0000000" bottom="90.0000000" right="36.0000000"/>
<FieldObj numOfReps="1" flags="32800" inputMode="0" keyboardType="0" displayType="3" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::checked</Name>
<ValueList>1</ValueList>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-size: 18pt;&#10;}&#10;</LocalCSS>
</Styles>
<DDRInfo>
<Field name="checked" id="7" repetition="1" maxRepetition="1" table="Log"/>
<ValueList name="1" id="3"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="Field" key="14" LabelKey="0" flags="16384" rotation="0">
<Bounds top="67.0000000" left="48.0000000" bottom="89.0000000" right="358.0000000"/>
<ToolTip>
<Calculation><![CDATA["created"]]></Calculation><DisplayCalculation><Chunk type="NoRef">&quot;created&quot;</Chunk></DisplayCalculation></ToolTip>
<FieldObj numOfReps="1" flags="32804" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::creationHostTimestamp</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="9" charStyle="0" monthStyle="1" dayStyle="1" separator="47">
<DateElement>8</DateElement>
<DateElement>4</DateElement>
<DateElement>1</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">-</DateElementSep>
<DateElementSep index="2">-</DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="1152" charStyle="0" hourStyle="1" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-image: none;&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;&#09;border-top-style: none;&#10;&#09;border-right-style: none;&#10;&#09;border-bottom-style: none;&#10;&#09;border-left-style: none;&#10;&#09;border-image-source: none;&#10;}&#10;</LocalCSS>
</Styles>
<DDRInfo>
<Field name="creationHostTimestamp" id="6" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="TabControl" key="37" LabelKey="0" flags="-1073741824" rotation="0">
<Bounds top="93.0000000" left="16.0000000" bottom="253.0000000" right="576.0000000"/>
<TabControlObj tabHeight="21" visPanelKey="39" defaultVisPanelKey="39" visPanelIndex="0" defaultVisPanelIndex="0" tabWidthModifier="16" tabJustification="1" tabFlagSet="24">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
</Styles>
<Object type="TabPanel" key="39" LabelKey="0" name="tab.portal" flags="-1073741824" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="160.0000000" right="560.0000000"/>
<Styles>
</Styles>
<TextObj flags="0">
<CharacterStyleVector>
<Style>
<Data>Portal</Data>
<CharacterStyle mask="0">
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>Portal</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<TabPanelObj tabLeftEdge="0" tabWidth="81" tabPanelFlagSet="0"><Object type="Button" key="105" LabelKey="0" flags="1342177281" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="17">
<Condition op="0">
<Calculation><![CDATA[not $$LOGVIEWERFM.HIDE]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">not</Chunk><Chunk type="NoRef"> $$LOGVIEWERFM.HIDE</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-size: 500pt;&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="0.0000000" left="472.0000000" bottom="19.0000000" right="560.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-weight: bold;&#10;&#09;color: rgba(87.8431%,20%,14.5098%,1);&#10;}&#10;</LocalCSS>
<CustomStyles>
<Name>Minimal</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>Show Hidden</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>1280</Face>
<Color>#E03325</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>Show Hidden</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
</ButtonObj>
</Object>
<Object type="Portal" key="15" LabelKey="0" name="portal" flags="-1073741824" rotation="0">
<Bounds top="50.0000000" left="0.0000000" bottom="160.0000000" right="560.0000000"/>
<PortalObj portalFlags="153" numOfRows="4" initialRow="1">
<TableAliasKey>LogItem</TableAliasKey>
<FieldList><Field table="LogItem" id="3" name="name"></Field><Field table="LogItem" id="4" name="value"></Field></FieldList><SortList Maintain="True" value="True"><Sort type="Custom"><PrimaryField><Field table="LogItem" id="3" name="name"></Field></PrimaryField><ValueList id="2" name="LogItem: Custom Sort"></ValueList></Sort></SortList><FilterCalc enable="True"><Calculation><![CDATA[If ( not IsEmpty ( Log::FILTER_NAME ) ; 	PatternCount ( LogItem::name ; Log::FILTER_NAME  ) ;	True)and If ( not IsEmpty ( Log::FILTER_VALUE ) ; 	PatternCount ( LogItem::value ; Log::FILTER_VALUE ) ;	True)and If ( $$LOGVIEWERFM.HIDE ;	IsEmpty ( FilterValues (		ValueListItems ( Get ( FileName ) ; "LogItem: Hide" ) ;		LogItem::name	) ) ;	True)]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">If</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">not</Chunk><Chunk type="NoRef"> </Chunk><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="Log" id="17" name="FILTER_NAME"></Field></Chunk><Chunk type="NoRef"> ) ; &#13;&#09;</Chunk><Chunk type="FunctionRef">PatternCount</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="LogItem" id="3" name="name"></Field></Chunk><Chunk type="NoRef"> ; </Chunk><Chunk type="FieldRef"><Field table="Log" id="17" name="FILTER_NAME"></Field></Chunk><Chunk type="NoRef">  ) ;&#13;&#09;</Chunk><Chunk type="FunctionRef">True</Chunk><Chunk type="NoRef">&#13;)&#13;</Chunk><Chunk type="FunctionRef">and</Chunk><Chunk type="NoRef"> </Chunk><Chunk type="FunctionRef">If</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">not</Chunk><Chunk type="NoRef"> </Chunk><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="Log" id="18" name="FILTER_VALUE"></Field></Chunk><Chunk type="NoRef"> ) ; &#13;&#09;</Chunk><Chunk type="FunctionRef">PatternCount</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="LogItem" id="4" name="value"></Field></Chunk><Chunk type="NoRef"> ; </Chunk><Chunk type="FieldRef"><Field table="Log" id="18" name="FILTER_VALUE"></Field></Chunk><Chunk type="NoRef"> ) ;&#13;&#09;</Chunk><Chunk type="FunctionRef">True</Chunk><Chunk type="NoRef">&#13;)&#13;</Chunk><Chunk type="FunctionRef">and</Chunk><Chunk type="NoRef"> </Chunk><Chunk type="FunctionRef">If</Chunk><Chunk type="NoRef"> ( $$LOGVIEWERFM.HIDE ;&#13;&#09;</Chunk><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">FilterValues</Chunk><Chunk type="NoRef"> (&#13;&#09;&#09;</Chunk><Chunk type="FunctionRef">ValueListItems</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">Get</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">FileName</Chunk><Chunk type="NoRef"> ) ; &quot;LogItem: Hide&quot; ) ;&#13;&#09;&#09;</Chunk><Chunk type="FieldRef"><Field table="LogItem" id="3" name="name"></Field></Chunk><Chunk type="NoRef">&#13;&#09;) ) ;&#13;&#09;</Chunk><Chunk type="FunctionRef">True</Chunk><Chunk type="NoRef">&#13;)</Chunk></DisplayCalculation></FilterCalc>
<Styles>
</Styles>
<Object type="Text" key="101" LabelKey="0" flags="0" rotation="0">
<Bounds top="5.0000000" left="17.0000000" bottom="21.0000000" right="29.0000000"/>
<TextObj flags="10" tableViewVisibility="0">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-size: 10pt;&#10;&#09;color: rgba(78.8235%,74.902%,63.1373%,1);&#10;&#09;text-align: center;&#10;}&#10;self .inner_border&#10;{&#10;&#09;padding-left: 0pt;&#10;}&#10;</LocalCSS>
</Styles>
<CharacterStyleVector>
<Style>
<Data>{{RecordNumber}}</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>10</Font-size>
<Face>0</Face>
<Color>#C9BFA1</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>{{RecordNumber}}</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
<FieldList quickFind="False"></FieldList></TextObj>
</Object>
<Object type="Text" key="99" LabelKey="0" flags="0" rotation="0">
<Bounds top="7.0000000" left="4.0000000" bottom="19.0000000" right="16.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-size: 6pt;&#10;}&#10;</LocalCSS>
<CustomStyles>
<Name>Graphic: Arrow</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data> </Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>6</Font-size>
<Face>0</Face>
<Color>#72674E</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data> </Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
<Object type="GroupButton" key="57" LabelKey="0" flags="0" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="27.0000000" right="31.0000000"/>
<GroupButtonObj numOfObjs="1">
<Step enable="True" id="1" name="Perform Script"><StepText>Perform Script [ “Log Viewer: FM: Detail Arrow Button” ]</StepText><CurrentScript value="Pause"></CurrentScript><Script id="226" name="Log Viewer: FM: Detail Arrow Button"></Script></Step>
<Styles>
</Styles>
<Object type="Text" key="53" LabelKey="0" flags="16384" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="27.0000000" right="31.0000000"/>
<ToolTip>
<Calculation><![CDATA[If ( Get ( ActiveModifierKeys ) = 8 or Get ( ActiveModifierKeys ) = 10 /* Alt/Option */ ;
	"find logs matching this record" ;
	"go to Detail"
		& "¶¶hold "
		& If ( Get ( SystemPlatform ) = -2 ; "Alt" ; "Option" )
		& " to find logs matching this record"
)]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">If</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">Get</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">ActiveModifierKeys</Chunk><Chunk type="NoRef"> ) = 8 </Chunk><Chunk type="FunctionRef">or</Chunk><Chunk type="NoRef"> </Chunk><Chunk type="FunctionRef">Get</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">ActiveModifierKeys</Chunk><Chunk type="NoRef"> ) = 10 /* Alt/Option */ ;&#13;&#10;&#09;&quot;find logs matching this record&quot; ;&#13;&#10;&#09;&quot;go to Detail&quot;&#13;&#10;&#09;&#09;&amp; &quot;¶¶hold &quot;&#13;&#10;&#09;&#09;&amp; </Chunk><Chunk type="FunctionRef">If</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">Get</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">SystemPlatform</Chunk><Chunk type="NoRef"> ) = -2 ; &quot;Alt&quot; ; &quot;Option&quot; )&#13;&#10;&#09;&#09;&amp; &quot; to find logs matching this record&quot;&#13;&#10;)</Chunk></DisplayCalculation></ToolTip>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-image: none;&#10;&#09;background-color: rgba(100%,100%,100%,0);&#10;&#09;border-top-color: rgba(67.8431%,64.7059%,56.4706%,1);&#10;&#09;border-right-color: rgba(67.8431%,64.7059%,56.4706%,1);&#10;&#09;border-bottom-color: rgba(67.8431%,64.7059%,56.4706%,1);&#10;&#09;border-left-color: rgba(67.8431%,64.7059%,56.4706%,1);&#10;&#09;border-top-width: 1pt;&#10;&#09;border-right-width: 1pt;&#10;&#09;border-bottom-width: 1pt;&#10;&#09;border-left-width: 1pt;&#10;&#09;border-top-right-radius: 2pt 2pt;&#10;&#09;border-bottom-right-radius: 2pt 2pt;&#10;&#09;border-image-source: none;&#10;&#09;font-size: 11pt;&#10;&#09;color: rgba(87.451%,83.5294%,74.902%,1);&#10;&#09;-fm-text-vertical-align: center;&#10;}&#10;self:hover&#10;{&#10;&#09;background-image: none;&#10;&#09;background-color: rgba(0%,0%,0%,0.12);&#10;&#09;border-image-source: none;&#10;}&#10;self:pressed&#10;{&#10;&#09;background-image: none;&#10;&#09;background-color: rgba(0%,0%,0%,0.2);&#10;&#09;border-image-source: none;&#10;}&#10;self:focus&#10;{&#10;&#09;border-top-color: rgba(28.2353%,24.7059%,14.5098%,1);&#10;&#09;border-right-color: rgba(28.2353%,24.7059%,14.5098%,1);&#10;&#09;border-bottom-color: rgba(28.2353%,24.7059%,14.5098%,1);&#10;&#09;border-left-color: rgba(28.2353%,24.7059%,14.5098%,1);&#10;&#09;border-top-style: solid;&#10;&#09;border-right-style: solid;&#10;&#09;border-bottom-style: solid;&#10;&#09;border-left-style: solid;&#10;&#09;box-shadow: 0pt 0pt 2pt 1pt rgba(8.62745%,52.9412%,98.4314%,1);&#10;}&#10;self:droptarget&#10;{&#10;&#09;box-shadow: inset 0pt 0pt 6pt 0pt rgba(8.62745%,52.9412%,98.4314%,1);&#10;}&#10;self .inner_border&#10;{&#10;&#09;border-top-right-radius: 4pt 4pt;&#10;&#09;border-bottom-right-radius: 4pt 4pt;&#10;&#09;border-bottom-left-radius: 4pt 4pt;&#10;&#09;border-top-left-radius: 4pt 4pt;&#10;&#09;border-image-slice: 100% 100% 100% 100%;&#10;&#09;font-family: -fm-font-family(Helvetica,roman);&#10;&#09;padding-left: 0pt;&#10;}&#10;self .baseline&#10;{&#10;&#09;border-bottom-width: 1pt;&#10;}&#10;</LocalCSS>
</Styles>
<CharacterStyleVector>
<Style>
<Data> </Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>11</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data> </Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
</GroupButtonObj>
</Object>
<Object type="Field" key="16" LabelKey="0" flags="1" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[True]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">True</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
<Item id="1" flags="5">
<Condition op="0">
<Calculation><![CDATA[/** * Highlight items not in the custom sort value list *  * If the custom sort value list contains all items added by LogData and LogDataSession * functions, this will cause data that was manually added by the developer to be * highlighted. * */IsEmpty ( FilterValues (	ValueListItems ( Get ( FileName ) ; "LogItem: Custom Sort" ) ;	LogItem::name) )]]></Calculation><DisplayCalculation><Chunk type="NoRef">/**&#13; * Highlight items not in the custom sort value list&#13; * &#13; * If the custom sort value list contains all items added by LogData and LogDataSession&#13; * functions, this will cause data that was manually added by the developer to be&#13; * highlighted.&#13; *&#13; */&#13;&#13;</Chunk><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">FilterValues</Chunk><Chunk type="NoRef"> (&#13;&#09;</Chunk><Chunk type="FunctionRef">ValueListItems</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">Get</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">FileName</Chunk><Chunk type="NoRef"> ) ; &quot;LogItem: Custom Sort&quot; ) ;&#13;&#09;</Chunk><Chunk type="FieldRef"><Field table="LogItem" id="3" name="name"></Field></Chunk><Chunk type="NoRef">&#13;) )</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(97.6471%,83.9216%,82.7451%,0.5);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="0.0000000" left="31.0000000" bottom="27.0000000" right="199.0000000"/>
<FieldObj numOfReps="1" flags="32800" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>LogItem::name</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;border-top-style: none;&#10;&#09;border-right-style: none;&#10;&#09;border-bottom-style: none;&#10;&#09;border-left-style: none;&#10;&#09;border-top-right-radius: 0pt 0pt;&#10;&#09;border-bottom-right-radius: 0pt 0pt;&#10;&#09;border-bottom-left-radius: 0pt 0pt;&#10;&#09;border-top-left-radius: 0pt 0pt;&#10;&#09;color: rgba(44.7059%,40.3922%,30.5882%,1);&#10;&#09;text-align: right;&#10;&#09;-fm-text-vertical-align: center;&#10;}&#10;</LocalCSS>
</Styles>
<DDRInfo>
<Field name="name" id="3" repetition="1" maxRepetition="1" table="LogItem"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="Field" key="17" LabelKey="0" flags="1073741825" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[True]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">True</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="0.0000000" left="199.0000000" bottom="27.0000000" right="541.0000000"/>
<FieldObj numOfReps="1" flags="32800" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>LogItem::value</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;border-top-style: none;&#10;&#09;border-right-style: none;&#10;&#09;border-bottom-style: none;&#10;&#09;border-left-style: none;&#10;&#09;border-top-right-radius: 0pt 0pt;&#10;&#09;border-bottom-right-radius: 0pt 0pt;&#10;&#09;border-bottom-left-radius: 0pt 0pt;&#10;&#09;border-top-left-radius: 0pt 0pt;&#10;&#09;-fm-text-vertical-align: center;&#10;}&#10;</LocalCSS>
</Styles>
<DDRInfo>
<Field name="value" id="4" repetition="1" maxRepetition="1" table="LogItem"/>
</DDRInfo>
</FieldObj>
</Object>
</PortalObj>
</Object>
<Object type="Field" key="28" LabelKey="0" flags="1073741824" rotation="0">
<ScriptTriggers>
<Trigger event="OnObjectModify" id="3" triggerFlags="1">
<Script id="108" name="Log Viewer: FM: Filter OOModify Trigger">
</Script>
<TriggerText>&quot;Log Viewer: FM: Filter OOModify Trigger&quot;</TriggerText>
</Trigger>
</ScriptTriggers>
<Bounds top="22.0000000" left="200.0000000" bottom="50.0000000" right="528.0000000"/>
<FieldObj numOfReps="1" flags="32" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::FILTER_VALUE</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;border-top-color: rgba(100%,100%,100%,0);&#10;&#09;border-right-color: rgba(100%,100%,100%,0);&#10;&#09;border-bottom-color: rgba(100%,100%,100%,0);&#10;&#09;border-left-color: rgba(100%,100%,100%,0);&#10;&#09;border-top-style: none;&#10;&#09;border-right-style: none;&#10;&#09;border-bottom-style: none;&#10;&#09;border-left-style: none;&#10;&#09;border-top-right-radius: 0pt 0pt;&#10;&#09;border-bottom-right-radius: 0pt 0pt;&#10;&#09;border-bottom-left-radius: 0pt 0pt;&#10;&#09;border-top-left-radius: 0pt 0pt;&#10;&#09;-fm-text-vertical-align: bottom;&#10;}&#10;self .text&#10;{&#10;&#09;margin-top: 2pt;&#10;&#09;margin-right: 8pt;&#10;&#09;margin-bottom: 4pt;&#10;&#09;margin-left: 8pt;&#10;}&#10;self .repeat_border&#10;{&#10;&#09;border-bottom-color: rgba(100%,100%,100%,0);&#10;}&#10;</LocalCSS>
</Styles>
<DDRInfo>
<Field name="FILTER_VALUE" id="18" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="Field" key="29" LabelKey="0" flags="0" rotation="0">
<ScriptTriggers>
<Trigger event="OnObjectModify" id="3" triggerFlags="1">
<Script id="108" name="Log Viewer: FM: Filter OOModify Trigger">
</Script>
<TriggerText>&quot;Log Viewer: FM: Filter OOModify Trigger&quot;</TriggerText>
</Trigger>
</ScriptTriggers>
<Bounds top="22.0000000" left="32.0000000" bottom="50.0000000" right="200.0000000"/>
<FieldObj numOfReps="1" flags="32" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="0" pictFormat="5">
<Name>Log::FILTER_NAME</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;border-top-color: rgba(100%,100%,100%,0);&#10;&#09;border-right-color: rgba(100%,100%,100%,0);&#10;&#09;border-bottom-color: rgba(100%,100%,100%,0);&#10;&#09;border-left-color: rgba(100%,100%,100%,0);&#10;&#09;border-top-style: none;&#10;&#09;border-right-style: none;&#10;&#09;border-bottom-style: none;&#10;&#09;border-left-style: none;&#10;&#09;border-top-right-radius: 0pt 0pt;&#10;&#09;border-bottom-right-radius: 0pt 0pt;&#10;&#09;border-bottom-left-radius: 0pt 0pt;&#10;&#09;border-top-left-radius: 0pt 0pt;&#10;&#09;color: rgba(44.7059%,40.3922%,30.5882%,1);&#10;&#09;text-align: right;&#10;&#09;-fm-text-vertical-align: bottom;&#10;}&#10;self .text&#10;{&#10;&#09;margin-top: 2pt;&#10;&#09;margin-right: 8pt;&#10;&#09;margin-bottom: 4pt;&#10;&#09;margin-left: 8pt;&#10;}&#10;self .repeat_border&#10;{&#10;&#09;border-bottom-color: rgba(100%,100%,100%,0);&#10;}&#10;</LocalCSS>
</Styles>
<DDRInfo>
<Field name="FILTER_NAME" id="17" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="Text" key="30" LabelKey="0" flags="1" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="17">
<Condition op="0">
<Calculation><![CDATA[not IsEmpty ( Log::FILTER_NAME )]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">not</Chunk><Chunk type="NoRef"> </Chunk><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="Log" id="17" name="FILTER_NAME"></Field></Chunk><Chunk type="NoRef"> )</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-size: 500pt;&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="22.0000000" left="88.0000000" bottom="50.0000000" right="200.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-style: italic;&#10;&#09;color: rgba(78.8235%,74.902%,63.1373%,1);&#10;&#09;text-align: right;&#10;&#09;-fm-text-vertical-align: bottom;&#10;}&#10;self .inner_border&#10;{&#10;&#09;padding-top: 2pt;&#10;&#09;padding-right: 8pt;&#10;&#09;padding-bottom: 4pt;&#10;}&#10;</LocalCSS>
</Styles>
<CharacterStyleVector>
<Style>
<Data>filter by name</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>512</Face>
<Color>#C9BFA1</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>filter by name</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
<Object type="Text" key="31" LabelKey="0" flags="1" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="17">
<Condition op="0">
<Calculation><![CDATA[not IsEmpty ( Log::FILTER_VALUE )]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">not</Chunk><Chunk type="NoRef"> </Chunk><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="Log" id="18" name="FILTER_VALUE"></Field></Chunk><Chunk type="NoRef"> )</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-size: 500pt;&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="22.0000000" left="200.0000000" bottom="50.0000000" right="312.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-style: italic;&#10;&#09;color: rgba(78.8235%,74.902%,63.1373%,1);&#10;&#09;-fm-text-vertical-align: bottom;&#10;}&#10;self .inner_border&#10;{&#10;&#09;padding-top: 2pt;&#10;&#09;padding-bottom: 4pt;&#10;}&#10;</LocalCSS>
</Styles>
<CharacterStyleVector>
<Style>
<Data>filter by value</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>512</Face>
<Color>#C9BFA1</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>filter by value</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
<Object type="Button" key="84" LabelKey="0" flags="1342193664" rotation="0">
<Bounds top="22.0000000" left="528.0000000" bottom="50.0000000" right="559.0000000"/>
<ToolTip>
<Calculation><![CDATA[If ( not IsEmpty ( Log::FILTER_VALUE ) ;
	"clear filter by value"
)]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">If</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">not</Chunk><Chunk type="NoRef"> </Chunk><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="Log" id="18" name="FILTER_VALUE"></Field></Chunk><Chunk type="NoRef"> ) ;&#13;&#10;&#09;&quot;clear filter by value&quot;&#13;&#10;)</Chunk></DisplayCalculation></ToolTip>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-image: none;&#10;&#09;background-color: rgba(100%,100%,100%,1);&#10;&#09;border-top-right-radius: 2pt 2pt;&#10;&#09;border-image-source: none;&#10;}&#10;</LocalCSS>
<CustomStyles>
<Name>Minimal</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data></Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>1024</Face>
<Color>#3A5274</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data></Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
<Step enable="True" id="1" name="Perform Script"><StepText>Perform Script [ “Log Viewer: FM: Clear Filter: Value” ]</StepText><CurrentScript value="Pause"></CurrentScript><Script id="157" name="Log Viewer: FM: Clear Filter: Value"></Script></Step>
</ButtonObj>
</Object>
<Object type="Text" key="85" LabelKey="0" flags="1342193665" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[IsEmpty ( Log::FILTER_VALUE )]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="Log" id="18" name="FILTER_VALUE"></Field></Chunk><Chunk type="NoRef"> )</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="28.0000000" left="536.0000000" bottom="44.0000000" right="552.0000000"/>
<ToolTip>
<Calculation><![CDATA[If ( not IsEmpty ( Log::FILTER_VALUE ) ;
	"clear filter by value"
)]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">If</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">not</Chunk><Chunk type="NoRef"> </Chunk><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="Log" id="18" name="FILTER_VALUE"></Field></Chunk><Chunk type="NoRef"> ) ;&#13;&#10;&#09;&quot;clear filter by value&quot;&#13;&#10;)</Chunk></DisplayCalculation></ToolTip>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Graphic: Delete</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data> </Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#72674E</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data> </Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
<Object type="Button" key="93" LabelKey="0" flags="16384" rotation="0">
<Bounds top="22.0000000" left="1.0000000" bottom="50.0000000" right="32.0000000"/>
<ToolTip>
<Calculation><![CDATA[If ( not IsEmpty ( Log::FILTER_NAME ) ;
	"clear filter by name"
)]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">If</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">not</Chunk><Chunk type="NoRef"> </Chunk><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="Log" id="17" name="FILTER_NAME"></Field></Chunk><Chunk type="NoRef"> ) ;&#13;&#10;&#09;&quot;clear filter by name&quot;&#13;&#10;)</Chunk></DisplayCalculation></ToolTip>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-image: none;&#10;&#09;background-color: rgba(100%,100%,100%,1);&#10;&#09;border-image-source: none;&#10;}&#10;</LocalCSS>
<CustomStyles>
<Name>Minimal</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data></Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>1024</Face>
<Color>#3A5274</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data></Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
<Step enable="True" id="1" name="Perform Script"><StepText>Perform Script [ “Log Viewer: FM: Clear Filter: Name” ]</StepText><CurrentScript value="Pause"></CurrentScript><Script id="158" name="Log Viewer: FM: Clear Filter: Name"></Script></Step>
</ButtonObj>
</Object>
<Object type="Text" key="94" LabelKey="0" flags="16385" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="5">
<Condition op="0">
<Calculation><![CDATA[IsEmpty ( Log::FILTER_NAME )]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="Log" id="17" name="FILTER_NAME"></Field></Chunk><Chunk type="NoRef"> )</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;background-color: rgba(0%,0%,0%,0);&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="28.0000000" left="9.0000000" bottom="45.0000000" right="25.0000000"/>
<ToolTip>
<Calculation><![CDATA[If ( not IsEmpty ( Log::FILTER_NAME ) ;
	"clear filter by name"
)]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">If</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FunctionRef">not</Chunk><Chunk type="NoRef"> </Chunk><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="Log" id="17" name="FILTER_NAME"></Field></Chunk><Chunk type="NoRef"> ) ;&#13;&#10;&#09;&quot;clear filter by name&quot;&#13;&#10;)</Chunk></DisplayCalculation></ToolTip>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Graphic: Delete</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data> </Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#72674E</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data> </Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
<Object type="Button" key="103" LabelKey="0" flags="1342193665" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="17">
<Condition op="0">
<Calculation><![CDATA[$$LOGVIEWERFM.HIDE]]></Calculation><DisplayCalculation><Chunk type="NoRef">$$LOGVIEWERFM.HIDE</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-size: 500pt;&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="0.0000000" left="472.0000000" bottom="19.0000000" right="560.0000000"/>
<ToolTip>
<Calculation><![CDATA[If ( $$LOGVIEWERFM.HIDE ;
	"Show hidden items" ;
	"Hide items on the 'LogItem: Hide' value list."
)]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">If</Chunk><Chunk type="NoRef"> ( $$LOGVIEWERFM.HIDE ;&#13;&#10;&#09;&quot;Show hidden items&quot; ;&#13;&#10;&#09;&quot;Hide items on the &apos;LogItem: Hide&apos; value list.&quot;&#13;&#10;)</Chunk></DisplayCalculation></ToolTip>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Minimal</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>Hide By List</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>1024</Face>
<Color>#3A5274</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>Hide By List</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
<Step enable="True" id="1" name="Perform Script"><StepText>Perform Script [ “Log Viewer: FM: Toggle Hide” ]</StepText><CurrentScript value="Pause"></CurrentScript><Script id="225" name="Log Viewer: FM: Toggle Hide"></Script></Step>
</ButtonObj>
</Object>
</TabPanelObj>
</Object>
<Object type="TabPanel" key="40" LabelKey="0" name="tab.logData" flags="-1073741824" rotation="0">
<Bounds top="0.0000000" left="0.0000000" bottom="160.0000000" right="560.0000000"/>
<Styles>
</Styles>
<TextObj flags="0">
<CharacterStyleVector>
<Style>
<Data>Log Data</Data>
<CharacterStyle mask="0">
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>Log Data</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<TabPanelObj tabLeftEdge="79" tabWidth="99" tabPanelFlagSet="0"><Object type="Field" key="43" LabelKey="0" flags="-1073741824" rotation="0">
<Bounds top="50.0000000" left="0.0000000" bottom="160.0000000" right="560.0000000"/>
<FieldObj numOfReps="1" flags="32" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="1" pictFormat="5">
<Name>Log::logData</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;border-top-right-radius: 0pt 0pt;&#10;&#09;border-top-left-radius: 0pt 0pt;&#10;}&#10;</LocalCSS>
</Styles>
<DDRInfo>
<Field name="logData" id="2" repetition="1" maxRepetition="1" table="Log"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="Button" key="83" LabelKey="0" flags="5" rotation="0">
<ConditionalFormatting>
<Item id="0" flags="17">
<Condition op="0">
<Calculation><![CDATA[IsEmpty ( Log::logData )]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="Log" id="2" name="logData"></Field></Chunk><Chunk type="NoRef"> )</Chunk></DisplayCalculation><RangeBegin></RangeBegin>
<RangeEnd></RangeEnd>
</Condition>
<Format>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;font-size: 500pt;&#10;}&#10;</LocalCSS>
</Styles>
</Format>
</Item>
</ConditionalFormatting>
<Bounds top="23.0000000" left="0.0000000" bottom="51.0000000" right="128.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<LocalCSS>
self&#10;{&#10;&#09;text-align: left;&#10;}&#10;self .inner_border&#10;{&#10;&#09;padding-left: 8pt;&#10;}&#10;</LocalCSS>
<CustomStyles>
<Name>Minimal</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>Parse This Log Data</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>1024</Face>
<Color>#3A5274</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>Parse This Log Data</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
<Step enable="True" id="1" name="Perform Script"><StepText>Perform Script [ “Log Viewer: FM: Parse Log Data” ]</StepText><CurrentScript value="Pause"></CurrentScript><Script id="4" name="Log Viewer: FM: Parse Log Data"></Script></Step>
</ButtonObj>
<HideCondition>
<Calculation><![CDATA[IsEmpty ( Log::logData )]]></Calculation><DisplayCalculation><Chunk type="FunctionRef">IsEmpty</Chunk><Chunk type="NoRef"> ( </Chunk><Chunk type="FieldRef"><Field table="Log" id="2" name="logData"></Field></Chunk><Chunk type="NoRef"> )</Chunk></DisplayCalculation></HideCondition>
</Object>
</TabPanelObj>
</Object>
</TabControlObj>
</Object>
<Object type="Button" key="48" LabelKey="0" flags="0" rotation="0">
<Bounds top="16.0000000" left="16.0000000" bottom="48.0000000" right="72.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Header Button</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>‹ List</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>‹ List</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
<Step enable="True" id="6" name="Go to Layout"><StepText>Go to Layout [ “Log: List” (Log) ]</StepText><LayoutDestination value="SelectedLayout"></LayoutDestination><Layout id="2" name="Log: List"></Layout></Step>
</ButtonObj>
</Object>
<Object type="Button" key="59" LabelKey="0" flags="1342177280" rotation="0">
<Bounds top="16.0000000" left="376.0000000" bottom="48.0000000" right="504.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Header Button</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>Parse All Log Data</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>Parse All Log Data</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
<Step enable="True" id="1" name="Perform Script"><StepText>Perform Script [ “Log Viewer: FM: Parse All Log Data” ]</StepText><CurrentScript value="Pause"></CurrentScript><Script id="5" name="Log Viewer: FM: Parse All Log Data"></Script></Step>
</ButtonObj>
</Object>
<Object type="Button" key="98" LabelKey="0" flags="1342193664" rotation="0">
<Bounds top="16.0000000" left="520.0000000" bottom="48.0000000" right="576.0000000"/>
<ToolTip>
<Calculation><![CDATA["Go to related LogItem records."
& ¶
& "Use after performing a find to see the log items related to the found set."]]></Calculation><DisplayCalculation><Chunk type="NoRef">&quot;Go to related LogItem records.&quot;&#13;&#10;&amp; ¶&#13;&#10;&amp; &quot;Use after performing a find to see the log items related to the found set.&quot;</Chunk></DisplayCalculation></ToolTip>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Header Button</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>GTRR</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>GTRR</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
<Step enable="True" id="74" name="Go to Related Record"><StepText>Go to Related Record [ From table: “LogItem”; Using layout: “Log Item: Detail” (LogItem) ]&#13;[ Show only related records; Match found set ]</StepText><Option state="False"></Option><MatchAllRecords state="True"></MatchAllRecords><ShowInNewWindow state="False"></ShowInNewWindow><Restore state="True"></Restore><LayoutDestination value="SelectedLayout"></LayoutDestination><NewWndStyles Styles="983554"></NewWndStyles><Table id="1065091" name="LogItem"></Table><Layout id="3" name="Log Item: Detail"></Layout></Step>
</ButtonObj>
</Object>
</Layout>
<Layout width="592" quickFind="True" includeInMenu="True" id="3" name="Log Item: Detail">
<Table id="1065091" name="LogItem"/>
<CustomMenuSet id="0" name=""/>
<Theme name="River Flat" id="04"/>
<Options showRecordIndicator="True" showFieldFramesCurrentRecord="True" showFieldFrames="False" saveRecord="True"/>
<Object type="Text" key="10" LabelKey="0" flags="1073741824" rotation="0">
<Bounds top="16.0000000" left="88.0000000" bottom="48.0000000" right="496.0000000"/>
<TextObj flags="10" tableViewVisibility="0">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Title Text 1</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>{{LayoutName}}</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>24</Font-size>
<Face>256</Face>
<Color>#F4EFE2</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>{{LayoutName}}</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
<FieldList quickFind="False"></FieldList></TextObj>
</Object>
<Object type="Text" key="14" LabelKey="0" flags="0" rotation="0">
<Bounds top="119.0000000" left="16.0000000" bottom="136.0000000" right="80.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>value</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#72674E</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>value</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
<Object type="Field" key="15" LabelKey="14" flags="-1073741824" rotation="0">
<Bounds top="136.0000000" left="16.0000000" bottom="344.0000000" right="576.0000000"/>
<FieldObj numOfReps="1" flags="32" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="1" pictFormat="5">
<Name>LogItem::value</Name>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
</Styles>
<DDRInfo>
<Field name="value" id="4" repetition="1" maxRepetition="1" table="LogItem"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="Text" key="18" LabelKey="0" flags="0" rotation="0">
<Bounds top="71.0000000" left="16.0000000" bottom="88.0000000" right="80.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>name</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#72674E</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>name</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
</Object>
<Object type="Field" key="19" LabelKey="18" flags="1073741824" rotation="0">
<Bounds top="88.0000000" left="16.0000000" bottom="112.0000000" right="576.0000000"/>
<FieldObj numOfReps="1" flags="2080" inputMode="0" keyboardType="0" displayType="0" tableViewVisibility="0" quickFind="1" pictFormat="5">
<Name>LogItem::name</Name>
<ValueList>LogItem: All Names</ValueList>
<ExtendedAttributes fontHeight="15" graphicFormat="5">
<NumFormat flags="2304" charStyle="0" negativeStyle="0" currencySymbol="$" thousandsSep="44" decimalPoint="46" negativeColor="#DD000000" decimalDigits="2" trueString="Yes" falseString="No"/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="47">
<DateElement>3</DateElement>
<DateElement>6</DateElement>
<DateElement>1</DateElement>
<DateElement>8</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1">, </DateElementSep>
<DateElementSep index="2"> </DateElementSep>
<DateElementSep index="3">, </DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="143" charStyle="0" hourStyle="0" minsecStyle="1" separator="58" amString=" AM" pmString=" PM" ampmString=""/>
</ExtendedAttributes>
<Styles>
</Styles>
<DDRInfo>
<Field name="name" id="3" repetition="1" maxRepetition="1" table="LogItem"/>
<ValueList name="LogItem: All Names" id="1"/>
</DDRInfo>
</FieldObj>
</Object>
<Object type="Button" key="20" LabelKey="0" flags="1342193664" rotation="0">
<Bounds top="16.0000000" left="520.0000000" bottom="48.0000000" right="576.0000000"/>
<ToolTip>
<Calculation><![CDATA["Go to related Log records."
& ¶
& "Use after performing a find to see the log entries related to the found set."]]></Calculation><DisplayCalculation><Chunk type="NoRef">&quot;Go to related Log records.&quot;&#13;&#10;&amp; ¶&#13;&#10;&amp; &quot;Use after performing a find to see the log entries related to the found set.&quot;</Chunk></DisplayCalculation></ToolTip>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Header Button</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>GTRR</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>GTRR</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
<Step enable="True" id="74" name="Go to Related Record"><StepText>Go to Related Record [ From table: “Log”; Using layout: “Log: List” (Log) ]&#13;[ Show only related records; Match found set ]</StepText><Option state="False"></Option><MatchAllRecords state="True"></MatchAllRecords><ShowInNewWindow state="False"></ShowInNewWindow><Restore state="True"></Restore><LayoutDestination value="SelectedLayout"></LayoutDestination><NewWndStyles Styles="983554"></NewWndStyles><Table id="1065090" name="Log"></Table><Layout id="2" name="Log: List"></Layout></Step>
</ButtonObj>
</Object>
<Object type="Button" key="21" LabelKey="0" flags="0" rotation="0">
<Bounds top="16.0000000" left="16.0000000" bottom="48.0000000" right="72.0000000"/>
<TextObj flags="2">
<ExtendedAttributes fontHeight="15" graphicFormat="0">
<NumFormat flags="0" charStyle="0" negativeStyle="0" currencySymbol="" thousandsSep="0" decimalPoint="0" negativeColor="#0" decimalDigits="0" trueString="" falseString=""/>
<DateFormat format="0" charStyle="0" monthStyle="0" dayStyle="0" separator="0">
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElement>0</DateElement>
<DateElementSep index="0"></DateElementSep>
<DateElementSep index="1"></DateElementSep>
<DateElementSep index="2"></DateElementSep>
<DateElementSep index="3"></DateElementSep>
<DateElementSep index="4"></DateElementSep>
</DateFormat>
<TimeFormat flags="0" charStyle="0" hourStyle="0" minsecStyle="0" separator="0" amString="" pmString="" ampmString=""/>
</ExtendedAttributes>
<Styles>
<CustomStyles>
<Name>Header Button</Name></CustomStyles>
</Styles>
<CharacterStyleVector>
<Style>
<Data>‹ Back</Data>
<CharacterStyle mask="32695">
<Font-family codeSet="Roman" fontId="3">tahoma,sans-serif</Font-family>
<Font-size>12</Font-size>
<Face>0</Face>
<Color>#DFD5BF</Color>
</CharacterStyle>
</Style>
</CharacterStyleVector>
<ParagraphStyleVector>
<Style>
<Data>‹ Back</Data>
<ParagraphStyle mask="0">
</ParagraphStyle>
</Style>
</ParagraphStyleVector>
</TextObj>
<ButtonObj buttonFlags="0">
<Step enable="True" id="6" name="Go to Layout"><StepText>Go to Layout [ “Log: Detail” (Log) ]</StepText><LayoutDestination value="SelectedLayout"></LayoutDestination><Layout id="4" name="Log: Detail"></Layout></Step>
</ButtonObj>
</Object>
</Layout>
</LayoutCatalog>
<ValueListCatalog>
	<ValueList id="1" name="LogItem: All Names">
		<Source value="Field"/>
		<PrimaryField show="True" sort="True">
			<Field table="LogItem" id="3" name="name"/>
		</PrimaryField>
		<ShowRelated value="False"/>
	</ValueList>
	<ValueList id="2" name="LogItem: Custom Sort">
		<Source value="Custom"/>
		<CustomValues>
			<Text>FileNameAccountNamelogLevelerrorTypeerrorCodeerrorDescriptionerrorInfomessageScriptNameScriptParameterScriptResultSESSIONIDAccountExtendedPrivilegesAccountPrivilegeSetNameAllowAbortStateApplicationLanguageApplicationVersionConnectionStateCurrentHostTimestampCurrentTimestampDeviceEncryptionStateErrorCaptureStateFileMakerPathFilePathHighContrastColorHighContrastStateHostIPAddressHostNameInstalledFMPluginsLayoutAccessLayoutNameLayoutTableNameLayoutViewStateMultiUserStateRecordAccessRecordIDRecordOpenCountRecordOpenStateScreenDepthScreenHeightScreenWidthSortStateSystemIPAddressSystemLanguageSystemNICAddressSystemPlatformStatusAreaStateSystemVersionUserCountUserNameUseSystemFormatsStateWindowModeWindowNameWindowOrientationWindowStyleWindowVisibleActiveFieldNameActiveFieldTableNameActiveLayoutObjectName</Text>
		</CustomValues>
	</ValueList>
	<ValueList id="3" name="1">
		<Source value="Custom"/>
		<CustomValues>
			<Text>1</Text>
		</CustomValues>
	</ValueList>
	<ValueList id="4" name="LogItem: Hide">
		<Source value="Custom"/>
		<CustomValues>
			<Text>ScriptResultSESSIONIDAccountExtendedPrivilegesAccountPrivilegeSetNameAllowAbortStateApplicationLanguageApplicationVersionConnectionStateCurrentHostTimestampCurrentTimestampDeviceEncryptionStateErrorCaptureStateFileMakerPathFilePathHighContrastColorHighContrastStateHostIPAddressHostNameInstalledFMPluginsLayoutAccessLayoutNameLayoutTableNameLayoutViewStateMultiUserStateRecordAccessRecordIDRecordOpenCountRecordOpenStateScreenDepthScreenHeightScreenWidthSortStateSystemIPAddressSystemLanguageSystemNICAddressSystemPlatformStatusAreaStateSystemVersionUserCountUserNameUseSystemFormatsStateWindowModeWindowNameWindowOrientationWindowStyleWindowVisibleActiveFieldNameActiveFieldTableNameActiveLayoutObjectName</Text>
		</CustomValues>
	</ValueList>
</ValueListCatalog>
<ScriptCatalog>
	<Group groupCollapsed="False" includeInMenu="False" id="116" name="Application">
		<Group groupCollapsed="False" includeInMenu="False" id="201" name="Log">
			<Script includeInMenu="False" runFullAccess="False" id="176" name="-">
				<StepList/>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="177" name="Log: READ ME">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>###########################################################################</StepText>
						<Text>##########################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Log</StepText>
						<Text> Log</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Created by Daniel Smith, dansmith65@gmail.com</StepText>
						<Text> Created by Daniel Smith, dansmith65@gmail.com</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#	</StepText>
						<Text>	</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Application for receiving log data from FileMaker databases.</StepText>
						<Text> Application for receiving log data from FileMaker databases.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># This file can be included with your current application to handle all your logging needs. It has been designed as</StepText>
						<Text> This file can be included with your current application to handle all your logging needs. It has been designed as</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># both a self-standing logging application as well as an example file/documentation for the included Log-related</StepText>
						<Text> both a self-standing logging application as well as an example file/documentation for the included Log-related</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># modules.</StepText>
						<Text> modules.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>###########################################################################</StepText>
						<Text>##########################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># INTEGRATION  (as a seperate file in your application)</StepText>
						<Text> INTEGRATION  (as a seperate file in your application)</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        1. install the Logger module in every file in your application</StepText>
						<Text>        1. install the Logger module in every file in your application</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        2. configure security settings in this file</StepText>
						<Text>        2. configure security settings in this file</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - add user accounts as necessary</StepText>
						<Text>                - add user accounts as necessary</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - suggested privilege set&apos;s have been created for you</StepText>
						<Text>                - suggested privilege set&apos;s have been created for you</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - enable Extended Privileges as necessary</StepText>
						<Text>                - enable Extended Privileges as necessary</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - consider enabling File Access restrictions</StepText>
						<Text>                - consider enabling File Access restrictions</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        3. call the local Logger module from any script in your application to create a log entry</StepText>
						<Text>        3. call the local Logger module from any script in your application to create a log entry</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        4. consider adding a &quot;Close File&quot; step to a script run OnLastWindowClose in any file that accesses this file</StepText>
						<Text>        4. consider adding a &quot;Close File&quot; step to a script run OnLastWindowClose in any file that accesses this file</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#            (if you don&apos;t, this Log file may stay open after the user closes your application)</StepText>
						<Text>            (if you don&apos;t, this Log file may stay open after the user closes your application)</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># LICENSE:</StepText>
						<Text> LICENSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        The MIT License (MIT)Copyright (c) 2014 Daniel SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</StepText>
						<Text>        The MIT License (MIT)Copyright (c) 2014 Daniel SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="178" name="Log: Version 1.0.0-beta2">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># PURPOSE:</StepText>
						<Text> PURPOSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Return the version number of this application.</StepText>
						<Text>    Return the version number of this application.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># RETURNS:</StepText>
						<Text> RETURNS:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    version string portion of the script name</StepText>
						<Text>    version string portion of the script name</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># NOTES:</StepText>
						<Text> NOTES:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    http://filemakerstandards.org/display/bp/Default+scripts</StepText>
						<Text>    http://filemakerstandards.org/display/bp/Default+scripts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    This guideline was heavily influenced by http://semver.org/spec/v2.0.0-rc.1.html</StepText>
						<Text>    This guideline was heavily influenced by http://semver.org/spec/v2.0.0-rc.1.html</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Changelog: Summary is formatted with markdown: http://daringfireball.net/projects/markdown/- use different header &apos;tag&apos; (#&apos;s) depending on the version being incrementedMajor: H1Minor: H2Patch: H3</StepText>
						<Text>    Changelog: Summary is formatted with markdown: http://daringfireball.net/projects/markdown/- use different header &apos;tag&apos; (#&apos;s) depending on the version being incrementedMajor: H1Minor: H2Patch: H3</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $scriptResult; Value:// return script version string portion of script nameLet ( [	~text = Get ( ScriptName ) ;	~firstNumber = Left ( Filter ( ~text  ; &quot;0123456789&quot; ) ; 1 ) ;	~firstNumberPosition = Position ( ~text ; ~firstNumber ; 1 ; 1 )] ;	Right ( ~text ; Length ( ~text ) - ~firstNumberPosition + 1 )) ]</StepText>
						<Value>
							<Calculation><![CDATA[// return script version string portion of script nameLet ( [	~text = Get ( ScriptName ) ;	~firstNumber = Left ( Filter ( ~text  ; "0123456789" ) ; 1 ) ;	~firstNumberPosition = Position ( ~text ; ~firstNumber ; 1 ; 1 )] ;	Right ( ~text ; Length ( ~text ) - ~firstNumberPosition + 1 ))]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// return script version string portion of script name</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~text = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptName</Chunk>
								<Chunk type="NoRef"> ) ;	~firstNumber = </Chunk>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Filter</Chunk>
								<Chunk type="NoRef"> ( ~text  ; &quot;0123456789&quot; ) ; 1 ) ;	~firstNumberPosition = </Chunk>
								<Chunk type="FunctionRef">Position</Chunk>
								<Chunk type="NoRef"> ( ~text ; ~firstNumber ; 1 ; 1 )] ;	</Chunk>
								<Chunk type="FunctionRef">Right</Chunk>
								<Chunk type="NoRef"> ( ~text ; </Chunk>
								<Chunk type="FunctionRef">Length</Chunk>
								<Chunk type="NoRef"> ( ~text ) - ~firstNumberPosition + 1 ))</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$scriptResult</Name>
					</Step>
					<Step enable="True" id="103" name="Exit Script">
						<StepText>Exit Script [ Result: $scriptResult ]</StepText>
						<Calculation><![CDATA[$scriptResult]]></Calculation>
						<DisplayCalculation>
							<Chunk type="NoRef">$scriptResult</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># MAJOR.MINOR.PATCH{-PRERELEASE}{+}</StepText>
						<Text> MAJOR.MINOR.PATCH{-PRERELEASE}{+}</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    MAJOR:    Arbitrarily defined by the developer, but must introduce significant change to either the feature set, or the internal method of processing.</StepText>
						<Text>    MAJOR:    Arbitrarily defined by the developer, but must introduce significant change to either the feature set, or the internal method of processing.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    MINOR:    New features. Should be incremented whenever a new feature is added.</StepText>
						<Text>    MINOR:    New features. Should be incremented whenever a new feature is added.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    PATCH:    Bug fixes. Should not introduce new features (unless the lack of that feature can be considered a bug).</StepText>
						<Text>    PATCH:    Bug fixes. Should not introduce new features (unless the lack of that feature can be considered a bug).</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    {-PRERELEASE}    OPTIONAL    A pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.This value can be compaired as text in FileMaker, and the following will be true:  &quot;alpha&quot; &lt; &quot;beta&quot; and &quot;alpha&quot; &lt; &quot;rc&quot; and &quot;beta&quot; &lt; &quot;rc&quot;.</StepText>
						<Text>    {-PRERELEASE}    OPTIONAL    A pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.This value can be compaired as text in FileMaker, and the following will be true:  &quot;alpha&quot; &lt; &quot;beta&quot; and &quot;alpha&quot; &lt; &quot;rc&quot; and &quot;beta&quot; &lt; &quot;rc&quot;.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    {+}    OPTIONAL    If the file has been modified since the version was last incremented, and the version does not need to be incremented yet (still under development), append the version string with a +.</StepText>
						<Text>    {+}    OPTIONAL    If the file has been modified since the version was last incremented, and the version does not need to be incremented yet (still under development), append the version string with a +.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># These guidelines should be followed:</StepText>
						<Text> These guidelines should be followed:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Use decimal separated text to store the version.</StepText>
						<Text>    Use decimal separated text to store the version.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    When evaluating the version, MUST NOT convert the entire text to a number. Each decimal separated section must be evaluated individually, and in order. Here is a possible method of doing so:Let ( [	ver = &quot;1.2.21&quot; ;	// extract pre-release version string	ver = Substitute ( ver ; &quot;-&quot; ; ¶ ) ;	preRelease = GetValue ( ver ; 2 ) ;	// extract normal version string	ver = GetValue ( ver ; 1 ) ;	ver = Substitute ( ver ; &quot;.&quot; ; ¶ ) ;	major = GetAsNumber ( GetValue ( ver ; 1 ) ) ;	minor = GetAsNumber ( GetValue ( ver ; 2 ) ) ;	patch = GetAsNumber ( GetValue ( ver ; 3 ) )] ;	// evaluate version	Case (		major = 0 ;		&quot;initial development&quot; ;				major = 1 ;		&quot;first public release&quot;	))</StepText>
						<Text>    When evaluating the version, MUST NOT convert the entire text to a number. Each decimal separated section must be evaluated individually, and in order. Here is a possible method of doing so:Let ( [	ver = &quot;1.2.21&quot; ;	// extract pre-release version string	ver = Substitute ( ver ; &quot;-&quot; ; ¶ ) ;	preRelease = GetValue ( ver ; 2 ) ;	// extract normal version string	ver = GetValue ( ver ; 1 ) ;	ver = Substitute ( ver ; &quot;.&quot; ; ¶ ) ;	major = GetAsNumber ( GetValue ( ver ; 1 ) ) ;	minor = GetAsNumber ( GetValue ( ver ; 2 ) ) ;	patch = GetAsNumber ( GetValue ( ver ; 3 ) )] ;	// evaluate version	Case (		major = 0 ;		&quot;initial development&quot; ;				major = 1 ;		&quot;first public release&quot;	))</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Summarize the changes of each version in a single comment step below.</StepText>
						<Text>    Summarize the changes of each version in a single comment step below.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ==============================================================================</StepText>
						<Text> ==============================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># CHANGELOG</StepText>
						<Text> CHANGELOG</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ==============================================================================</StepText>
						<Text> ==============================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>## 1.0.0 #- initial release</StepText>
						<Text># 1.0.0 #- initial release</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="179" name="-">
				<StepList/>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="39" name="Create test log entries">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Logger: Create Entry ( logData )”; Parameter: LogData ( LogLevel5Trace ; &quot;test message&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel5Trace ; "test message" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel5Trace</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="2" name="Logger: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Logger: Create Entry ( logData )”; Parameter: LogData ( LogLevel4Debug ; &quot;test message&quot; )&amp; # ( &quot;errorType&quot; ; &quot;Plugin: BaseElements&quot; )&amp; # ( &quot;errorCode&quot; ; 123456 )&amp; # ( &quot;errorDescription&quot; ; &quot;I/O error returned by file system&quot;  )&amp; # ( &quot;errorInfo&quot; ; &quot;this is a made-up error code/description&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel4Debug ; "test message" )& # ( "errorType" ; "Plugin: BaseElements" )& # ( "errorCode" ; 123456 )& # ( "errorDescription" ; "I/O error returned by file system"  )& # ( "errorInfo" ; "this is a made-up error code/description" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel4Debug</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorType&quot; ; &quot;Plugin: BaseElements&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorCode&quot; ; 123456 )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorDescription&quot; ; &quot;I/O error returned by file system&quot;  )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorInfo&quot; ; &quot;this is a made-up error code/description&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="2" name="Logger: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Logger: Create Entry ( logData )”; Parameter: LogData ( LogLevel3Info ; &quot;test message&quot; )&amp; # ( &quot;errorType&quot; ; &quot;Plugin: ScriptMaster&quot; )&amp; # ( &quot;errorCode&quot; ; 1 )&amp; # ( &quot;errorDescription&quot; ; &quot;java.lang.object is invalid&quot; )&amp; # ( &quot;errorInfo&quot; ; &quot;this is a made-up error code/description&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel3Info ; "test message" )& # ( "errorType" ; "Plugin: ScriptMaster" )& # ( "errorCode" ; 1 )& # ( "errorDescription" ; "java.lang.object is invalid" )& # ( "errorInfo" ; "this is a made-up error code/description" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel3Info</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorType&quot; ; &quot;Plugin: ScriptMaster&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorCode&quot; ; 1 )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorDescription&quot; ; &quot;java.lang.object is invalid&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorInfo&quot; ; &quot;this is a made-up error code/description&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="2" name="Logger: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Logger: Create Entry ( logData )”; Parameter: LogData ( LogLevel2Warn ; &quot;test message&quot; )&amp; # ( &quot;errorType&quot; ; &quot;App&quot; )&amp; # ( &quot;errorCode&quot; ; 6 )&amp; # ( &quot;errorDescription&quot; ; &quot;Invalid window mode&quot; )&amp; # ( &quot;errorInfo&quot; ; &quot;4th call to Logger module in this script&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel2Warn ; "test message" )& # ( "errorType" ; "App" )& # ( "errorCode" ; 6 )& # ( "errorDescription" ; "Invalid window mode" )& # ( "errorInfo" ; "4th call to Logger module in this script" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel2Warn</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorType&quot; ; &quot;App&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorCode&quot; ; 6 )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorDescription&quot; ; &quot;Invalid window mode&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorInfo&quot; ; &quot;4th call to Logger module in this script&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="2" name="Logger: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Logger: Create Entry ( logData )”; Parameter: LogData ( LogLevel1Error ; &quot;test message&quot; )&amp; # ( &quot;errorType&quot; ; &quot;Fmp&quot; )&amp; # ( &quot;errorCode&quot; ; 6 )&amp; # ( &quot;errorDescription&quot; ; &quot;Record access is denied&quot; )&amp; # ( &quot;errorInfo&quot; ; &quot;5th call to Logger module in this script&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel1Error ; "test message" )& # ( "errorType" ; "Fmp" )& # ( "errorCode" ; 6 )& # ( "errorDescription" ; "Record access is denied" )& # ( "errorInfo" ; "5th call to Logger module in this script" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel1Error</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorType&quot; ; &quot;Fmp&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorCode&quot; ; 6 )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorDescription&quot; ; &quot;Record access is denied&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorInfo&quot; ; &quot;5th call to Logger module in this script&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="2" name="Logger: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="True" runFullAccess="False" id="175" name="Re-Login">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="85" name="Allow User Abort">
						<StepText>Allow User Abort [ Off ]</StepText>
						<Set state="False"/>
					</Step>
					<Step enable="True" id="138" name="Re-Login">
						<StepText>Re-Login [  ][ Perform with dialog (NOT COMPATIBLE) ]</StepText>
						<NoInteract state="False"/>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="198" name="Hide Window">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="29" name="Show/Hide Toolbars">
						<StepText>Show/Hide Toolbars[ Hide ]</StepText>
						<Lock state="False"/>
						<ShowHide value="Hide"/>
					</Step>
					<Step enable="True" id="97" name="Set Zoom Level">
						<StepText>Set Zoom Level [ 100%; Camera: Back; Resolution: Full ]</StepText>
						<Lock state="False"/>
						<Zoom value="100"/>
					</Step>
					<Step enable="True" id="119" name="Move/Resize Window">
						<StepText>Move/Resize Window [ Current Window; Top: 0; Left: 0 ]</StepText>
						<LimitToWindowsOfCurrentFile state="True"/>
						<Window value="Current"/>
						<DistanceFromTop>
							<Calculation><![CDATA[0]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">0</Chunk>
							</DisplayCalculation>
						</DistanceFromTop>
						<DistanceFromLeft>
							<Calculation><![CDATA[0]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">0</Chunk>
							</DisplayCalculation>
						</DistanceFromLeft>
					</Step>
					<Step enable="True" id="31" name="Adjust Window">
						<StepText>Adjust Window[ Resize to Fit ]</StepText>
						<WindowState value="ResizeToFit"/>
					</Step>
					<Step enable="True" id="31" name="Adjust Window">
						<StepText>Adjust Window[ Hide ]</StepText>
						<WindowState value="Hide"/>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="115" name="Startup OnFirstWindowOpen">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="68" name="If">
						<StepText>If [ Left ( Get ( ApplicationVersion ) ; 3 ) = &quot;Pro&quot;orLeft ( Get ( ApplicationVersion ) ; 7 ) = &quot;Runtime&quot;orGet ( ScriptParameter ) = 3	 // iOS ]</StepText>
						<Calculation><![CDATA[Left ( Get ( ApplicationVersion ) ; 3 ) = "Pro"orLeft ( Get ( ApplicationVersion ) ; 7 ) = "Runtime"orGet ( ScriptParameter ) = 3	 // iOS]]></Calculation>
						<DisplayCalculation>
							<Chunk type="FunctionRef">Left</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="FunctionRef">Get</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="FunctionRef">ApplicationVersion</Chunk>
							<Chunk type="NoRef"> ) ; 3 ) = &quot;Pro&quot;</Chunk>
							<Chunk type="FunctionRef">or</Chunk>
							<Chunk type="NoRef"></Chunk>
							<Chunk type="FunctionRef">Left</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="FunctionRef">Get</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="FunctionRef">ApplicationVersion</Chunk>
							<Chunk type="NoRef"> ) ; 7 ) = &quot;Runtime&quot;</Chunk>
							<Chunk type="FunctionRef">or</Chunk>
							<Chunk type="NoRef"></Chunk>
							<Chunk type="FunctionRef">Get</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="FunctionRef">ScriptParameter</Chunk>
							<Chunk type="NoRef"> ) = 3	 </Chunk>
							<Chunk type="FunctionRef">// iOS</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="29" name="Show/Hide Toolbars">
						<StepText>Show/Hide Toolbars[ Hide ]</StepText>
						<Lock state="False"/>
						<ShowHide value="Hide"/>
					</Step>
					<Step enable="True" id="119" name="Move/Resize Window">
						<StepText>Move/Resize Window [ Current Window; Top: 0; Left: 0 ]</StepText>
						<LimitToWindowsOfCurrentFile state="True"/>
						<Window value="Current"/>
						<DistanceFromTop>
							<Calculation><![CDATA[0]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">0</Chunk>
							</DisplayCalculation>
						</DistanceFromTop>
						<DistanceFromLeft>
							<Calculation><![CDATA[0]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">0</Chunk>
							</DisplayCalculation>
						</DistanceFromLeft>
					</Step>
					<Step enable="True" id="31" name="Adjust Window">
						<StepText>Adjust Window[ Resize to Fit ]</StepText>
						<WindowState value="ResizeToFit"/>
					</Step>
					<Step enable="True" id="70" name="End If">
						<StepText>End If</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="223" name="Shutdown OnLastWindowClose">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="68" name="If">
						<StepText>If [ // not hostedIsEmpty ( Get ( HostIPAddress ) ) ]</StepText>
						<Calculation><![CDATA[// not hostedIsEmpty ( Get ( HostIPAddress ) )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="FunctionRef">// not hosted</Chunk>
							<Chunk type="NoRef"></Chunk>
							<Chunk type="FunctionRef">IsEmpty</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="FunctionRef">Get</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="FunctionRef">HostIPAddress</Chunk>
							<Chunk type="NoRef"> ) )</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># adjust window so it&apos;s size/location is how it will be after the Startup OnFirstWindowOpen script runs</StepText>
						<Text> adjust window so it&apos;s size/location is how it will be after the Startup OnFirstWindowOpen script runs</Text>
					</Step>
					<Step enable="True" id="79" name="Freeze Window">
						<StepText>Freeze Window</StepText>
					</Step>
					<Step enable="True" id="6" name="Go to Layout">
						<StepText>Go to Layout [ “Log: Blank” (Log) ]</StepText>
						<LayoutDestination value="SelectedLayout"/>
						<Layout id="10" name="Log: Blank"/>
					</Step>
					<Step enable="True" id="29" name="Show/Hide Toolbars">
						<StepText>Show/Hide Toolbars[ Hide ]</StepText>
						<Lock state="False"/>
						<ShowHide value="Hide"/>
					</Step>
					<Step enable="True" id="119" name="Move/Resize Window">
						<StepText>Move/Resize Window [ Current Window; Top: 0; Left: 0 ]</StepText>
						<LimitToWindowsOfCurrentFile state="True"/>
						<Window value="Current"/>
						<DistanceFromTop>
							<Calculation><![CDATA[0]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">0</Chunk>
							</DisplayCalculation>
						</DistanceFromTop>
						<DistanceFromLeft>
							<Calculation><![CDATA[0]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">0</Chunk>
							</DisplayCalculation>
						</DistanceFromLeft>
					</Step>
					<Step enable="True" id="31" name="Adjust Window">
						<StepText>Adjust Window[ Resize to Fit ]</StepText>
						<WindowState value="ResizeToFit"/>
					</Step>
					<Step enable="True" id="70" name="End If">
						<StepText>End If</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
		</Group>
		<Group groupCollapsed="True" includeInMenu="False" id="203" name="Speed Tests">
			<Script includeInMenu="False" runFullAccess="False" id="208" name="Speed Test: Template">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># PURPOSE:</StepText>
						<Text> PURPOSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Provide a simple/generic framework for performing speed tests and comparing the results.</StepText>
						<Text>    Provide a simple/generic framework for performing speed tests and comparing the results.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># REVISIONS:</StepText>
						<Text> REVISIONS:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    2014-FEB-03	 Daniel Smith	- Created</StepText>
						<Text>    2014-FEB-03	 Daniel Smith	- Created</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># set data used in tests</StepText>
						<Text> set data used in tests</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $count; Value:100 ]</StepText>
						<Value>
							<Calculation><![CDATA[100]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">100</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$count</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $data ]</StepText>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$data</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># TODO: specify test name</StepText>
						<Text> TODO: specify test name</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $testName ]</StepText>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$testName</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#=========================================================================</StepText>
						<Text>=========================================================================</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $testNumber; Value:$testNumber + 1 ]</StepText>
						<Value>
							<Calculation><![CDATA[$testNumber + 1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testNumber + 1</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$testNumber</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $start; Value:UTCMiliseconds ]</StepText>
						<Value>
							<Calculation><![CDATA[UTCMiliseconds]]></Calculation>
							<DisplayCalculation>
								<Chunk type="CustomFunctionRef">UTCMiliseconds</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$start</Name>
					</Step>
					<Step enable="True" id="71" name="Loop">
						<StepText>Loop</StepText>
					</Step>
					<Step enable="True" id="72" name="Exit Loop If">
						<StepText>Exit Loop If [ // For $i from 1 to $countLet ( $i = $i + 1 ; If ( $i &gt; $count ; Let ( $i = &quot;&quot; ; True ) ) ) ]</StepText>
						<Calculation><![CDATA[// For $i from 1 to $countLet ( $i = $i + 1 ; If ( $i > $count ; Let ( $i = "" ; True ) ) )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="FunctionRef">// For $i from 1 to $count</Chunk>
							<Chunk type="FunctionRef">Let</Chunk>
							<Chunk type="NoRef"> ( $i = $i + 1 ; </Chunk>
							<Chunk type="FunctionRef">If</Chunk>
							<Chunk type="NoRef"> ( $i &gt; $count ; </Chunk>
							<Chunk type="FunctionRef">Let</Chunk>
							<Chunk type="NoRef"> ( $i = &quot;&quot; ; </Chunk>
							<Chunk type="FunctionRef">True</Chunk>
							<Chunk type="NoRef"> ) ) )</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#========== START OF CODE UNDER TEST =======================</StepText>
						<Text>========== START OF CODE UNDER TEST =======================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># TODO: add code to test</StepText>
						<Text> TODO: add code to test</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#========== END OF CODE UNDER TEST =========================</StepText>
						<Text>========== END OF CODE UNDER TEST =========================</Text>
					</Step>
					<Step enable="True" id="73" name="End Loop">
						<StepText>End Loop</StepText>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $stop; Value:UTCMiliseconds ]</StepText>
						<Value>
							<Calculation><![CDATA[UTCMiliseconds]]></Calculation>
							<DisplayCalculation>
								<Chunk type="CustomFunctionRef">UTCMiliseconds</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$stop</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $runtime; Value:$stop - $start ]</StepText>
						<Value>
							<Calculation><![CDATA[$stop - $start]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$stop - $start</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$runtime</Name>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel3Info ;	$testName	&amp; ¶	&amp; $count	&amp; &quot;, &quot;	&amp; $runtime)&amp; # ( &quot;testName&quot; ; $testName )&amp; # ( &quot;count&quot; ; $count )&amp; # ( &quot;runtime&quot; ; $runtime ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel3Info ;	$testName	& ¶	& $count	& ", "	& $runtime)& # ( "testName" ; $testName )& # ( "count" ; $count )& # ( "runtime" ; $runtime )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel3Info</Chunk>
							<Chunk type="NoRef"> ;	$testName	&amp; ¶	&amp; $count	&amp; &quot;, &quot;	&amp; $runtime)&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;testName&quot; ; $testName )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;count&quot; ; $count )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;runtime&quot; ; $runtime )</Chunk>
						</DisplayCalculation>
						<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $summary.runtime[$testNumber]; Value:$runtime ]</StepText>
						<Value>
							<Calculation><![CDATA[$runtime]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$runtime</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[$testNumber]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testNumber</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$summary.runtime</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $summary.testName[$testNumber]; Value:$testName ]</StepText>
						<Value>
							<Calculation><![CDATA[$testName]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testName</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[$testNumber]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testNumber</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$summary.testName</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#=========================================================================</StepText>
						<Text>=========================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># TODO: specify test name</StepText>
						<Text> TODO: specify test name</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $testName ]</StepText>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$testName</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#=========================================================================</StepText>
						<Text>=========================================================================</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $testNumber; Value:$testNumber + 1 ]</StepText>
						<Value>
							<Calculation><![CDATA[$testNumber + 1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testNumber + 1</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$testNumber</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $start; Value:UTCMiliseconds ]</StepText>
						<Value>
							<Calculation><![CDATA[UTCMiliseconds]]></Calculation>
							<DisplayCalculation>
								<Chunk type="CustomFunctionRef">UTCMiliseconds</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$start</Name>
					</Step>
					<Step enable="True" id="71" name="Loop">
						<StepText>Loop</StepText>
					</Step>
					<Step enable="True" id="72" name="Exit Loop If">
						<StepText>Exit Loop If [ // For $i from 1 to $countLet ( $i = $i + 1 ; If ( $i &gt; $count ; Let ( $i = &quot;&quot; ; True ) ) ) ]</StepText>
						<Calculation><![CDATA[// For $i from 1 to $countLet ( $i = $i + 1 ; If ( $i > $count ; Let ( $i = "" ; True ) ) )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="FunctionRef">// For $i from 1 to $count</Chunk>
							<Chunk type="FunctionRef">Let</Chunk>
							<Chunk type="NoRef"> ( $i = $i + 1 ; </Chunk>
							<Chunk type="FunctionRef">If</Chunk>
							<Chunk type="NoRef"> ( $i &gt; $count ; </Chunk>
							<Chunk type="FunctionRef">Let</Chunk>
							<Chunk type="NoRef"> ( $i = &quot;&quot; ; </Chunk>
							<Chunk type="FunctionRef">True</Chunk>
							<Chunk type="NoRef"> ) ) )</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#========== START OF CODE UNDER TEST =======================</StepText>
						<Text>========== START OF CODE UNDER TEST =======================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># TODO: add code to test</StepText>
						<Text> TODO: add code to test</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#========== END OF CODE UNDER TEST =========================</StepText>
						<Text>========== END OF CODE UNDER TEST =========================</Text>
					</Step>
					<Step enable="True" id="73" name="End Loop">
						<StepText>End Loop</StepText>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $stop; Value:UTCMiliseconds ]</StepText>
						<Value>
							<Calculation><![CDATA[UTCMiliseconds]]></Calculation>
							<DisplayCalculation>
								<Chunk type="CustomFunctionRef">UTCMiliseconds</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$stop</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $runtime; Value:$stop - $start ]</StepText>
						<Value>
							<Calculation><![CDATA[$stop - $start]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$stop - $start</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$runtime</Name>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel3Info ;	$testName	&amp; ¶	&amp; $count	&amp; &quot;, &quot;	&amp; $runtime)&amp; # ( &quot;testName&quot; ; $testName )&amp; # ( &quot;count&quot; ; $count )&amp; # ( &quot;runtime&quot; ; $runtime ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel3Info ;	$testName	& ¶	& $count	& ", "	& $runtime)& # ( "testName" ; $testName )& # ( "count" ; $count )& # ( "runtime" ; $runtime )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel3Info</Chunk>
							<Chunk type="NoRef"> ;	$testName	&amp; ¶	&amp; $count	&amp; &quot;, &quot;	&amp; $runtime)&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;testName&quot; ; $testName )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;count&quot; ; $count )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;runtime&quot; ; $runtime )</Chunk>
						</DisplayCalculation>
						<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $summary.runtime[$testNumber]; Value:$runtime ]</StepText>
						<Value>
							<Calculation><![CDATA[$runtime]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$runtime</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[$testNumber]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testNumber</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$summary.runtime</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $summary.testName[$testNumber]; Value:$testName ]</StepText>
						<Value>
							<Calculation><![CDATA[$testName]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testName</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[$testNumber]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testNumber</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$summary.testName</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#=========================================================================</StepText>
						<Text>=========================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Show result</StepText>
						<Text> Show result</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#=========================================================================</StepText>
						<Text>=========================================================================</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $message; Value:&quot;test name, runtime, % difference from prior test&quot; ]</StepText>
						<Value>
							<Calculation><![CDATA["test name, runtime, % difference from prior test"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;test name, runtime, % difference from prior test&quot;</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$message</Name>
					</Step>
					<Step enable="True" id="71" name="Loop">
						<StepText>Loop</StepText>
					</Step>
					<Step enable="True" id="72" name="Exit Loop If">
						<StepText>Exit Loop If [ // For $i from 1 to $testNumberLet ( $i = $i + 1 ; If ( $i &gt; $testNumber ; Let ( $i = &quot;&quot; ; True ) ) ) ]</StepText>
						<Calculation><![CDATA[// For $i from 1 to $testNumberLet ( $i = $i + 1 ; If ( $i > $testNumber ; Let ( $i = "" ; True ) ) )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="FunctionRef">// For $i from 1 to $testNumber</Chunk>
							<Chunk type="FunctionRef">Let</Chunk>
							<Chunk type="NoRef"> ( $i = $i + 1 ; </Chunk>
							<Chunk type="FunctionRef">If</Chunk>
							<Chunk type="NoRef"> ( $i &gt; $testNumber ; </Chunk>
							<Chunk type="FunctionRef">Let</Chunk>
							<Chunk type="NoRef"> ( $i = &quot;&quot; ; </Chunk>
							<Chunk type="FunctionRef">True</Chunk>
							<Chunk type="NoRef"> ) ) )</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $message; Value:$message&amp; ¶&amp; $summary.testName[$i]&amp; &quot;, &quot;&amp; $summary.runtime[$i]&amp; If ( $i &gt; 1 ;	&quot;, &quot;	&amp; If ( $summary.runtime[$i] &gt; $summary.runtime[$i-1] ; &quot;+&quot; )	&amp; Round ( ( $summary.runtime[$i] / $summary.runtime[$i-1] ) * 100 ; 2 )	&amp; &quot;%&quot;) ]</StepText>
						<Value>
							<Calculation><![CDATA[$message& ¶& $summary.testName[$i]& ", "& $summary.runtime[$i]& If ( $i > 1 ;	", "	& If ( $summary.runtime[$i] > $summary.runtime[$i-1] ; "+" )	& Round ( ( $summary.runtime[$i] / $summary.runtime[$i-1] ) * 100 ; 2 )	& "%")]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$message&amp; ¶&amp; $summary.testName[$i]&amp; &quot;, &quot;&amp; $summary.runtime[$i]&amp; </Chunk>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( $i &gt; 1 ;	&quot;, &quot;	&amp; </Chunk>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( $summary.runtime[$i] &gt; $summary.runtime[$i-1] ; &quot;+&quot; )	&amp; </Chunk>
								<Chunk type="FunctionRef">Round</Chunk>
								<Chunk type="NoRef"> ( ( $summary.runtime[$i] / $summary.runtime[$i-1] ) * 100 ; 2 )	&amp; &quot;%&quot;)</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$message</Name>
					</Step>
					<Step enable="True" id="73" name="End Loop">
						<StepText>End Loop</StepText>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel3Info ; $message ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel3Info ; $message )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel3Info</Chunk>
							<Chunk type="NoRef"> ; $message )</Chunk>
						</DisplayCalculation>
						<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="87" name="Show Custom Dialog">
						<StepText>Show Custom Dialog [ Title: &quot;Result with count=&quot; &amp; $count; Message: $message; Default Button: “OK”, Commit: “Yes” ]</StepText>
						<Title>
							<Calculation><![CDATA["Result with count=" & $count]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;Result with count=&quot; &amp; $count</Chunk>
							</DisplayCalculation>
						</Title>
						<Message>
							<Calculation><![CDATA[$message]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$message</Chunk>
							</DisplayCalculation>
						</Message>
						<Buttons>
							<Button CommitState="True">
								<Calculation><![CDATA["OK"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;OK&quot;</Chunk>
								</DisplayCalculation>
							</Button>
							<Button CommitState="False"/>
							<Button CommitState="False"/>
						</Buttons>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#=========================================================================</StepText>
						<Text>=========================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="True" runFullAccess="False" id="222" name="Speed Test: Writer FM vs BE">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># PURPOSE:</StepText>
						<Text> PURPOSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Compare two Writter modules.</StepText>
						<Text>    Compare two Writter modules.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># REVISIONS:</StepText>
						<Text> REVISIONS:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    2014-FEB-03	 Daniel Smith	- Created</StepText>
						<Text>    2014-FEB-03	 Daniel Smith	- Created</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># set data used in tests</StepText>
						<Text> set data used in tests</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $count; Value:10 ]</StepText>
						<Value>
							<Calculation><![CDATA[10]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">10</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$count</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $testName; Value:&quot;Log Writer: FM&quot; ]</StepText>
						<Value>
							<Calculation><![CDATA["Log Writer: FM"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;Log Writer: FM&quot;</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$testName</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#=========================================================================</StepText>
						<Text>=========================================================================</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $testNumber; Value:$testNumber + 1 ]</StepText>
						<Value>
							<Calculation><![CDATA[$testNumber + 1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testNumber + 1</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$testNumber</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $start; Value:UTCMiliseconds ]</StepText>
						<Value>
							<Calculation><![CDATA[UTCMiliseconds]]></Calculation>
							<DisplayCalculation>
								<Chunk type="CustomFunctionRef">UTCMiliseconds</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$start</Name>
					</Step>
					<Step enable="True" id="71" name="Loop">
						<StepText>Loop</StepText>
					</Step>
					<Step enable="True" id="72" name="Exit Loop If">
						<StepText>Exit Loop If [ // For $i from 1 to $countLet ( $i = $i + 1 ; If ( $i &gt; $count ; Let ( $i = &quot;&quot; ; True ) ) ) ]</StepText>
						<Calculation><![CDATA[// For $i from 1 to $countLet ( $i = $i + 1 ; If ( $i > $count ; Let ( $i = "" ; True ) ) )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="FunctionRef">// For $i from 1 to $count</Chunk>
							<Chunk type="FunctionRef">Let</Chunk>
							<Chunk type="NoRef"> ( $i = $i + 1 ; </Chunk>
							<Chunk type="FunctionRef">If</Chunk>
							<Chunk type="NoRef"> ( $i &gt; $count ; </Chunk>
							<Chunk type="FunctionRef">Let</Chunk>
							<Chunk type="NoRef"> ( $i = &quot;&quot; ; </Chunk>
							<Chunk type="FunctionRef">True</Chunk>
							<Chunk type="NoRef"> ) ) )</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#========== START OF CODE UNDER TEST =======================</StepText>
						<Text>========== START OF CODE UNDER TEST =======================</Text>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel5Trace ; &quot;test message&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel5Trace ; "test message" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel5Trace</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel4Debug ; &quot;test message&quot; )&amp; # ( &quot;errorType&quot; ; &quot;Plugin: BaseElements&quot; )&amp; # ( &quot;errorCode&quot; ; 123456 )&amp; # ( &quot;errorDescription&quot; ; &quot;I/O error returned by file system&quot;  )&amp; # ( &quot;errorInfo&quot; ; &quot;this is a made-up error code/description&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel4Debug ; "test message" )& # ( "errorType" ; "Plugin: BaseElements" )& # ( "errorCode" ; 123456 )& # ( "errorDescription" ; "I/O error returned by file system"  )& # ( "errorInfo" ; "this is a made-up error code/description" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel4Debug</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorType&quot; ; &quot;Plugin: BaseElements&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorCode&quot; ; 123456 )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorDescription&quot; ; &quot;I/O error returned by file system&quot;  )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorInfo&quot; ; &quot;this is a made-up error code/description&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel3Info ; &quot;test message&quot; )&amp; # ( &quot;errorType&quot; ; &quot;Plugin: ScriptMaster&quot; )&amp; # ( &quot;errorCode&quot; ; 1 )&amp; # ( &quot;errorDescription&quot; ; &quot;java.lang.object is invalid&quot; )&amp; # ( &quot;errorInfo&quot; ; &quot;this is a made-up error code/description&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel3Info ; "test message" )& # ( "errorType" ; "Plugin: ScriptMaster" )& # ( "errorCode" ; 1 )& # ( "errorDescription" ; "java.lang.object is invalid" )& # ( "errorInfo" ; "this is a made-up error code/description" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel3Info</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorType&quot; ; &quot;Plugin: ScriptMaster&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorCode&quot; ; 1 )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorDescription&quot; ; &quot;java.lang.object is invalid&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorInfo&quot; ; &quot;this is a made-up error code/description&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel2Warn ; &quot;test message&quot; )&amp; # ( &quot;errorType&quot; ; &quot;App&quot; )&amp; # ( &quot;errorCode&quot; ; 6 )&amp; # ( &quot;errorDescription&quot; ; &quot;Invalid window mode&quot; )&amp; # ( &quot;errorInfo&quot; ; &quot;4th call to Logger module in this script&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel2Warn ; "test message" )& # ( "errorType" ; "App" )& # ( "errorCode" ; 6 )& # ( "errorDescription" ; "Invalid window mode" )& # ( "errorInfo" ; "4th call to Logger module in this script" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel2Warn</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorType&quot; ; &quot;App&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorCode&quot; ; 6 )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorDescription&quot; ; &quot;Invalid window mode&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorInfo&quot; ; &quot;4th call to Logger module in this script&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel1Error ; &quot;test message&quot; )&amp; # ( &quot;errorType&quot; ; &quot;Fmp&quot; )&amp; # ( &quot;errorCode&quot; ; 6 )&amp; # ( &quot;errorDescription&quot; ; &quot;Record access is denied&quot; )&amp; # ( &quot;errorInfo&quot; ; &quot;5th call to Logger module in this script&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel1Error ; "test message" )& # ( "errorType" ; "Fmp" )& # ( "errorCode" ; 6 )& # ( "errorDescription" ; "Record access is denied" )& # ( "errorInfo" ; "5th call to Logger module in this script" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel1Error</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorType&quot; ; &quot;Fmp&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorCode&quot; ; 6 )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorDescription&quot; ; &quot;Record access is denied&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorInfo&quot; ; &quot;5th call to Logger module in this script&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#========== END OF CODE UNDER TEST =========================</StepText>
						<Text>========== END OF CODE UNDER TEST =========================</Text>
					</Step>
					<Step enable="True" id="73" name="End Loop">
						<StepText>End Loop</StepText>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $stop; Value:UTCMiliseconds ]</StepText>
						<Value>
							<Calculation><![CDATA[UTCMiliseconds]]></Calculation>
							<DisplayCalculation>
								<Chunk type="CustomFunctionRef">UTCMiliseconds</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$stop</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $runtime; Value:$stop - $start ]</StepText>
						<Value>
							<Calculation><![CDATA[$stop - $start]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$stop - $start</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$runtime</Name>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel3Info ;	$testName	&amp; ¶	&amp; $count	&amp; &quot;, &quot;	&amp; $runtime)&amp; # ( &quot;testName&quot; ; $testName )&amp; # ( &quot;count&quot; ; $count )&amp; # ( &quot;runtime&quot; ; $runtime ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel3Info ;	$testName	& ¶	& $count	& ", "	& $runtime)& # ( "testName" ; $testName )& # ( "count" ; $count )& # ( "runtime" ; $runtime )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel3Info</Chunk>
							<Chunk type="NoRef"> ;	$testName	&amp; ¶	&amp; $count	&amp; &quot;, &quot;	&amp; $runtime)&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;testName&quot; ; $testName )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;count&quot; ; $count )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;runtime&quot; ; $runtime )</Chunk>
						</DisplayCalculation>
						<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $summary.runtime[$testNumber]; Value:$runtime ]</StepText>
						<Value>
							<Calculation><![CDATA[$runtime]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$runtime</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[$testNumber]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testNumber</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$summary.runtime</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $summary.testName[$testNumber]; Value:$testName ]</StepText>
						<Value>
							<Calculation><![CDATA[$testName]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testName</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[$testNumber]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testNumber</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$summary.testName</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#=========================================================================</StepText>
						<Text>=========================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $testName; Value:&quot;Log Writer: BaseElements&quot; ]</StepText>
						<Value>
							<Calculation><![CDATA["Log Writer: BaseElements"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;Log Writer: BaseElements&quot;</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$testName</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#=========================================================================</StepText>
						<Text>=========================================================================</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $testNumber; Value:$testNumber + 1 ]</StepText>
						<Value>
							<Calculation><![CDATA[$testNumber + 1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testNumber + 1</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$testNumber</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $start; Value:UTCMiliseconds ]</StepText>
						<Value>
							<Calculation><![CDATA[UTCMiliseconds]]></Calculation>
							<DisplayCalculation>
								<Chunk type="CustomFunctionRef">UTCMiliseconds</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$start</Name>
					</Step>
					<Step enable="True" id="71" name="Loop">
						<StepText>Loop</StepText>
					</Step>
					<Step enable="True" id="72" name="Exit Loop If">
						<StepText>Exit Loop If [ // For $i from 1 to $countLet ( $i = $i + 1 ; If ( $i &gt; $count ; Let ( $i = &quot;&quot; ; True ) ) ) ]</StepText>
						<Calculation><![CDATA[// For $i from 1 to $countLet ( $i = $i + 1 ; If ( $i > $count ; Let ( $i = "" ; True ) ) )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="FunctionRef">// For $i from 1 to $count</Chunk>
							<Chunk type="FunctionRef">Let</Chunk>
							<Chunk type="NoRef"> ( $i = $i + 1 ; </Chunk>
							<Chunk type="FunctionRef">If</Chunk>
							<Chunk type="NoRef"> ( $i &gt; $count ; </Chunk>
							<Chunk type="FunctionRef">Let</Chunk>
							<Chunk type="NoRef"> ( $i = &quot;&quot; ; </Chunk>
							<Chunk type="FunctionRef">True</Chunk>
							<Chunk type="NoRef"> ) ) )</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#========== START OF CODE UNDER TEST =======================</StepText>
						<Text>========== START OF CODE UNDER TEST =======================</Text>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM BaseElements: Create Entry ( logData )”; Parameter: LogData ( LogLevel5Trace ; &quot;test message&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel5Trace ; "test message" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel5Trace</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="189" name="Log Writer: FM BaseElements: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM BaseElements: Create Entry ( logData )”; Parameter: LogData ( LogLevel4Debug ; &quot;test message&quot; )&amp; # ( &quot;errorType&quot; ; &quot;Plugin: BaseElements&quot; )&amp; # ( &quot;errorCode&quot; ; 123456 )&amp; # ( &quot;errorDescription&quot; ; &quot;I/O error returned by file system&quot;  )&amp; # ( &quot;errorInfo&quot; ; &quot;this is a made-up error code/description&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel4Debug ; "test message" )& # ( "errorType" ; "Plugin: BaseElements" )& # ( "errorCode" ; 123456 )& # ( "errorDescription" ; "I/O error returned by file system"  )& # ( "errorInfo" ; "this is a made-up error code/description" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel4Debug</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorType&quot; ; &quot;Plugin: BaseElements&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorCode&quot; ; 123456 )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorDescription&quot; ; &quot;I/O error returned by file system&quot;  )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorInfo&quot; ; &quot;this is a made-up error code/description&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="189" name="Log Writer: FM BaseElements: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM BaseElements: Create Entry ( logData )”; Parameter: LogData ( LogLevel3Info ; &quot;test message&quot; )&amp; # ( &quot;errorType&quot; ; &quot;Plugin: ScriptMaster&quot; )&amp; # ( &quot;errorCode&quot; ; 1 )&amp; # ( &quot;errorDescription&quot; ; &quot;java.lang.object is invalid&quot; )&amp; # ( &quot;errorInfo&quot; ; &quot;this is a made-up error code/description&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel3Info ; "test message" )& # ( "errorType" ; "Plugin: ScriptMaster" )& # ( "errorCode" ; 1 )& # ( "errorDescription" ; "java.lang.object is invalid" )& # ( "errorInfo" ; "this is a made-up error code/description" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel3Info</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorType&quot; ; &quot;Plugin: ScriptMaster&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorCode&quot; ; 1 )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorDescription&quot; ; &quot;java.lang.object is invalid&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorInfo&quot; ; &quot;this is a made-up error code/description&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="189" name="Log Writer: FM BaseElements: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM BaseElements: Create Entry ( logData )”; Parameter: LogData ( LogLevel2Warn ; &quot;test message&quot; )&amp; # ( &quot;errorType&quot; ; &quot;App&quot; )&amp; # ( &quot;errorCode&quot; ; 6 )&amp; # ( &quot;errorDescription&quot; ; &quot;Invalid window mode&quot; )&amp; # ( &quot;errorInfo&quot; ; &quot;4th call to Logger module in this script&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel2Warn ; "test message" )& # ( "errorType" ; "App" )& # ( "errorCode" ; 6 )& # ( "errorDescription" ; "Invalid window mode" )& # ( "errorInfo" ; "4th call to Logger module in this script" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel2Warn</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorType&quot; ; &quot;App&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorCode&quot; ; 6 )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorDescription&quot; ; &quot;Invalid window mode&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorInfo&quot; ; &quot;4th call to Logger module in this script&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="189" name="Log Writer: FM BaseElements: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM BaseElements: Create Entry ( logData )”; Parameter: LogData ( LogLevel1Error ; &quot;test message&quot; )&amp; # ( &quot;errorType&quot; ; &quot;Fmp&quot; )&amp; # ( &quot;errorCode&quot; ; 6 )&amp; # ( &quot;errorDescription&quot; ; &quot;Record access is denied&quot; )&amp; # ( &quot;errorInfo&quot; ; &quot;5th call to Logger module in this script&quot; ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel1Error ; "test message" )& # ( "errorType" ; "Fmp" )& # ( "errorCode" ; 6 )& # ( "errorDescription" ; "Record access is denied" )& # ( "errorInfo" ; "5th call to Logger module in this script" )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel1Error</Chunk>
							<Chunk type="NoRef"> ; &quot;test message&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorType&quot; ; &quot;Fmp&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorCode&quot; ; 6 )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorDescription&quot; ; &quot;Record access is denied&quot; )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;errorInfo&quot; ; &quot;5th call to Logger module in this script&quot; )</Chunk>
						</DisplayCalculation>
						<Script id="189" name="Log Writer: FM BaseElements: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#========== END OF CODE UNDER TEST =========================</StepText>
						<Text>========== END OF CODE UNDER TEST =========================</Text>
					</Step>
					<Step enable="True" id="73" name="End Loop">
						<StepText>End Loop</StepText>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $stop; Value:UTCMiliseconds ]</StepText>
						<Value>
							<Calculation><![CDATA[UTCMiliseconds]]></Calculation>
							<DisplayCalculation>
								<Chunk type="CustomFunctionRef">UTCMiliseconds</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$stop</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $runtime; Value:$stop - $start ]</StepText>
						<Value>
							<Calculation><![CDATA[$stop - $start]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$stop - $start</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$runtime</Name>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel3Info ;	$testName	&amp; ¶	&amp; $count	&amp; &quot;, &quot;	&amp; $runtime)&amp; # ( &quot;testName&quot; ; $testName )&amp; # ( &quot;count&quot; ; $count )&amp; # ( &quot;runtime&quot; ; $runtime ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel3Info ;	$testName	& ¶	& $count	& ", "	& $runtime)& # ( "testName" ; $testName )& # ( "count" ; $count )& # ( "runtime" ; $runtime )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel3Info</Chunk>
							<Chunk type="NoRef"> ;	$testName	&amp; ¶	&amp; $count	&amp; &quot;, &quot;	&amp; $runtime)&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;testName&quot; ; $testName )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;count&quot; ; $count )&amp; </Chunk>
							<Chunk type="CustomFunctionRef">#</Chunk>
							<Chunk type="NoRef"> ( &quot;runtime&quot; ; $runtime )</Chunk>
						</DisplayCalculation>
						<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $summary.runtime[$testNumber]; Value:$runtime ]</StepText>
						<Value>
							<Calculation><![CDATA[$runtime]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$runtime</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[$testNumber]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testNumber</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$summary.runtime</Name>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $summary.testName[$testNumber]; Value:$testName ]</StepText>
						<Value>
							<Calculation><![CDATA[$testName]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testName</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[$testNumber]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$testNumber</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$summary.testName</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#=========================================================================</StepText>
						<Text>=========================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Show result</StepText>
						<Text> Show result</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#=========================================================================</StepText>
						<Text>=========================================================================</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $message; Value:&quot;test name, runtime, % difference from prior test&quot; ]</StepText>
						<Value>
							<Calculation><![CDATA["test name, runtime, % difference from prior test"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;test name, runtime, % difference from prior test&quot;</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$message</Name>
					</Step>
					<Step enable="True" id="71" name="Loop">
						<StepText>Loop</StepText>
					</Step>
					<Step enable="True" id="72" name="Exit Loop If">
						<StepText>Exit Loop If [ // For $i from 1 to $testNumberLet ( $i = $i + 1 ; If ( $i &gt; $testNumber ; Let ( $i = &quot;&quot; ; True ) ) ) ]</StepText>
						<Calculation><![CDATA[// For $i from 1 to $testNumberLet ( $i = $i + 1 ; If ( $i > $testNumber ; Let ( $i = "" ; True ) ) )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="FunctionRef">// For $i from 1 to $testNumber</Chunk>
							<Chunk type="FunctionRef">Let</Chunk>
							<Chunk type="NoRef"> ( $i = $i + 1 ; </Chunk>
							<Chunk type="FunctionRef">If</Chunk>
							<Chunk type="NoRef"> ( $i &gt; $testNumber ; </Chunk>
							<Chunk type="FunctionRef">Let</Chunk>
							<Chunk type="NoRef"> ( $i = &quot;&quot; ; </Chunk>
							<Chunk type="FunctionRef">True</Chunk>
							<Chunk type="NoRef"> ) ) )</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $message; Value:$message&amp; ¶&amp; $summary.testName[$i]&amp; &quot;, &quot;&amp; $summary.runtime[$i]&amp; If ( $i &gt; 1 ;	&quot;, &quot;	&amp; If ( $summary.runtime[$i] &gt; $summary.runtime[$i-1] ; &quot;+&quot; )	&amp; Round ( ( $summary.runtime[$i] / $summary.runtime[$i-1] ) * 100 ; 2 )	&amp; &quot;%&quot;) ]</StepText>
						<Value>
							<Calculation><![CDATA[$message& ¶& $summary.testName[$i]& ", "& $summary.runtime[$i]& If ( $i > 1 ;	", "	& If ( $summary.runtime[$i] > $summary.runtime[$i-1] ; "+" )	& Round ( ( $summary.runtime[$i] / $summary.runtime[$i-1] ) * 100 ; 2 )	& "%")]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$message&amp; ¶&amp; $summary.testName[$i]&amp; &quot;, &quot;&amp; $summary.runtime[$i]&amp; </Chunk>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( $i &gt; 1 ;	&quot;, &quot;	&amp; </Chunk>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( $summary.runtime[$i] &gt; $summary.runtime[$i-1] ; &quot;+&quot; )	&amp; </Chunk>
								<Chunk type="FunctionRef">Round</Chunk>
								<Chunk type="NoRef"> ( ( $summary.runtime[$i] / $summary.runtime[$i-1] ) * 100 ; 2 )	&amp; &quot;%&quot;)</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$message</Name>
					</Step>
					<Step enable="True" id="73" name="End Loop">
						<StepText>End Loop</StepText>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel3Info ; $message ) ]</StepText>
						<Calculation><![CDATA[LogData ( LogLevel3Info ; $message )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="CustomFunctionRef">LogData</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel3Info</Chunk>
							<Chunk type="NoRef"> ; $message )</Chunk>
						</DisplayCalculation>
						<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="87" name="Show Custom Dialog">
						<StepText>Show Custom Dialog [ Title: &quot;Result with count=&quot; &amp; $count; Message: $message; Default Button: “OK”, Commit: “Yes” ]</StepText>
						<Title>
							<Calculation><![CDATA["Result with count=" & $count]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;Result with count=&quot; &amp; $count</Chunk>
							</DisplayCalculation>
						</Title>
						<Message>
							<Calculation><![CDATA[$message]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$message</Chunk>
							</DisplayCalculation>
						</Message>
						<Buttons>
							<Button CommitState="True">
								<Calculation><![CDATA["OK"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;OK&quot;</Chunk>
								</DisplayCalculation>
							</Button>
							<Button CommitState="False"/>
							<Button CommitState="False"/>
						</Buttons>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#=========================================================================</StepText>
						<Text>=========================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
		</Group>
	</Group>
	<Group groupCollapsed="True" includeInMenu="False" id="24" name="Modules">
		<Group groupCollapsed="True" includeInMenu="False" id="26" name="Logger">
			<Script includeInMenu="False" runFullAccess="False" id="171" name="-">
				<StepList/>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="35" name="Logger: READ ME">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>###########################################################################</StepText>
						<Text>##########################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Logger</StepText>
						<Text> Logger</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Created by Daniel Smith, dansmith65@gmail.com</StepText>
						<Text> Created by Daniel Smith, dansmith65@gmail.com</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#	</StepText>
						<Text>	</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Provide an interface for logging.</StepText>
						<Text> Provide an interface for logging.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Rather than calling a logging routine directly, use this &quot;interface&quot; module, which provides these advantages:</StepText>
						<Text> Rather than calling a logging routine directly, use this &quot;interface&quot; module, which provides these advantages:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    - can easily re-route all logging done by the file it&apos;s installed in to different destination</StepText>
						<Text>    - can easily re-route all logging done by the file it&apos;s installed in to different destination</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    - can programatically &quot;filter&quot; log entries before sending them to a log writer</StepText>
						<Text>    - can programatically &quot;filter&quot; log entries before sending them to a log writer</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    - use conditional logic to determine which log writer to use</StepText>
						<Text>    - use conditional logic to determine which log writer to use</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    - provide a standardized/generic script name that can be referenced by other modules</StepText>
						<Text>    - provide a standardized/generic script name that can be referenced by other modules</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>###########################################################################</StepText>
						<Text>##########################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># REQUIRES</StepText>
						<Text> REQUIRES</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - a compatible Log Writer module in any accessable file</StepText>
						<Text>        - a compatible Log Writer module in any accessable file</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># INTEGRATION</StepText>
						<Text> INTEGRATION</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        1. import custom functions:</StepText>
						<Text>        1. import custom functions:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - [optional] Only required if using the sample Filter feature:</StepText>
						<Text>                - [optional] Only required if using the sample Filter feature:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        LogLevel* suite of functions</StepText>
						<Text>                        LogLevel* suite of functions</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        LogNotFiltered</StepText>
						<Text>                        LogNotFiltered</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        2. import module script folder</StepText>
						<Text>        2. import module script folder</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        3. adjust privileges:</StepText>
						<Text>        3. adjust privileges:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                To allow a user to create log entries:</StepText>
						<Text>                To allow a user to create log entries:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        Scripts</StepText>
						<Text>                        Scripts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - run all scripts in the module folder</StepText>
						<Text>                                - run all scripts in the module folder</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        4. modify &quot;Logger: Create Entry ( logData )&quot; script as nesscessary</StepText>
						<Text>        4. modify &quot;Logger: Create Entry ( logData )&quot; script as nesscessary</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                Some items to consider are:</StepText>
						<Text>                Some items to consider are:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        - which file should the log be written to?</StepText>
						<Text>                        - which file should the log be written to?</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        - can a more effiicent writer be used depending on the current platform?</StepText>
						<Text>                        - can a more effiicent writer be used depending on the current platform?</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        - should every log entry be written, or should only logs of a specified severity be written?</StepText>
						<Text>                        - should every log entry be written, or should only logs of a specified severity be written?</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        - should the log entry be sent to multiple log writers?</StepText>
						<Text>                        - should the log entry be sent to multiple log writers?</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - perhaps the highest log levels should generate an email?</StepText>
						<Text>                                - perhaps the highest log levels should generate an email?</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        5. run &quot;Logger: Test Installation&quot; script</StepText>
						<Text>        5. run &quot;Logger: Test Installation&quot; script</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># INSTRUCTIONS FOR USE</StepText>
						<Text> INSTRUCTIONS FOR USE</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - install this module in every file of your solution</StepText>
						<Text>        - install this module in every file of your solution</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - call script: &quot;Logger: Create Entry ( logData )&quot; with the data you want logged in the parameter</StepText>
						<Text>        - call script: &quot;Logger: Create Entry ( logData )&quot; with the data you want logged in the parameter</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - it is highly recommended to generate logData by using the Error* and Log* suite of custom functions</StepText>
						<Text>        - it is highly recommended to generate logData by using the Error* and Log* suite of custom functions</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - after installing the ErrorApp function, review the NOTE section in it&apos;s documentation</StepText>
						<Text>                - after installing the ErrorApp function, review the NOTE section in it&apos;s documentation</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - consider installing a Log Viewer module for viewing log entries</StepText>
						<Text>        - consider installing a Log Viewer module for viewing log entries</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># LICENSE:</StepText>
						<Text> LICENSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        The MIT License (MIT)Copyright (c) 2014 Daniel SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</StepText>
						<Text>        The MIT License (MIT)Copyright (c) 2014 Daniel SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="139" name="Logger: Version 1.0.0-beta3">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># PURPOSE:</StepText>
						<Text> PURPOSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Return the version number of this module.</StepText>
						<Text>    Return the version number of this module.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># RETURNS:</StepText>
						<Text> RETURNS:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    version string portion of the script name</StepText>
						<Text>    version string portion of the script name</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># NOTES:</StepText>
						<Text> NOTES:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    http://filemakerstandards.org/display/bp/Default+scripts</StepText>
						<Text>    http://filemakerstandards.org/display/bp/Default+scripts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    This guideline was heavily influenced by http://semver.org/spec/v2.0.0-rc.1.html</StepText>
						<Text>    This guideline was heavily influenced by http://semver.org/spec/v2.0.0-rc.1.html</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Changelog: Summary is formatted with markdown: http://daringfireball.net/projects/markdown/- use different header &apos;tag&apos; (#&apos;s) depending on the version being incrementedMajor: H1Minor: H2Patch: H3</StepText>
						<Text>    Changelog: Summary is formatted with markdown: http://daringfireball.net/projects/markdown/- use different header &apos;tag&apos; (#&apos;s) depending on the version being incrementedMajor: H1Minor: H2Patch: H3</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $scriptResult; Value:// return script version string portion of script nameLet ( [	~text = Get ( ScriptName ) ;	~firstNumber = Left ( Filter ( ~text  ; &quot;0123456789&quot; ) ; 1 ) ;	~firstNumberPosition = Position ( ~text ; ~firstNumber ; 1 ; 1 )] ;	Right ( ~text ; Length ( ~text ) - ~firstNumberPosition + 1 )) ]</StepText>
						<Value>
							<Calculation><![CDATA[// return script version string portion of script nameLet ( [	~text = Get ( ScriptName ) ;	~firstNumber = Left ( Filter ( ~text  ; "0123456789" ) ; 1 ) ;	~firstNumberPosition = Position ( ~text ; ~firstNumber ; 1 ; 1 )] ;	Right ( ~text ; Length ( ~text ) - ~firstNumberPosition + 1 ))]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// return script version string portion of script name</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~text = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptName</Chunk>
								<Chunk type="NoRef"> ) ;	~firstNumber = </Chunk>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Filter</Chunk>
								<Chunk type="NoRef"> ( ~text  ; &quot;0123456789&quot; ) ; 1 ) ;	~firstNumberPosition = </Chunk>
								<Chunk type="FunctionRef">Position</Chunk>
								<Chunk type="NoRef"> ( ~text ; ~firstNumber ; 1 ; 1 )] ;	</Chunk>
								<Chunk type="FunctionRef">Right</Chunk>
								<Chunk type="NoRef"> ( ~text ; </Chunk>
								<Chunk type="FunctionRef">Length</Chunk>
								<Chunk type="NoRef"> ( ~text ) - ~firstNumberPosition + 1 ))</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$scriptResult</Name>
					</Step>
					<Step enable="True" id="103" name="Exit Script">
						<StepText>Exit Script [ Result: $scriptResult ]</StepText>
						<Calculation><![CDATA[$scriptResult]]></Calculation>
						<DisplayCalculation>
							<Chunk type="NoRef">$scriptResult</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># MAJOR.MINOR.PATCH{-PRERELEASE}{+}</StepText>
						<Text> MAJOR.MINOR.PATCH{-PRERELEASE}{+}</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    MAJOR:    Arbitrarily defined by the developer, but must introduce significant change to either the feature set, or the internal method of processing.</StepText>
						<Text>    MAJOR:    Arbitrarily defined by the developer, but must introduce significant change to either the feature set, or the internal method of processing.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    MINOR:    New features. Should be incremented whenever a new feature is added.</StepText>
						<Text>    MINOR:    New features. Should be incremented whenever a new feature is added.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    PATCH:    Bug fixes. Should not introduce new features (unless the lack of that feature can be considered a bug).</StepText>
						<Text>    PATCH:    Bug fixes. Should not introduce new features (unless the lack of that feature can be considered a bug).</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    {-PRERELEASE}    OPTIONAL    A pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.This value can be compaired as text in FileMaker, and the following will be true:  &quot;alpha&quot; &lt; &quot;beta&quot; and &quot;alpha&quot; &lt; &quot;rc&quot; and &quot;beta&quot; &lt; &quot;rc&quot;.</StepText>
						<Text>    {-PRERELEASE}    OPTIONAL    A pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.This value can be compaired as text in FileMaker, and the following will be true:  &quot;alpha&quot; &lt; &quot;beta&quot; and &quot;alpha&quot; &lt; &quot;rc&quot; and &quot;beta&quot; &lt; &quot;rc&quot;.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    {+}    OPTIONAL    If the file has been modified since the version was last incremented, and the version does not need to be incremented yet (still under development), append the version string with a +.</StepText>
						<Text>    {+}    OPTIONAL    If the file has been modified since the version was last incremented, and the version does not need to be incremented yet (still under development), append the version string with a +.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># These guidelines should be followed:</StepText>
						<Text> These guidelines should be followed:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Use decimal separated text to store the version.</StepText>
						<Text>    Use decimal separated text to store the version.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    When evaluating the version, MUST NOT convert the entire text to a number. Each decimal separated section must be evaluated individually, and in order. Here is a possible method of doing so:Let ( [	ver = &quot;1.2.21&quot; ;	// extract pre-release version string	ver = Substitute ( ver ; &quot;-&quot; ; ¶ ) ;	preRelease = GetValue ( ver ; 2 ) ;	// extract normal version string	ver = GetValue ( ver ; 1 ) ;	ver = Substitute ( ver ; &quot;.&quot; ; ¶ ) ;	major = GetAsNumber ( GetValue ( ver ; 1 ) ) ;	minor = GetAsNumber ( GetValue ( ver ; 2 ) ) ;	patch = GetAsNumber ( GetValue ( ver ; 3 ) )] ;	// evaluate version	Case (		major = 0 ;		&quot;initial development&quot; ;				major = 1 ;		&quot;first public release&quot;	))</StepText>
						<Text>    When evaluating the version, MUST NOT convert the entire text to a number. Each decimal separated section must be evaluated individually, and in order. Here is a possible method of doing so:Let ( [	ver = &quot;1.2.21&quot; ;	// extract pre-release version string	ver = Substitute ( ver ; &quot;-&quot; ; ¶ ) ;	preRelease = GetValue ( ver ; 2 ) ;	// extract normal version string	ver = GetValue ( ver ; 1 ) ;	ver = Substitute ( ver ; &quot;.&quot; ; ¶ ) ;	major = GetAsNumber ( GetValue ( ver ; 1 ) ) ;	minor = GetAsNumber ( GetValue ( ver ; 2 ) ) ;	patch = GetAsNumber ( GetValue ( ver ; 3 ) )] ;	// evaluate version	Case (		major = 0 ;		&quot;initial development&quot; ;				major = 1 ;		&quot;first public release&quot;	))</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Summarize the changes of each version in a single comment step below.</StepText>
						<Text>    Summarize the changes of each version in a single comment step below.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ==============================================================================</StepText>
						<Text> ==============================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># CHANGELOG</StepText>
						<Text> CHANGELOG</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ==============================================================================</StepText>
						<Text> ==============================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>## 1.0.0 #- initial release</StepText>
						<Text># 1.0.0 #- initial release</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="173" name="-">
				<StepList/>
			</Script>
			<Script includeInMenu="True" runFullAccess="False" id="146" name="Logger: Test Installation">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># PURPOSE:</StepText>
						<Text> PURPOSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Check to see if the module is fully installed and working.</StepText>
						<Text>    Check to see if the module is fully installed and working.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># CONTEXT: global</StepText>
						<Text> CONTEXT: global</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># PARAMETERS: none</StepText>
						<Text> PARAMETERS: none</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># RETURNS: none</StepText>
						<Text> RETURNS: none</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># DEPENDENCIES: none</StepText>
						<Text> DEPENDENCIES: none</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># NOTES:</StepText>
						<Text> NOTES:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># REVISIONS:</StepText>
						<Text> REVISIONS:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    2014-FEB-06	 Daniel Smith	- set $logLevelToWriteOffset1.0.0-beta22014-JAN-15	 Daniel Smith	- Created</StepText>
						<Text>    2014-FEB-06	 Daniel Smith	- set $logLevelToWriteOffset1.0.0-beta22014-JAN-15	 Daniel Smith	- Created</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $logData; Value:&quot;$logLevel = 3 ;¶&quot;&amp; &quot;$fileName = &quot; &amp; Quote ( Get ( FileName ) ) &amp; &quot; ;¶&quot;&amp; &quot;$accountName = &quot; &amp; Quote ( Get ( AccountName ) ) &amp; &quot; ;¶&quot;&amp; &quot;$errorType = \&quot;mFM: Logger\&quot; ;¶&quot;&amp; &quot;$errorCode = 0 ;¶&quot;&amp; &quot;$errorDescription = \&quot;no error\&quot; ;¶&quot;&amp; &quot;$errorInfo = \&quot;testing installation of module\&quot; ;¶&quot;&amp; &quot;$scriptName = &quot; &amp; Quote ( Get ( ScriptName ) ) &amp; &quot; ;¶&quot;&amp; &quot;$scriptParameter = Random ;¶&quot; ]</StepText>
						<Value>
							<Calculation><![CDATA["$logLevel = 3 ;¶"& "$fileName = " & Quote ( Get ( FileName ) ) & " ;¶"& "$accountName = " & Quote ( Get ( AccountName ) ) & " ;¶"& "$errorType = \"mFM: Logger\" ;¶"& "$errorCode = 0 ;¶"& "$errorDescription = \"no error\" ;¶"& "$errorInfo = \"testing installation of module\" ;¶"& "$scriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"& "$scriptParameter = Random ;¶"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$logLevel = 3 ;¶&quot;&amp; &quot;$fileName = &quot; &amp; </Chunk>
								<Chunk type="FunctionRef">Quote</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">FileName</Chunk>
								<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$accountName = &quot; &amp; </Chunk>
								<Chunk type="FunctionRef">Quote</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">AccountName</Chunk>
								<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$errorType = \&quot;mFM: Logger\&quot; ;¶&quot;&amp; &quot;$errorCode = 0 ;¶&quot;&amp; &quot;$errorDescription = \&quot;no error\&quot; ;¶&quot;&amp; &quot;$errorInfo = \&quot;testing installation of module\&quot; ;¶&quot;&amp; &quot;$scriptName = &quot; &amp; </Chunk>
								<Chunk type="FunctionRef">Quote</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptName</Chunk>
								<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$scriptParameter = Random ;¶&quot;</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$logData</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $$logLevelToWriteOffset; Value:5 ]</StepText>
						<Value>
							<Calculation><![CDATA[5]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">5</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$$logLevelToWriteOffset</Name>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Logger: Create Entry ( logData )”; Parameter: $logData ]</StepText>
						<Calculation><![CDATA[$logData]]></Calculation>
						<DisplayCalculation>
							<Chunk type="NoRef">$logData</Chunk>
						</DisplayCalculation>
						<Script id="2" name="Logger: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $$logLevelToWriteOffset; Value:&quot;&quot; ]</StepText>
						<Value>
							<Calculation><![CDATA[""]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;&quot;</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$$logLevelToWriteOffset</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="87" name="Show Custom Dialog">
						<StepText>Show Custom Dialog [ Title: &quot;Test Finished&quot;; Message: &quot;Check if a log entry was written to your specified destination to confirm successful operation.&quot;; Default Button: “OK”, Commit: “Yes” ]</StepText>
						<Title>
							<Calculation><![CDATA["Test Finished"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;Test Finished&quot;</Chunk>
							</DisplayCalculation>
						</Title>
						<Message>
							<Calculation><![CDATA["Check if a log entry was written to your specified destination to confirm successful operation."]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;Check if a log entry was written to your specified destination to confirm successful operation.&quot;</Chunk>
							</DisplayCalculation>
						</Message>
						<Buttons>
							<Button CommitState="True">
								<Calculation><![CDATA["OK"]]></Calculation>
							</Button>
							<Button CommitState="False"/>
							<Button CommitState="False"/>
						</Buttons>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="2" name="Logger: Create Entry ( logData )">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># PURPOSE:</StepText>
						<Text> PURPOSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Provide an interface for logging.</StepText>
						<Text>    Provide an interface for logging.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    A central place all log requests are sent to, which allows for easily writting a log to a different destination.</StepText>
						<Text>    A central place all log requests are sent to, which allows for easily writting a log to a different destination.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># CONTEXT: global (can be called from any context)</StepText>
						<Text> CONTEXT: global (can be called from any context)</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># PARAMETERS:</StepText>
						<Text> PARAMETERS:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    entire script parameter is the data to log, in whichever format you choose. Is recommended to contain the output of the LogData custom function, but does not have to.</StepText>
						<Text>    entire script parameter is the data to log, in whichever format you choose. Is recommended to contain the output of the LogData custom function, but does not have to.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># RETURNS: none</StepText>
						<Text> RETURNS: none</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Since this script will often be used for logging errors, it does not generate any errors itself to prevent infinite recursion.</StepText>
						<Text>    Since this script will often be used for logging errors, it does not generate any errors itself to prevent infinite recursion.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Not returning a result also preserves the value of Get ( ScriptResult ) in the calling script.</StepText>
						<Text>    Not returning a result also preserves the value of Get ( ScriptResult ) in the calling script.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># DEPENDENCIES: none</StepText>
						<Text> DEPENDENCIES: none</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># NOTES:</StepText>
						<Text> NOTES:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    This script should be modified to call a log writer of your choosing, which could either be in this file or another.</StepText>
						<Text>    This script should be modified to call a log writer of your choosing, which could either be in this file or another.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    It should also contain any filtering logic necessary. An example of this logic is included in the default script.</StepText>
						<Text>    It should also contain any filtering logic necessary. An example of this logic is included in the default script.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># REVISIONS:</StepText>
						<Text> REVISIONS:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    2014-FEB-06	 Daniel Smith	- fix FILTER BY LOGLEVEL calculation1.0.0-beta22014-FEB-04	 Daniel Smith	- add LogNotFiltered cf2014-FEB-03	 Daniel Smith	- apply changes made to production test file2014-JAN-16	 Daniel Smith	- modify filter feature2014-JAN-15	 Daniel Smith	- modify documentation for script parameter, changing it from being a single value encoded under the name logData to a set of encoded name/value pairs	- move filter by log level steps into a sub-script2013-NOV-23	 Daniel Smith	- Created</StepText>
						<Text>    2014-FEB-06	 Daniel Smith	- fix FILTER BY LOGLEVEL calculation1.0.0-beta22014-FEB-04	 Daniel Smith	- add LogNotFiltered cf2014-FEB-03	 Daniel Smith	- apply changes made to production test file2014-JAN-16	 Daniel Smith	- modify filter feature2014-JAN-15	 Daniel Smith	- modify documentation for script parameter, changing it from being a single value encoded under the name logData to a set of encoded name/value pairs	- move filter by log level steps into a sub-script2013-NOV-23	 Daniel Smith	- Created</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># FILTER BY LOGLEVEL</StepText>
						<Text> FILTER BY LOGLEVEL</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># NOTE: when including verbose logging in your scripts, it&apos;s recommended to test if the log is filtered before calling this Logger script. The filter logic exists in a custom function specifically to facilitate this use case.The reason for this recommendation is performance: it prevents the log data from being generated/encoded if the log is not going to be written.EXAMPLE:If [LogNotFiltered ( LogLevel5Trace )]    Perform Script [&quot;Logger: Create Entry ( logData )&quot;; Parameter: LogData ( LogLevel5Trace ; &quot;&quot; )]EndIf</StepText>
						<Text> NOTE: when including verbose logging in your scripts, it&apos;s recommended to test if the log is filtered before calling this Logger script. The filter logic exists in a custom function specifically to facilitate this use case.The reason for this recommendation is performance: it prevents the log data from being generated/encoded if the log is not going to be written.EXAMPLE:If [LogNotFiltered ( LogLevel5Trace )]    Perform Script [&quot;Logger: Create Entry ( logData )&quot;; Parameter: LogData ( LogLevel5Trace ; &quot;&quot; )]EndIf</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $logLevel; Value:/** * Extract the logLevel from the script parameter. *  * If you include trace-level logging calls in your database, this calculation will be run many times so it is worth-while * making it as efficient as possible. *  * The calculation below performs the same task as #Get ( Get ( ScriptParameter ) ; &quot;logLevel&quot; ), but it does it more efficiently. *  */Let ( [	~start = Position ( Get ( ScriptParameter ) ; &quot;$LogLevel = &quot; ; 1 ; 1 ) ;	~end = Position ( Get ( ScriptParameter ) ; &quot;;&quot; ; ~start ; 1 )] ;	If ( ~start ;		GetAsNumber ( Middle ( Get ( ScriptParameter ) ; ~start + 12 ; ~end - ~start +12 ) )	)) ]</StepText>
						<Value>
							<Calculation><![CDATA[/** * Extract the logLevel from the script parameter. *  * If you include trace-level logging calls in your database, this calculation will be run many times so it is worth-while * making it as efficient as possible. *  * The calculation below performs the same task as #Get ( Get ( ScriptParameter ) ; "logLevel" ), but it does it more efficiently. *  */Let ( [	~start = Position ( Get ( ScriptParameter ) ; "$LogLevel = " ; 1 ; 1 ) ;	~end = Position ( Get ( ScriptParameter ) ; ";" ; ~start ; 1 )] ;	If ( ~start ;		GetAsNumber ( Middle ( Get ( ScriptParameter ) ; ~start + 12 ; ~end - ~start +12 ) )	))]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">/** * Extract the logLevel from the script parameter. *  * If you include trace-level logging calls in your database, this calculation will be run many times so it is worth-while * making it as efficient as possible. *  * The calculation below performs the same task as #Get ( Get ( ScriptParameter ) ; &quot;logLevel&quot; ), but it does it more efficiently. *  */</Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~start = </Chunk>
								<Chunk type="FunctionRef">Position</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) ; &quot;$LogLevel = &quot; ; 1 ; 1 ) ;	~end = </Chunk>
								<Chunk type="FunctionRef">Position</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) ; &quot;;&quot; ; ~start ; 1 )] ;	</Chunk>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( ~start ;		</Chunk>
								<Chunk type="FunctionRef">GetAsNumber</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Middle</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) ; ~start + 12 ; ~end - ~start +12 ) )	))</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$logLevel</Name>
					</Step>
					<Step enable="True" id="68" name="If">
						<StepText>If [ GetAsNumber ( $logLevel ) ≥ 0		  // don&apos;t filter if $logLevel is invalidandnot LogWriteEnabled ( $logLevel ) ]</StepText>
						<Calculation><![CDATA[GetAsNumber ( $logLevel ) ≥ 0		  // don't filter if $logLevel is invalidandnot LogWriteEnabled ( $logLevel )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="FunctionRef">GetAsNumber</Chunk>
							<Chunk type="NoRef"> ( $logLevel ) ≥ 0		  </Chunk>
							<Chunk type="FunctionRef">// don&apos;t filter if $logLevel is invalid</Chunk>
							<Chunk type="FunctionRef">and</Chunk>
							<Chunk type="NoRef"></Chunk>
							<Chunk type="FunctionRef">not</Chunk>
							<Chunk type="NoRef"> </Chunk>
							<Chunk type="CustomFunctionRef">LogWriteEnabled</Chunk>
							<Chunk type="NoRef"> ( $logLevel )</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="103" name="Exit Script">
						<StepText>Exit Script [  ]</StepText>
					</Step>
					<Step enable="True" id="70" name="End If">
						<StepText>End If</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># SET ENVIRONMENT</StepText>
						<Text> SET ENVIRONMENT</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># If Log Writer scripts are in an external file and if that file is not accessable for some reason, turning error capture on will prevent this script from showing an error to the user.</StepText>
						<Text> If Log Writer scripts are in an external file and if that file is not accessable for some reason, turning error capture on will prevent this script from showing an error to the user.</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $ErrorCaptureState; Value:Get ( ErrorCaptureState ) ]</StepText>
						<Value>
							<Calculation><![CDATA[Get ( ErrorCaptureState )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ErrorCaptureState</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$ErrorCaptureState</Name>
					</Step>
					<Step enable="True" id="86" name="Set Error Capture">
						<StepText>Set Error Capture [ On ]</StepText>
						<Set state="True"/>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># CALL LOGGING SCRIPT(S)</StepText>
						<Text> CALL LOGGING SCRIPT(S)</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $logData; Value:Get ( ScriptParameter ) ]</StepText>
						<Value>
							<Calculation><![CDATA[Get ( ScriptParameter )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$logData</Name>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># email the most severe log entries</StepText>
						<Text> email the most severe log entries</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># NOTE: you may not want to send an email if the current user is a Developer</StepText>
						<Text> NOTE: you may not want to send an email if the current user is a Developer</Text>
					</Step>
					<Step enable="True" id="68" name="If">
						<StepText>If [  ]</StepText>
					</Step>
					<Step enable="True" id="125" name="Else If">
						<StepText>Else If [ $logLevel ≤ LogLevel1Error ]</StepText>
						<Calculation><![CDATA[$logLevel ≤ LogLevel1Error]]></Calculation>
						<DisplayCalculation>
							<Chunk type="NoRef">$logLevel ≤ </Chunk>
							<Chunk type="CustomFunctionRef">LogLevel1Error</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: Email: Send ( logData )” from file: “Log”; Parameter: $logData ]</StepText>
						<FileReference id="1" name="Log">
							<UniversalPathList>file:Log</UniversalPathList>
						</FileReference>
						<Calculation><![CDATA[$logData]]></Calculation>
						<DisplayCalculation>
							<Chunk type="NoRef">$logData</Chunk>
						</DisplayCalculation>
						<Script id="155" name="Log Writer: Email: Send ( logData )"/>
					</Step>
					<Step enable="True" id="68" name="If">
						<StepText>If [ Get ( LastError ) ]</StepText>
						<Calculation><![CDATA[Get ( LastError )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="FunctionRef">Get</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="FunctionRef">LastError</Chunk>
							<Chunk type="NoRef"> )</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="138" name="Re-Login">
						<StepText>Re-Login [ Account Name: /** * By attempting to login with an invalid account, an entry is created in the server&apos;s Event.log file. * Note that this info may not be displayed in the log viewer available from the Admin console, in * which case you may need to use either the OS log/event viewer app or view the Event.log file * in a text editor. * * Thanks goes to HOnza for this idea: http://honza.24usoftware.com/debugging-scripts-by-writing-to-event-log */&quot;Error performing script: &apos;Log Writer: Email: Send&apos; from script: &apos;&quot;&amp; Get ( ScriptName )&amp; &quot;&apos;&quot; ][ No dialog ]</StepText>
						<NoInteract state="True"/>
						<AccountName>
							<Calculation><![CDATA[/** * By attempting to login with an invalid account, an entry is created in the server's Event.log file. * Note that this info may not be displayed in the log viewer available from the Admin console, in * which case you may need to use either the OS log/event viewer app or view the Event.log file * in a text editor. * * Thanks goes to HOnza for this idea: http://honza.24usoftware.com/debugging-scripts-by-writing-to-event-log */"Error performing script: 'Log Writer: Email: Send' from script: '"& Get ( ScriptName )& "'"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">/** * By attempting to login with an invalid account, an entry is created in the server&apos;s Event.log file. * Note that this info may not be displayed in the log viewer available from the Admin console, in * which case you may need to use either the OS log/event viewer app or view the Event.log file * in a text editor. * * Thanks goes to HOnza for this idea: http://honza.24usoftware.com/debugging-scripts-by-writing-to-event-log */&quot;Error performing script: &apos;Log Writer: Email: Send&apos; from script: &apos;&quot;&amp; </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptName</Chunk>
								<Chunk type="NoRef"> )&amp; &quot;&apos;&quot;</Chunk>
							</DisplayCalculation>
						</AccountName>
					</Step>
					<Step enable="True" id="125" name="Else If">
						<StepText>Else If [ // script sent an emailnot GetAsBoolean ( Get ( ScriptResult ) ) ]</StepText>
						<Calculation><![CDATA[// script sent an emailnot GetAsBoolean ( Get ( ScriptResult ) )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="FunctionRef">// script sent an email</Chunk>
							<Chunk type="NoRef"></Chunk>
							<Chunk type="FunctionRef">not</Chunk>
							<Chunk type="NoRef"> </Chunk>
							<Chunk type="FunctionRef">GetAsBoolean</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="FunctionRef">Get</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="FunctionRef">ScriptResult</Chunk>
							<Chunk type="NoRef"> ) )</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $logData; Value:$logData&amp; # ( &quot;emailSent&quot; ; True ) ]</StepText>
						<Value>
							<Calculation><![CDATA[$logData& # ( "emailSent" ; True )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$logData&amp; </Chunk>
								<Chunk type="CustomFunctionRef">#</Chunk>
								<Chunk type="NoRef"> ( &quot;emailSent&quot; ; </Chunk>
								<Chunk type="FunctionRef">True</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$logData</Name>
					</Step>
					<Step enable="True" id="70" name="End If">
						<StepText>End If</StepText>
					</Step>
					<Step enable="True" id="70" name="End If">
						<StepText>End If</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># write all logs to a table</StepText>
						<Text> write all logs to a table</Text>
					</Step>
					<Step enable="True" id="1" name="Perform Script">
						<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )” from file: “Log”; Parameter: $logData ]</StepText>
						<FileReference id="1" name="Log">
							<UniversalPathList>file:Log</UniversalPathList>
						</FileReference>
						<Calculation><![CDATA[$logData]]></Calculation>
						<DisplayCalculation>
							<Chunk type="NoRef">$logData</Chunk>
						</DisplayCalculation>
						<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
					</Step>
					<Step enable="True" id="68" name="If">
						<StepText>If [ Get ( LastError ) ]</StepText>
						<Calculation><![CDATA[Get ( LastError )]]></Calculation>
						<DisplayCalculation>
							<Chunk type="FunctionRef">Get</Chunk>
							<Chunk type="NoRef"> ( </Chunk>
							<Chunk type="FunctionRef">LastError</Chunk>
							<Chunk type="NoRef"> )</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="138" name="Re-Login">
						<StepText>Re-Login [ Account Name: /** * By attempting to login with an invalid account, an entry is created in the server&apos;s Event.log file. * Note that this info may not be displayed in the log viewer available from the Admin console, in * which case you may need to use either the OS log/event viewer app or view the Event.log file * in a text editor. * * Thanks goes to HOnza for this idea: http://honza.24usoftware.com/debugging-scripts-by-writing-to-event-log */&quot;Error performing script: &apos;Log Writer: FM: Create Entry&apos; from script: &apos;&quot;&amp; Get ( ScriptName )&amp; &quot;&apos;&quot; ][ No dialog ]</StepText>
						<NoInteract state="True"/>
						<AccountName>
							<Calculation><![CDATA[/** * By attempting to login with an invalid account, an entry is created in the server's Event.log file. * Note that this info may not be displayed in the log viewer available from the Admin console, in * which case you may need to use either the OS log/event viewer app or view the Event.log file * in a text editor. * * Thanks goes to HOnza for this idea: http://honza.24usoftware.com/debugging-scripts-by-writing-to-event-log */"Error performing script: 'Log Writer: FM: Create Entry' from script: '"& Get ( ScriptName )& "'"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">/** * By attempting to login with an invalid account, an entry is created in the server&apos;s Event.log file. * Note that this info may not be displayed in the log viewer available from the Admin console, in * which case you may need to use either the OS log/event viewer app or view the Event.log file * in a text editor. * * Thanks goes to HOnza for this idea: http://honza.24usoftware.com/debugging-scripts-by-writing-to-event-log */&quot;Error performing script: &apos;Log Writer: FM: Create Entry&apos; from script: &apos;&quot;&amp; </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptName</Chunk>
								<Chunk type="NoRef"> )&amp; &quot;&apos;&quot;</Chunk>
							</DisplayCalculation>
						</AccountName>
					</Step>
					<Step enable="True" id="70" name="End If">
						<StepText>End If</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="103" name="Exit Script">
						<StepText>Exit Script [  ]</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="172" name="-">
				<StepList/>
			</Script>
		</Group>
		<Group groupCollapsed="True" includeInMenu="False" id="36" name="Log Writer: FM">
			<Script includeInMenu="False" runFullAccess="False" id="165" name="-">
				<StepList/>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="123" name="Log Writer: FM: README">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>#########################################################################</StepText>
						<Text>########################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Log Writer: FM</StepText>
						<Text> Log Writer: FM</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Created by Daniel Smith, dansmith65@gmail.com</StepText>
						<Text> Created by Daniel Smith, dansmith65@gmail.com</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#	</StepText>
						<Text>	</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Write log data to a FileMaker table using native methods (no plugins).</StepText>
						<Text> Write log data to a FileMaker table using native methods (no plugins).</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#	</StepText>
						<Text>	</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># The sole purpose of this module is to &quot;dump&quot; log data into a single field in a new record.</StepText>
						<Text> The sole purpose of this module is to &quot;dump&quot; log data into a single field in a new record.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># By reducing this module to a simple task, users can customize it to their needs through the use of &quot;hook&quot; scripts.</StepText>
						<Text> By reducing this module to a simple task, users can customize it to their needs through the use of &quot;hook&quot; scripts.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#########################################################################</StepText>
						<Text>########################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># REQUIRES</StepText>
						<Text> REQUIRES</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        No strict dependencies, see installation section for optional dependencies.</StepText>
						<Text>        No strict dependencies, see installation section for optional dependencies.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># INTEGRATION</StepText>
						<Text> INTEGRATION</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ( it&apos;s wise to check the Import.log file for errors, as you add elements to your database )</StepText>
						<Text> ( it&apos;s wise to check the Import.log file for errors, as you add elements to your database )</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        1. import custom functions:</StepText>
						<Text>        1. import custom functions:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - [optional] #Get</StepText>
						<Text>                - [optional] #Get</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        This function is used in the following fields auto-enter calc and can easily be replaced with your own data extraction function.accountNameerrorCodeerrorDescriptionerrorInfoerrorTypefileNamelogLevelscriptName</StepText>
						<Text>                        This function is used in the following fields auto-enter calc and can easily be replaced with your own data extraction function.accountNameerrorCodeerrorDescriptionerrorInfoerrorTypefileNamelogLevelscriptName</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        2. import tables:</StepText>
						<Text>        2. import tables:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - Log</StepText>
						<Text>                - Log</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - LogItem</StepText>
						<Text>                - LogItem</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        3. create layout named &quot;Log: Blank&quot; showing records from &quot;Log&quot; table</StepText>
						<Text>        3. create layout named &quot;Log: Blank&quot; showing records from &quot;Log&quot; table</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - recommend using the classic theme for compatibility with IWP</StepText>
						<Text>                - recommend using the classic theme for compatibility with IWP</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        4. import module script folder</StepText>
						<Text>        4. import module script folder</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        5. adjust privileges:</StepText>
						<Text>        5. adjust privileges:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                To allow a user to create log entries:</StepText>
						<Text>                To allow a user to create log entries:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        Records</StepText>
						<Text>                        Records</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - create records in Log table AND modify logData field</StepText>
						<Text>                                - create records in Log table AND modify logData field</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        Layouts</StepText>
						<Text>                        Layouts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - view and modify records from &quot;Log: Blank&quot; layout</StepText>
						<Text>                                - view and modify records from &quot;Log: Blank&quot; layout</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        Scripts</StepText>
						<Text>                        Scripts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - run all scripts in the module folder</StepText>
						<Text>                                - run all scripts in the module folder</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        6. review all scripts in the module Config folder, adjust as necessary</StepText>
						<Text>        6. review all scripts in the module Config folder, adjust as necessary</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        7. run &quot;Log Writer: FM: Test Installation&quot; script from every user account that is allowed to use this module</StepText>
						<Text>        7. run &quot;Log Writer: FM: Test Installation&quot; script from every user account that is allowed to use this module</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># INSTRUCTIONS FOR USE</StepText>
						<Text> INSTRUCTIONS FOR USE</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - install this module in a single file in your solution</StepText>
						<Text>        - install this module in a single file in your solution</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - [OR] use this file as a stand-alone logging file</StepText>
						<Text>        - [OR] use this file as a stand-alone logging file</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - install Logger module in every file that will send data to this log</StepText>
						<Text>        - install Logger module in every file that will send data to this log</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - point Logger module to script: &quot;Log Writer: FM: Create Entry ( logData )&quot;</StepText>
						<Text>        - point Logger module to script: &quot;Log Writer: FM: Create Entry ( logData )&quot;</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - [OR] point Logger module to a Logger module in the same file as the Log Writer: FM module</StepText>
						<Text>        - [OR] point Logger module to a Logger module in the same file as the Log Writer: FM module</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - this method would allow you to filter the log for a single file or all files in a solution</StepText>
						<Text>                - this method would allow you to filter the log for a single file or all files in a solution</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - consider installing &quot;Log Viewer: FM&quot; module for viewing the log</StepText>
						<Text>        - consider installing &quot;Log Viewer: FM&quot; module for viewing the log</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># LICENSE:</StepText>
						<Text> LICENSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        The MIT License (MIT)Copyright (c) 2014 Daniel SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</StepText>
						<Text>        The MIT License (MIT)Copyright (c) 2014 Daniel SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="137" name="Log Writer: FM: Version 1.0.0-beta2">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># PURPOSE:</StepText>
						<Text> PURPOSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Return the version number of this module.</StepText>
						<Text>    Return the version number of this module.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># RETURNS:</StepText>
						<Text> RETURNS:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    version string portion of the script name</StepText>
						<Text>    version string portion of the script name</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># NOTES:</StepText>
						<Text> NOTES:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    http://filemakerstandards.org/display/bp/Default+scripts</StepText>
						<Text>    http://filemakerstandards.org/display/bp/Default+scripts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    This guideline was heavily influenced by http://semver.org/spec/v2.0.0-rc.1.html</StepText>
						<Text>    This guideline was heavily influenced by http://semver.org/spec/v2.0.0-rc.1.html</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Changelog: Summary is formatted with markdown: http://daringfireball.net/projects/markdown/- use different header &apos;tag&apos; (#&apos;s) depending on the version being incrementedMajor: H1Minor: H2Patch: H3</StepText>
						<Text>    Changelog: Summary is formatted with markdown: http://daringfireball.net/projects/markdown/- use different header &apos;tag&apos; (#&apos;s) depending on the version being incrementedMajor: H1Minor: H2Patch: H3</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $scriptResult; Value:// return script version string portion of script nameLet ( [	~text = Get ( ScriptName ) ;	~firstNumber = Left ( Filter ( ~text  ; &quot;0123456789&quot; ) ; 1 ) ;	~firstNumberPosition = Position ( ~text ; ~firstNumber ; 1 ; 1 )] ;	Right ( ~text ; Length ( ~text ) - ~firstNumberPosition + 1 )) ]</StepText>
						<Value>
							<Calculation><![CDATA[// return script version string portion of script nameLet ( [	~text = Get ( ScriptName ) ;	~firstNumber = Left ( Filter ( ~text  ; "0123456789" ) ; 1 ) ;	~firstNumberPosition = Position ( ~text ; ~firstNumber ; 1 ; 1 )] ;	Right ( ~text ; Length ( ~text ) - ~firstNumberPosition + 1 ))]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// return script version string portion of script name</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~text = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptName</Chunk>
								<Chunk type="NoRef"> ) ;	~firstNumber = </Chunk>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Filter</Chunk>
								<Chunk type="NoRef"> ( ~text  ; &quot;0123456789&quot; ) ; 1 ) ;	~firstNumberPosition = </Chunk>
								<Chunk type="FunctionRef">Position</Chunk>
								<Chunk type="NoRef"> ( ~text ; ~firstNumber ; 1 ; 1 )] ;	</Chunk>
								<Chunk type="FunctionRef">Right</Chunk>
								<Chunk type="NoRef"> ( ~text ; </Chunk>
								<Chunk type="FunctionRef">Length</Chunk>
								<Chunk type="NoRef"> ( ~text ) - ~firstNumberPosition + 1 ))</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$scriptResult</Name>
					</Step>
					<Step enable="True" id="103" name="Exit Script">
						<StepText>Exit Script [ Result: $scriptResult ]</StepText>
						<Calculation><![CDATA[$scriptResult]]></Calculation>
						<DisplayCalculation>
							<Chunk type="NoRef">$scriptResult</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># MAJOR.MINOR.PATCH{-PRERELEASE}{+}</StepText>
						<Text> MAJOR.MINOR.PATCH{-PRERELEASE}{+}</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    MAJOR:    Arbitrarily defined by the developer, but must introduce significant change to either the feature set, or the internal method of processing.</StepText>
						<Text>    MAJOR:    Arbitrarily defined by the developer, but must introduce significant change to either the feature set, or the internal method of processing.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    MINOR:    New features. Should be incremented whenever a new feature is added.</StepText>
						<Text>    MINOR:    New features. Should be incremented whenever a new feature is added.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    PATCH:    Bug fixes. Should not introduce new features (unless the lack of that feature can be considered a bug).</StepText>
						<Text>    PATCH:    Bug fixes. Should not introduce new features (unless the lack of that feature can be considered a bug).</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    {-PRERELEASE}    OPTIONAL    A pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.This value can be compaired as text in FileMaker, and the following will be true:  &quot;alpha&quot; &lt; &quot;beta&quot; and &quot;alpha&quot; &lt; &quot;rc&quot; and &quot;beta&quot; &lt; &quot;rc&quot;.</StepText>
						<Text>    {-PRERELEASE}    OPTIONAL    A pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.This value can be compaired as text in FileMaker, and the following will be true:  &quot;alpha&quot; &lt; &quot;beta&quot; and &quot;alpha&quot; &lt; &quot;rc&quot; and &quot;beta&quot; &lt; &quot;rc&quot;.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    {+}    OPTIONAL    If the file has been modified since the version was last incremented, and the version does not need to be incremented yet (still under development), append the version string with a +.</StepText>
						<Text>    {+}    OPTIONAL    If the file has been modified since the version was last incremented, and the version does not need to be incremented yet (still under development), append the version string with a +.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># These guidelines should be followed:</StepText>
						<Text> These guidelines should be followed:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Use decimal separated text to store the version.</StepText>
						<Text>    Use decimal separated text to store the version.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    When evaluating the version, MUST NOT convert the entire text to a number. Each decimal separated section must be evaluated individually, and in order. Here is a possible method of doing so:Let ( [	ver = &quot;1.2.21&quot; ;	// extract pre-release version string	ver = Substitute ( ver ; &quot;-&quot; ; ¶ ) ;	preRelease = GetValue ( ver ; 2 ) ;	// extract normal version string	ver = GetValue ( ver ; 1 ) ;	ver = Substitute ( ver ; &quot;.&quot; ; ¶ ) ;	major = GetAsNumber ( GetValue ( ver ; 1 ) ) ;	minor = GetAsNumber ( GetValue ( ver ; 2 ) ) ;	patch = GetAsNumber ( GetValue ( ver ; 3 ) )] ;	// evaluate version	Case (		major = 0 ;		&quot;initial development&quot; ;				major = 1 ;		&quot;first public release&quot;	))</StepText>
						<Text>    When evaluating the version, MUST NOT convert the entire text to a number. Each decimal separated section must be evaluated individually, and in order. Here is a possible method of doing so:Let ( [	ver = &quot;1.2.21&quot; ;	// extract pre-release version string	ver = Substitute ( ver ; &quot;-&quot; ; ¶ ) ;	preRelease = GetValue ( ver ; 2 ) ;	// extract normal version string	ver = GetValue ( ver ; 1 ) ;	ver = Substitute ( ver ; &quot;.&quot; ; ¶ ) ;	major = GetAsNumber ( GetValue ( ver ; 1 ) ) ;	minor = GetAsNumber ( GetValue ( ver ; 2 ) ) ;	patch = GetAsNumber ( GetValue ( ver ; 3 ) )] ;	// evaluate version	Case (		major = 0 ;		&quot;initial development&quot; ;				major = 1 ;		&quot;first public release&quot;	))</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Summarize the changes of each version in a single comment step below.</StepText>
						<Text>    Summarize the changes of each version in a single comment step below.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ==============================================================================</StepText>
						<Text> ==============================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># CHANGELOG</StepText>
						<Text> CHANGELOG</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ==============================================================================</StepText>
						<Text> ==============================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>## 1.0.0 #- initial release</StepText>
						<Text># 1.0.0 #- initial release</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="166" name="-">
				<StepList/>
			</Script>
			<Group groupCollapsed="True" includeInMenu="False" id="124" name="Log Writer: FM: Public">
				<Script includeInMenu="False" runFullAccess="False" id="34" name="Log Writer: FM: Create Entry ( logData )">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Save a set of name/value pairs (dictionary) to a new record in a logging table.</StepText>
							<Text>    Save a set of name/value pairs (dictionary) to a new record in a logging table.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: global</StepText>
							<Text> CONTEXT: global</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS:</StepText>
							<Text> PARAMETERS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    entire script parameter is the data to log, in whichever format you choose.</StepText>
							<Text>    entire script parameter is the data to log, in whichever format you choose.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS:</StepText>
							<Text> RETURNS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    numeric errorCode</StepText>
							<Text>    numeric errorCode</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># DEPENDENCIES: none</StepText>
							<Text> DEPENDENCIES: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-FEB-03	 Daniel Smith	- return an errorCode2014-JAN-14	 Daniel Smith	- modify error used when parameters are not valid	- add test for current layout being based on correct table occurence2014-JAN-10	 Daniel Smith	- go to blank layout to create the log entry2013-NOV-20	 Daniel Smith	- don&apos;t switch layouts if a record is being edited in the current window	- fix bug with error handling in Assign Parameters section	- fix bug where script wouldn&apos;t go to @ScriptLog layout if current window was not in Browse Mode2013-JUN-12	 Daniel Smith	- make server compatible	- remove unnecessary custom functions used when assigning parameters, like #Filter2013-MAR-25	 Daniel Smith	- disable triggers before returning to original layout, to prevent infinit recursion if a layout script trigger logs an error2012-NOV-30	 Daniel Smith	- run script with error capture on, restore error capture state at end of script	- modify error trapping method to use a loop and remove exit script steps	- only use $IsNewWindow after a window is opened	- add $OpenNewWindow variable   2012-NOV-21	 Daniel Smith	- if parameter is invalid, log an error with log data generated from this script	- preserve current window&apos;s mode, and make sure the current window is in browse mode before creating a log entry2012-NOV-20	 Daniel Smith	- renamed to &quot;Create Log Entry ( logData )&quot;2012-NOV-16	 Daniel Smith	- Created</StepText>
							<Text>    2014-FEB-03	 Daniel Smith	- return an errorCode2014-JAN-14	 Daniel Smith	- modify error used when parameters are not valid	- add test for current layout being based on correct table occurence2014-JAN-10	 Daniel Smith	- go to blank layout to create the log entry2013-NOV-20	 Daniel Smith	- don&apos;t switch layouts if a record is being edited in the current window	- fix bug with error handling in Assign Parameters section	- fix bug where script wouldn&apos;t go to @ScriptLog layout if current window was not in Browse Mode2013-JUN-12	 Daniel Smith	- make server compatible	- remove unnecessary custom functions used when assigning parameters, like #Filter2013-MAR-25	 Daniel Smith	- disable triggers before returning to original layout, to prevent infinit recursion if a layout script trigger logs an error2012-NOV-30	 Daniel Smith	- run script with error capture on, restore error capture state at end of script	- modify error trapping method to use a loop and remove exit script steps	- only use $IsNewWindow after a window is opened	- add $OpenNewWindow variable   2012-NOV-21	 Daniel Smith	- if parameter is invalid, log an error with log data generated from this script	- preserve current window&apos;s mode, and make sure the current window is in browse mode before creating a log entry2012-NOV-20	 Daniel Smith	- renamed to &quot;Create Log Entry ( logData )&quot;2012-NOV-16	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># ASSIGN PARAMETERS</StepText>
							<Text> ASSIGN PARAMETERS</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $logData; Value:Get ( ScriptParameter ) &amp; LogDataSession ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( ScriptParameter ) & LogDataSession]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptParameter</Chunk>
									<Chunk type="NoRef"> ) &amp; </Chunk>
									<Chunk type="CustomFunctionRef">LogDataSession</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$logData</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># GET CONFIG</StepText>
							<Text> GET CONFIG</Text>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: FM: Config: Get” ]</StepText>
							<Script id="134" name="Log Writer: FM: Config: Get"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: FM: Config: Handle Error ( errorCode { errorInfo } )”; Parameter: &quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;&amp; &quot;$errorInfo = &quot; &amp; Quote ( &quot;FileMaker Error when performing script: &apos;Log Writer: FM: Config: Get&apos;&quot; ) &amp; &quot; ;¶&quot; ]</StepText>
							<Calculation><![CDATA["$errorCode = GetAsNumber ( " & $errorCode & " ) ;¶"& "$errorInfo = " & Quote ( "FileMaker Error when performing script: 'Log Writer: FM: Config: Get'" ) & " ;¶"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;&amp; &quot;$errorInfo = &quot; &amp; </Chunk>
								<Chunk type="FunctionRef">Quote</Chunk>
								<Chunk type="NoRef"> ( &quot;FileMaker Error when performing script: &apos;Log Writer: FM: Config: Get&apos;&quot; ) &amp; &quot; ;¶&quot;</Chunk>
							</DisplayCalculation>
							<Script id="130" name="Log Writer: FM: Config: Handle Error ( errorCode { errorInfo } )"/>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># SET VARIABLES</StepText>
							<Text> SET VARIABLES</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $ErrorCaptureState; Value:Get ( ErrorCaptureState ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( ErrorCaptureState )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ErrorCaptureState</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$ErrorCaptureState</Name>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $originalLayoutNumber; Value:Get ( LayoutNumber ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( LayoutNumber )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">LayoutNumber</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$originalLayoutNumber</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># SET ENVIRONMENT</StepText>
							<Text> SET ENVIRONMENT</Text>
						</Step>
						<Step enable="True" id="86" name="Set Error Capture">
							<StepText>Set Error Capture [ On ]</StepText>
							<Set state="True"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># GO TO ERRORLOG LAYOUT</StepText>
							<Text> GO TO ERRORLOG LAYOUT</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># skip this section</StepText>
							<Text> skip this section</Text>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ $config.openNewWindow ]</StepText>
							<Calculation><![CDATA[$config.openNewWindow]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$config.openNewWindow</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $openNewWindow; Value:True ]</StepText>
							<Value>
								<Calculation><![CDATA[True]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">True</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$openNewWindow</Name>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ Get ( RecordOpenCount )// a record is open for editing in the current window ]</StepText>
							<Calculation><![CDATA[Get ( RecordOpenCount )// a record is open for editing in the current window]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">RecordOpenCount</Chunk>
								<Chunk type="NoRef"> )</Chunk>
								<Chunk type="FunctionRef">// a record is open for editing in the current window</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $openNewWindow; Value:True ]</StepText>
							<Value>
								<Calculation><![CDATA[True]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">True</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$openNewWindow</Name>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ // the current layout is based on the correct table occurenceGetValue ( Substitute ( GetFieldName ( Log::logData ) ; &quot;::&quot; ; ¶ ) ; 1 )=Get ( LayoutTableName ) ]</StepText>
							<Calculation><![CDATA[// the current layout is based on the correct table occurenceGetValue ( Substitute ( GetFieldName ( Log::logData ) ; "::" ; ¶ ) ; 1 )=Get ( LayoutTableName )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// the current layout is based on the correct table occurence</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">GetValue</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Substitute</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">GetFieldName</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FieldRef">
									<Field table="Log" id="2" name="logData"/>
								</Chunk>
								<Chunk type="NoRef"> ) ; &quot;::&quot; ; ¶ ) ; 1 )=</Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LayoutTableName</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># don&apos;t need to change layouts</StepText>
							<Text> don&apos;t need to change layouts</Text>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ Get ( WindowMode ) = 0  // Browse mode ]</StepText>
							<Calculation><![CDATA[Get ( WindowMode ) = 0  // Browse mode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">WindowMode</Chunk>
								<Chunk type="NoRef"> ) = 0  </Chunk>
								<Chunk type="FunctionRef">// Browse mode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Left ( Get ( ApplicationVersion ) ; 3 ) = &quot;Pro&quot;orLeft ( Get ( ApplicationVersion ) ; 7 ) = &quot;Runtime&quot;orGet ( ScriptParameter ) = 3	 // iOSorGet ( ScriptParameter ) = 4	 // WebDirect ]</StepText>
							<Calculation><![CDATA[Left ( Get ( ApplicationVersion ) ; 3 ) = "Pro"orLeft ( Get ( ApplicationVersion ) ; 7 ) = "Runtime"orGet ( ScriptParameter ) = 3	 // iOSorGet ( ScriptParameter ) = 4	 // WebDirect]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ; 3 ) = &quot;Pro&quot;</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ; 7 ) = &quot;Runtime&quot;</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) = 3	 </Chunk>
								<Chunk type="FunctionRef">// iOS</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) = 4	 </Chunk>
								<Chunk type="FunctionRef">// WebDirect</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="79" name="Freeze Window">
							<StepText>Freeze Window</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="6" name="Go to Layout">
							<StepText>Go to Layout [ “Log: Blank” (Log) ]</StepText>
							<LayoutDestination value="SelectedLayout"/>
							<Layout id="10" name="Log: Blank"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( LastError ) ]</StepText>
							<Calculation><![CDATA[Get ( LastError )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $openNewWindow; Value:True ]</StepText>
							<Value>
								<Calculation><![CDATA[True]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">True</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$openNewWindow</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># I&apos;m not sure if there is any scenario that Go to Layout would trigger an error AND change layouts, but it&apos;s just safer to cover all the bases.</StepText>
							<Text> I&apos;m not sure if there is any scenario that Go to Layout would trigger an error AND change layouts, but it&apos;s just safer to cover all the bases.</Text>
						</Step>
						<Step enable="True" id="6" name="Go to Layout">
							<StepText>Go to Layout [ original layout ]</StepText>
							<LayoutDestination value="OriginalLayout"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="69" name="Else">
							<StepText>Else</StepText>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $openNewWindow; Value:True ]</StepText>
							<Value>
								<Calculation><![CDATA[True]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">True</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$openNewWindow</Name>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># script triggers, an uncommited record, or ???  may prevent this script from going to a new layout</StepText>
							<Text> script triggers, an uncommited record, or ???  may prevent this script from going to a new layout</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># open a new window instead</StepText>
							<Text> open a new window instead</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $openNewWindowand not $errorCode ]</StepText>
							<Calculation><![CDATA[$openNewWindowand not $errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$openNewWindow</Chunk>
								<Chunk type="FunctionRef">and</Chunk>
								<Chunk type="NoRef"> </Chunk>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> $errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: FM: Config: Open New Window” ]</StepText>
							<Script id="128" name="Log Writer: FM: Config: Open New Window"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ // Save script result to local variablesLet ( [	~data = Get ( ScriptResult ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode) ]</StepText>
							<Calculation><![CDATA[// Save script result to local variablesLet ( [	~data = Get ( ScriptResult ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			"Let ( [¶"			& ~data 			& "¶! = \"\" ] ; \"\" )"		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode)]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// Save script result to local variables</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~data = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptResult</Chunk>
								<Chunk type="NoRef"> ) ;	~evaluationErrorCode = 		</Chunk>
								<Chunk type="FunctionRef">EvaluationError</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Evaluate</Chunk>
								<Chunk type="NoRef"> (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = </Chunk>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode)</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="69" name="Else">
							<StepText>Else</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># no error occured</StepText>
							<Text> no error occured</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $newWindowWasOpened; Value:True ]</StepText>
							<Value>
								<Calculation><![CDATA[True]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">True</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$newWindowWasOpened</Name>
						</Step>
						<Step enable="True" id="6" name="Go to Layout">
							<StepText>Go to Layout [ “Log: Blank” (Log) ]</StepText>
							<LayoutDestination value="SelectedLayout"/>
							<Layout id="10" name="Log: Blank"/>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $errorCode; Value:Get ( LastError ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( LastError )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">LastError</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$errorCode</Name>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $errorCode and not $newWindowWasOpened ]</StepText>
							<Calculation><![CDATA[$errorCode and not $newWindowWasOpened]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode </Chunk>
								<Chunk type="FunctionRef">and</Chunk>
								<Chunk type="NoRef"> </Chunk>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> $newWindowWasOpened</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># I&apos;m not sure if there is any scenario that Go to Layout would trigger an error AND change layouts, but it&apos;s just safer to cover all the bases.</StepText>
							<Text> I&apos;m not sure if there is any scenario that Go to Layout would trigger an error AND change layouts, but it&apos;s just safer to cover all the bases.</Text>
						</Step>
						<Step enable="True" id="6" name="Go to Layout">
							<StepText>Go to Layout [ original layout ]</StepText>
							<LayoutDestination value="OriginalLayout"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CREATE RECORD</StepText>
							<Text> CREATE RECORD</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ not $errorCode ]</StepText>
							<Calculation><![CDATA[not $errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> $errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="71" name="Loop">
							<StepText>Loop</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( WindowMode ) ≠ 0  // Browse mode ]</StepText>
							<Calculation><![CDATA[Get ( WindowMode ) ≠ 0  // Browse mode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">WindowMode</Chunk>
								<Chunk type="NoRef"> ) ≠ 0  </Chunk>
								<Chunk type="FunctionRef">// Browse mode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="55" name="Enter Browse Mode">
							<StepText>Enter Browse Mode</StepText>
							<Pause state="False"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="7" name="New Record/Request">
							<StepText>New Record/Request</StepText>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ Log::logData; $logData ]</StepText>
							<Calculation><![CDATA[$logData]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$logData</Chunk>
							</DisplayCalculation>
							<Field table="Log" id="2" name="logData"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># hook</StepText>
							<Text> hook</Text>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: FM: Config: Hook: After Setting LogData” ]</StepText>
							<Script id="131" name="Log Writer: FM: Config: Hook: After Setting LogData"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ True ]</StepText>
							<Calculation><![CDATA[True]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">True</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ // Save script result to local variablesLet ( [	~data = Get ( ScriptResult ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode) ]</StepText>
							<Calculation><![CDATA[// Save script result to local variablesLet ( [	~data = Get ( ScriptResult ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			"Let ( [¶"			& ~data 			& "¶! = \"\" ] ; \"\" )"		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode)]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// Save script result to local variables</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~data = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptResult</Chunk>
								<Chunk type="NoRef"> ) ;	~evaluationErrorCode = 		</Chunk>
								<Chunk type="FunctionRef">EvaluationError</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Evaluate</Chunk>
								<Chunk type="NoRef"> (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = </Chunk>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode)</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ True ]</StepText>
							<Calculation><![CDATA[True]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">True</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="75" name="Commit Records/Requests">
							<StepText>Commit Records/Requests[ No dialog ]</StepText>
							<NoInteract state="True"/>
							<Option state="False"/>
							<ESSForceCommit state="False"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ True ]</StepText>
							<Calculation><![CDATA[True]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">True</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="73" name="End Loop">
							<StepText>End Loop</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># handle error</StepText>
							<Text> handle error</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="51" name="Revert Record/Request">
							<StepText>Revert Record/Request[ No dialog ]</StepText>
							<NoInteract state="True"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RESTORE CONTEXT</StepText>
							<Text> RESTORE CONTEXT</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $newWindowWasOpened ]</StepText>
							<Calculation><![CDATA[$newWindowWasOpened]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$newWindowWasOpened</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="121" name="Close Window">
							<StepText>Close Window [ Current Window ]</StepText>
							<LimitToWindowsOfCurrentFile state="True"/>
							<Window value="Current"/>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ $originalLayoutNumber ≠ Get ( LayoutNumber ) ]</StepText>
							<Calculation><![CDATA[$originalLayoutNumber ≠ Get ( LayoutNumber )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$originalLayoutNumber ≠ </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LayoutNumber</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: FM: Config: Go To Layout ( layoutNumber )”; Parameter: &quot;$layoutNumber = GetAsNumber ( &quot; &amp; $originalLayoutNumber &amp; &quot; ) ;¶&quot; ]</StepText>
							<Calculation><![CDATA["$layoutNumber = GetAsNumber ( " & $originalLayoutNumber & " ) ;¶"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$layoutNumber = GetAsNumber ( &quot; &amp; $originalLayoutNumber &amp; &quot; ) ;¶&quot;</Chunk>
							</DisplayCalculation>
							<Script id="129" name="Log Writer: FM: Config: Go To Layout ( layoutNumber )"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ // Save script result to local variablesLet ( [	~data = Get ( ScriptResult ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode) ]</StepText>
							<Calculation><![CDATA[// Save script result to local variablesLet ( [	~data = Get ( ScriptResult ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			"Let ( [¶"			& ~data 			& "¶! = \"\" ] ; \"\" )"		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode)]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// Save script result to local variables</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~data = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptResult</Chunk>
								<Chunk type="NoRef"> ) ;	~evaluationErrorCode = 		</Chunk>
								<Chunk type="FunctionRef">EvaluationError</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Evaluate</Chunk>
								<Chunk type="NoRef"> (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = </Chunk>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode)</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ not $ErrorCaptureState ]</StepText>
							<Calculation><![CDATA[not $ErrorCaptureState]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> $ErrorCaptureState</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="86" name="Set Error Capture">
							<StepText>Set Error Capture [ Off ]</StepText>
							<Set state="False"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># HANDLE ERROR</StepText>
							<Text> HANDLE ERROR</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: FM: Config: Handle Error ( errorCode { errorInfo } )”; Parameter: &quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot; ]</StepText>
							<Calculation><![CDATA["$errorCode = GetAsNumber ( " & $errorCode & " ) ;¶"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;</Chunk>
							</DisplayCalculation>
							<Script id="130" name="Log Writer: FM: Config: Handle Error ( errorCode { errorInfo } )"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
			</Group>
			<Group groupCollapsed="True" includeInMenu="False" id="126" name="Log Writer: FM: Config">
				<Script includeInMenu="False" runFullAccess="False" id="134" name="Log Writer: FM: Config: Get">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Return general-purpose module configuration values.</StepText>
							<Text>    Return general-purpose module configuration values.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS:</StepText>
							<Text> RETURNS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    configuration options stored as name/value pairs in Let format</StepText>
							<Text>    configuration options stored as name/value pairs in Let format</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-14	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-14	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $openNewWindow; Value:False/** *	config option:	$openNewWindow *	default value: 	False *	data type:	Boolean * *	If true, will open a new window every time a log entry is made; never use the &quot;Go to Layout&quot; step from the current window. */ ]</StepText>
							<Value>
								<Calculation><![CDATA[False/** *	config option:	$openNewWindow *	default value: 	False *	data type:	Boolean * *	If true, will open a new window every time a log entry is made; never use the "Go to Layout" step from the current window. */]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">False</Chunk>
									<Chunk type="NoRef">/** *	config option:	$openNewWindow *	default value: 	False *	data type:	Boolean * *	If true, will open a new window every time a log entry is made; never use the &quot;Go to Layout&quot; step from the current window. */</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$openNewWindow</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: &quot;$config.openNewWindow = GetAsBoolean ( &quot; &amp; $openNewWindow &amp; &quot; ) ;¶&quot; ]</StepText>
							<Calculation><![CDATA["$config.openNewWindow = GetAsBoolean ( " & $openNewWindow & " ) ;¶"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$config.openNewWindow = GetAsBoolean ( &quot; &amp; $openNewWindow &amp; &quot; ) ;¶&quot;</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="128" name="Log Writer: FM: Config: Open New Window">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Save a set of name/value pairs (dictionary) to a new record in a logging table.</StepText>
							<Text>    Save a set of name/value pairs (dictionary) to a new record in a logging table.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: (let notation)</StepText>
							<Text> RETURNS: (let notation)</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    errorCode | number | error code encountered in this script. This will be evaluated as a boolean to determine if this script succeeded or failed.</StepText>
							<Text>    errorCode | number | error code encountered in this script. This will be evaluated as a boolean to determine if this script succeeded or failed.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-14	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-14	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $errorCode; Value:0 ]</StepText>
							<Value>
								<Calculation><![CDATA[0]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">0</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$errorCode</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># possible items that should be considered in this script:</StepText>
							<Text> possible items that should be considered in this script:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    - disable script triggers</StepText>
							<Text>    - disable script triggers</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    - maintain window maximized state (Windows only)- this can be done by not specifying a size/location of the new window</StepText>
							<Text>    - maintain window maximized state (Windows only)- this can be done by not specifying a size/location of the new window</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#        TODO: publish and link to IsWindowMaximized function</StepText>
							<Text>        TODO: publish and link to IsWindowMaximized function</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    - </StepText>
							<Text>    - </Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="122" name="New Window">
							<StepText>New Window (VIRTUAL WINDOW ON WEB)  [ Name: Get( ScriptName ); Height: 0; Width: 0; Top: Get( ScreenHeight ); Left: 0; Style: Document; Close: “Yes”; Minimize: “Yes”; Maximize: “Yes”; Zoom Control Area: “Yes”; Resize: “Yes” ]</StepText>
							<Name>
								<Calculation><![CDATA[Get( ScriptName )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef">( </Chunk>
									<Chunk type="FunctionRef">ScriptName</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Name>
							<Height>
								<Calculation><![CDATA[0]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">0</Chunk>
								</DisplayCalculation>
							</Height>
							<Width>
								<Calculation><![CDATA[0]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">0</Chunk>
								</DisplayCalculation>
							</Width>
							<DistanceFromTop>
								<Calculation><![CDATA[Get( ScreenHeight )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef">( </Chunk>
									<Chunk type="FunctionRef">ScreenHeight</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</DistanceFromTop>
							<DistanceFromLeft>
								<Calculation><![CDATA[0]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">0</Chunk>
								</DisplayCalculation>
							</DistanceFromLeft>
							<NewWndStyles Styles="983554"/>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $errorCode; Value:Get ( LastError ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( LastError )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">LastError</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$errorCode</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: &quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot; ]</StepText>
							<Calculation><![CDATA["$errorCode = GetAsNumber ( " & $errorCode & " ) ;¶"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="129" name="Log Writer: FM: Config: Go To Layout ( layoutNumber )">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Go to a layout by specified number.</StepText>
							<Text>    Go to a layout by specified number.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: (let notation)</StepText>
							<Text> PARAMETERS: (let notation)</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    layoutNumber | layout number to go to</StepText>
							<Text>    layoutNumber | layout number to go to</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: (let notation)</StepText>
							<Text> RETURNS: (let notation)</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    errorCode | number | error code encountered in this script. This will be evaluated as a boolean to determine if this script succeeded or failed.</StepText>
							<Text>    errorCode | number | error code encountered in this script. This will be evaluated as a boolean to determine if this script succeeded or failed.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-14	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-14	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $errorCode; Value:0 ]</StepText>
							<Value>
								<Calculation><![CDATA[0]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">0</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$errorCode</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># possible items that should be considered in this script:</StepText>
							<Text> possible items that should be considered in this script:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    - if the layout contains a script trigger that creates a log entry, an infinite loop will be created unless script triggers are disabled</StepText>
							<Text>    - if the layout contains a script trigger that creates a log entry, an infinite loop will be created unless script triggers are disabled</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    - if the layout contains a script trigger that enfores a required state (like going to an appropriate hidden tab panel), then layout triggers should not be disabled TODO: if layout triggers are defined to restore tab order, then they need to be enabled before returning to the previous layout</StepText>
							<Text>    - if the layout contains a script trigger that enfores a required state (like going to an appropriate hidden tab panel), then layout triggers should not be disabled TODO: if layout triggers are defined to restore tab order, then they need to be enabled before returning to the previous layout</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    - if the layout contains a script trigger that restores tab order, then disabling layout triggers will prevent the tab order from being restored</StepText>
							<Text>    - if the layout contains a script trigger that restores tab order, then disabling layout triggers will prevent the tab order from being restored</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    - </StepText>
							<Text>    - </Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># ASSIGN PARAMETERS</StepText>
							<Text> ASSIGN PARAMETERS</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $!; Value:// Save script parameter to local variablesLet ( [	~data = Get ( ScriptParameter ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	&quot;&quot;) ]</StepText>
							<Value>
								<Calculation><![CDATA[// Save script parameter to local variablesLet ( [	~data = Get ( ScriptParameter ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			"Let ( [¶"			& ~data 			& "¶! = \"\" ] ; \"\" )"		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	"")]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">// Save script parameter to local variables</Chunk>
									<Chunk type="NoRef"></Chunk>
									<Chunk type="FunctionRef">Let</Chunk>
									<Chunk type="NoRef"> ( [	~data = </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptParameter</Chunk>
									<Chunk type="NoRef"> ) ;	~evaluationErrorCode = 		</Chunk>
									<Chunk type="FunctionRef">EvaluationError</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Evaluate</Chunk>
									<Chunk type="NoRef"> (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = </Chunk>
									<Chunk type="FunctionRef">If</Chunk>
									<Chunk type="NoRef"> ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	&quot;&quot;)</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$!</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># GO TO LAYOUT</StepText>
							<Text> GO TO LAYOUT</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ not $errorCode ]</StepText>
							<Calculation><![CDATA[not $errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> $errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="6" name="Go to Layout">
							<StepText>Go to Layout [ $layoutNumber ]</StepText>
							<LayoutDestination value="LayoutNumberByCalc"/>
							<Layout>
								<Calculation><![CDATA[$layoutNumber]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">$layoutNumber</Chunk>
								</DisplayCalculation>
							</Layout>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $errorCode; Value:Get ( LastError ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( LastError )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">LastError</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$errorCode</Name>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: &quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot; ]</StepText>
							<Calculation><![CDATA["$errorCode = GetAsNumber ( " & $errorCode & " ) ;¶"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="130" name="Log Writer: FM: Config: Handle Error ( errorCode { errorInfo } )">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Handle an error that occured in this module.</StepText>
							<Text>    Handle an error that occured in this module.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: (let notation)</StepText>
							<Text> PARAMETERS: (let notation)</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    errorCode | numeric value representing the code of the error encountered.</StepText>
							<Text>    errorCode | numeric value representing the code of the error encountered.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    errorInfo | text explaination of the error.</StepText>
							<Text>    errorInfo | text explaination of the error.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-FEB-03	 Daniel Smith	- add errorInfo parameter2014-JAN-14	 Daniel Smith	- Created</StepText>
							<Text>    2014-FEB-03	 Daniel Smith	- add errorInfo parameter2014-JAN-14	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># ASSIGN PARAMETERS</StepText>
							<Text> ASSIGN PARAMETERS</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $!; Value:// Save script parameter to local variablesLet ( [	~data = Get ( ScriptParameter ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	&quot;&quot;) ]</StepText>
							<Value>
								<Calculation><![CDATA[// Save script parameter to local variablesLet ( [	~data = Get ( ScriptParameter ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			"Let ( [¶"			& ~data 			& "! = \"\" ] ; \"\" )"		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	"")]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">// Save script parameter to local variables</Chunk>
									<Chunk type="NoRef"></Chunk>
									<Chunk type="FunctionRef">Let</Chunk>
									<Chunk type="NoRef"> ( [	~data = </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptParameter</Chunk>
									<Chunk type="NoRef"> ) ;	~evaluationErrorCode = 		</Chunk>
									<Chunk type="FunctionRef">EvaluationError</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Evaluate</Chunk>
									<Chunk type="NoRef"> (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = </Chunk>
									<Chunk type="FunctionRef">If</Chunk>
									<Chunk type="NoRef"> ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	&quot;&quot;)</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$!</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Left ( Get ( ApplicationVersion ) ; 3 ) = &quot;Pro&quot;orLeft ( Get ( ApplicationVersion ) ; 7 ) = &quot;Runtime&quot;orGet ( ScriptParameter ) = 3	 // iOSorGet ( ScriptParameter ) = 4	 // WebDirect ]</StepText>
							<Calculation><![CDATA[Left ( Get ( ApplicationVersion ) ; 3 ) = "Pro"orLeft ( Get ( ApplicationVersion ) ; 7 ) = "Runtime"orGet ( ScriptParameter ) = 3	 // iOSorGet ( ScriptParameter ) = 4	 // WebDirect]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ; 3 ) = &quot;Pro&quot;</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ; 7 ) = &quot;Runtime&quot;</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) = 3	 </Chunk>
								<Chunk type="FunctionRef">// iOS</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) = 4	 </Chunk>
								<Chunk type="FunctionRef">// WebDirect</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;Error&quot;; Message: &quot;Log Writer: FM module encountered an error.&quot;&amp; ¶&amp; $errorCode&amp; &quot;: &quot;&amp; $errorInfo; Default Button: “OK”, Commit: “Yes” ]</StepText>
							<Title>
								<Calculation><![CDATA["Error"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Error&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA["Log Writer: FM module encountered an error."& ¶& $errorCode& ": "& $errorInfo]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Log Writer: FM module encountered an error.&quot;&amp; ¶&amp; $errorCode&amp; &quot;: &quot;&amp; $errorInfo</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;OK&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False"/>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="True" runFullAccess="False" id="136" name="Log Writer: FM: Config: Test Installation">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Check to see if the module is fully installed and working.</StepText>
							<Text>    Check to see if the module is fully installed and working.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: global</StepText>
							<Text> CONTEXT: global</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># DEPENDENCIES: none</StepText>
							<Text> DEPENDENCIES: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-28	 Daniel Smith	- updated tests2014-JAN-14	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-28	 Daniel Smith	- updated tests2014-JAN-14	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $logData; Value:&quot;$logLevel = 1 ;¶&quot;&amp; &quot;$accountName = &quot; &amp; Quote ( Get ( AccountName ) ) &amp; &quot; ;¶&quot;&amp; &quot;$errorType = \&quot;mFM: Log Writer: FM\&quot; ;¶&quot;&amp; &quot;$errorCode = 0 ;¶&quot;&amp; &quot;$errorDescription = \&quot;no error\&quot; ;¶&quot;&amp; &quot;$errorInfo = \&quot;testing installation of module\&quot; ;¶&quot;&amp; &quot;$scriptName = &quot; &amp; Quote ( Get ( ScriptName ) ) &amp; &quot; ;¶&quot;&amp; &quot;$scriptParameter = Random ;¶&quot; ]</StepText>
							<Value>
								<Calculation><![CDATA["$logLevel = 1 ;¶"& "$accountName = " & Quote ( Get ( AccountName ) ) & " ;¶"& "$errorType = \"mFM: Log Writer: FM\" ;¶"& "$errorCode = 0 ;¶"& "$errorDescription = \"no error\" ;¶"& "$errorInfo = \"testing installation of module\" ;¶"& "$scriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"& "$scriptParameter = Random ;¶"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;$logLevel = 1 ;¶&quot;&amp; &quot;$accountName = &quot; &amp; </Chunk>
									<Chunk type="FunctionRef">Quote</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">AccountName</Chunk>
									<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$errorType = \&quot;mFM: Log Writer: FM\&quot; ;¶&quot;&amp; &quot;$errorCode = 0 ;¶&quot;&amp; &quot;$errorDescription = \&quot;no error\&quot; ;¶&quot;&amp; &quot;$errorInfo = \&quot;testing installation of module\&quot; ;¶&quot;&amp; &quot;$scriptName = &quot; &amp; </Chunk>
									<Chunk type="FunctionRef">Quote</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptName</Chunk>
									<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$scriptParameter = Random ;¶&quot;</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$logData</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $testName; Value:&quot;TEST 1: simple log entry&quot; ]</StepText>
							<Value>
								<Calculation><![CDATA["TEST 1: simple log entry"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;TEST 1: simple log entry&quot;</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$testName</Name>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;starting&quot;; Message: $testName; Default Button: “OK”, Commit: “Yes”; Button 2: “Cancel”, Commit: “No” ]</StepText>
							<Title>
								<Calculation><![CDATA["starting"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;starting&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA[$testName]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">$testName</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;OK&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False">
									<Calculation><![CDATA["Cancel"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;Cancel&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( LastMessageChoice ) = 2	 // Cancel ]</StepText>
							<Calculation><![CDATA[Get ( LastMessageChoice ) = 2	 // Cancel]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastMessageChoice</Chunk>
								<Chunk type="NoRef"> ) = 2	 </Chunk>
								<Chunk type="FunctionRef">// Cancel</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: $logData ]</StepText>
							<Calculation><![CDATA[$logData]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$logData</Chunk>
							</DisplayCalculation>
							<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $testName; Value:&quot;TEST 2: create entry when the current record is open&quot; ]</StepText>
							<Value>
								<Calculation><![CDATA["TEST 2: create entry when the current record is open"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;TEST 2: create entry when the current record is open&quot;</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$testName</Name>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;starting&quot;; Message: $testName; Default Button: “OK”, Commit: “Yes”; Button 2: “Cancel”, Commit: “No” ]</StepText>
							<Title>
								<Calculation><![CDATA["starting"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;starting&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA[$testName]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">$testName</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;OK&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False">
									<Calculation><![CDATA["Cancel"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;Cancel&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( LastMessageChoice ) = 2	 // Cancel ]</StepText>
							<Calculation><![CDATA[Get ( LastMessageChoice ) = 2	 // Cancel]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastMessageChoice</Chunk>
								<Chunk type="NoRef"> ) = 2	 </Chunk>
								<Chunk type="FunctionRef">// Cancel</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="133" name="Open Record/Request">
							<StepText>Open Record/Request</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ not Get ( RecordOpenState ) ]</StepText>
							<Calculation><![CDATA[not Get ( RecordOpenState )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">RecordOpenState</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: $testName; Message: &quot;Record could not be opened, so this test was not run.&quot;; Default Button: “OK”, Commit: “Yes” ]</StepText>
							<Title>
								<Calculation><![CDATA[$testName]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">$testName</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA["Record could not be opened, so this test was not run."]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Record could not be opened, so this test was not run.&quot;</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;OK&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False"/>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="69" name="Else">
							<StepText>Else</StepText>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: $logData ]</StepText>
							<Calculation><![CDATA[$logData]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$logData</Chunk>
							</DisplayCalculation>
							<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ not Get ( RecordOpenState ) ]</StepText>
							<Calculation><![CDATA[not Get ( RecordOpenState )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">RecordOpenState</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: $testName; Message: &quot;Error: An open record was commited when the Log Writer module ran.&quot;; Default Button: “OK”, Commit: “Yes” ]</StepText>
							<Title>
								<Calculation><![CDATA[$testName]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">$testName</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA["Error: An open record was commited when the Log Writer module ran."]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Error: An open record was commited when the Log Writer module ran.&quot;</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;OK&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False"/>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># TODO: go to a layout NOT based on the correct TO to test alternate logic paths</StepText>
							<Text> TODO: go to a layout NOT based on the correct TO to test alternate logic paths</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;Test Finished&quot;; Message: &quot;If you did not see a dialog box, the test likely passed. To confirm, review the log for an entry just created.&quot;; Default Button: “OK”, Commit: “Yes” ]</StepText>
							<Title>
								<Calculation><![CDATA["Test Finished"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Test Finished&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA["If you did not see a dialog box, the test likely passed. To confirm, review the log for an entry just created."]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;If you did not see a dialog box, the test likely passed. To confirm, review the log for an entry just created.&quot;</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
								</Button>
								<Button CommitState="False"/>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Group groupCollapsed="False" includeInMenu="False" id="132" name="Log Writer: FM: Config: Hook">
					<Script includeInMenu="False" runFullAccess="False" id="131" name="Log Writer: FM: Config: Hook: After Setting LogData">
						<StepList>
							<Step enable="True" id="89" name="Comment">
								<StepText>################################################################################</StepText>
								<Text>###############################################################################</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText># PURPOSE:</StepText>
								<Text> PURPOSE:</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#    Allow custom steps to be performed at a specified point in the module.</StepText>
								<Text>    Allow custom steps to be performed at a specified point in the module.</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText># PARAMETERS: none</StepText>
								<Text> PARAMETERS: none</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText># RETURNS: (let notation)</StepText>
								<Text> RETURNS: (let notation)</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#    errorCode | number | error code encountered in this script. This will be evaluated as a boolean to determine if this script succeeded or failed.</StepText>
								<Text>    errorCode | number | error code encountered in this script. This will be evaluated as a boolean to determine if this script succeeded or failed.</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText># NOTES:</StepText>
								<Text> NOTES:</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#    This script is run after a record is created and the logData is set to the field. The record is still open and uncommitted so exiting this script with an error code will cause the record to be reverted.</StepText>
								<Text>    This script is run after a record is created and the logData is set to the field. The record is still open and uncommitted so exiting this script with an error code will cause the record to be reverted.</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText># REVISIONS:</StepText>
								<Text> REVISIONS:</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#    2014-JAN-14	 Daniel Smith	- Created</StepText>
								<Text>    2014-JAN-14	 Daniel Smith	- Created</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>################################################################################</StepText>
								<Text>###############################################################################</Text>
							</Step>
							<Step enable="True" id="141" name="Set Variable">
								<StepText>Set Variable [ $errorCode; Value:0 ]</StepText>
								<Value>
									<Calculation><![CDATA[0]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">0</Chunk>
									</DisplayCalculation>
								</Value>
								<Repetition>
									<Calculation><![CDATA[1]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">1</Chunk>
									</DisplayCalculation>
								</Repetition>
								<Name>$errorCode</Name>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="103" name="Exit Script">
								<StepText>Exit Script [ Result: &quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot; ]</StepText>
								<Calculation><![CDATA["$errorCode = GetAsNumber ( " & $errorCode & " ) ;¶"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;</Chunk>
								</DisplayCalculation>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
						</StepList>
					</Script>
				</Group>
			</Group>
		</Group>
		<Group groupCollapsed="True" includeInMenu="False" id="184" name="Log Writer: FM BaseElements">
			<Script includeInMenu="False" runFullAccess="False" id="185" name="-">
				<StepList/>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="186" name="Log Writer: FM BaseElements: README">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>#########################################################################</StepText>
						<Text>########################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Log Writer: FM BaseElements</StepText>
						<Text> Log Writer: FM BaseElements</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Created by Daniel Smith, dansmith65@gmail.com</StepText>
						<Text> Created by Daniel Smith, dansmith65@gmail.com</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#	</StepText>
						<Text>	</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Write log data to a FileMaker table using BaseElements plugin.</StepText>
						<Text> Write log data to a FileMaker table using BaseElements plugin.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#	</StepText>
						<Text>	</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#########################################################################</StepText>
						<Text>########################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># REQUIRES</StepText>
						<Text> REQUIRES</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        PlugIn: BaseElements</StepText>
						<Text>        PlugIn: BaseElements</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># INTEGRATION</StepText>
						<Text> INTEGRATION</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        1. import module script folder</StepText>
						<Text>        1. import module script folder</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        2. adjust privileges:</StepText>
						<Text>        2. adjust privileges:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                To allow a user to create log entries:</StepText>
						<Text>                To allow a user to create log entries:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        Scripts</StepText>
						<Text>                        Scripts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - run all scripts in the module folder</StepText>
						<Text>                                - run all scripts in the module folder</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># INSTRUCTIONS FOR USE</StepText>
						<Text> INSTRUCTIONS FOR USE</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - install Logger module in every file that will write data to this log</StepText>
						<Text>        - install Logger module in every file that will write data to this log</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - point Logger module to script: &quot;Log Writer: FM BaseElements: Create Entry( logData )&quot;</StepText>
						<Text>        - point Logger module to script: &quot;Log Writer: FM BaseElements: Create Entry( logData )&quot;</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># LICENSE:</StepText>
						<Text> LICENSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        The MIT License (MIT)Copyright (c) 2014 Daniel SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</StepText>
						<Text>        The MIT License (MIT)Copyright (c) 2014 Daniel SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="187" name="Log Writer: FM BaseElements: Version 1.0.0-beta1">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># PURPOSE:</StepText>
						<Text> PURPOSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Return the version number of this module.</StepText>
						<Text>    Return the version number of this module.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># RETURNS:</StepText>
						<Text> RETURNS:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    version string portion of the script name</StepText>
						<Text>    version string portion of the script name</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># NOTES:</StepText>
						<Text> NOTES:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    http://filemakerstandards.org/display/bp/Default+scripts</StepText>
						<Text>    http://filemakerstandards.org/display/bp/Default+scripts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    This guideline was heavily influenced by http://semver.org/spec/v2.0.0-rc.1.html</StepText>
						<Text>    This guideline was heavily influenced by http://semver.org/spec/v2.0.0-rc.1.html</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Changelog: Summary is formatted with markdown: http://daringfireball.net/projects/markdown/- use different header &apos;tag&apos; (#&apos;s) depending on the version being incrementedMajor: H1Minor: H2Patch: H3</StepText>
						<Text>    Changelog: Summary is formatted with markdown: http://daringfireball.net/projects/markdown/- use different header &apos;tag&apos; (#&apos;s) depending on the version being incrementedMajor: H1Minor: H2Patch: H3</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $scriptResult; Value:// return script version string portion of script nameLet ( [	~text = Get ( ScriptName ) ;	~firstNumber = Left ( Filter ( ~text  ; &quot;0123456789&quot; ) ; 1 ) ;	~firstNumberPosition = Position ( ~text ; ~firstNumber ; 1 ; 1 )] ;	Right ( ~text ; Length ( ~text ) - ~firstNumberPosition + 1 )) ]</StepText>
						<Value>
							<Calculation><![CDATA[// return script version string portion of script nameLet ( [	~text = Get ( ScriptName ) ;	~firstNumber = Left ( Filter ( ~text  ; "0123456789" ) ; 1 ) ;	~firstNumberPosition = Position ( ~text ; ~firstNumber ; 1 ; 1 )] ;	Right ( ~text ; Length ( ~text ) - ~firstNumberPosition + 1 ))]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// return script version string portion of script name</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~text = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptName</Chunk>
								<Chunk type="NoRef"> ) ;	~firstNumber = </Chunk>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Filter</Chunk>
								<Chunk type="NoRef"> ( ~text  ; &quot;0123456789&quot; ) ; 1 ) ;	~firstNumberPosition = </Chunk>
								<Chunk type="FunctionRef">Position</Chunk>
								<Chunk type="NoRef"> ( ~text ; ~firstNumber ; 1 ; 1 )] ;	</Chunk>
								<Chunk type="FunctionRef">Right</Chunk>
								<Chunk type="NoRef"> ( ~text ; </Chunk>
								<Chunk type="FunctionRef">Length</Chunk>
								<Chunk type="NoRef"> ( ~text ) - ~firstNumberPosition + 1 ))</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$scriptResult</Name>
					</Step>
					<Step enable="True" id="103" name="Exit Script">
						<StepText>Exit Script [ Result: $scriptResult ]</StepText>
						<Calculation><![CDATA[$scriptResult]]></Calculation>
						<DisplayCalculation>
							<Chunk type="NoRef">$scriptResult</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># MAJOR.MINOR.PATCH{-PRERELEASE}{+}</StepText>
						<Text> MAJOR.MINOR.PATCH{-PRERELEASE}{+}</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    MAJOR:    Arbitrarily defined by the developer, but must introduce significant change to either the feature set, or the internal method of processing.</StepText>
						<Text>    MAJOR:    Arbitrarily defined by the developer, but must introduce significant change to either the feature set, or the internal method of processing.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    MINOR:    New features. Should be incremented whenever a new feature is added.</StepText>
						<Text>    MINOR:    New features. Should be incremented whenever a new feature is added.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    PATCH:    Bug fixes. Should not introduce new features (unless the lack of that feature can be considered a bug).</StepText>
						<Text>    PATCH:    Bug fixes. Should not introduce new features (unless the lack of that feature can be considered a bug).</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    {-PRERELEASE}    OPTIONAL    A pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.This value can be compaired as text in FileMaker, and the following will be true:  &quot;alpha&quot; &lt; &quot;beta&quot; and &quot;alpha&quot; &lt; &quot;rc&quot; and &quot;beta&quot; &lt; &quot;rc&quot;.</StepText>
						<Text>    {-PRERELEASE}    OPTIONAL    A pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.This value can be compaired as text in FileMaker, and the following will be true:  &quot;alpha&quot; &lt; &quot;beta&quot; and &quot;alpha&quot; &lt; &quot;rc&quot; and &quot;beta&quot; &lt; &quot;rc&quot;.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    {+}    OPTIONAL    If the file has been modified since the version was last incremented, and the version does not need to be incremented yet (still under development), append the version string with a +.</StepText>
						<Text>    {+}    OPTIONAL    If the file has been modified since the version was last incremented, and the version does not need to be incremented yet (still under development), append the version string with a +.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># These guidelines should be followed:</StepText>
						<Text> These guidelines should be followed:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Use decimal separated text to store the version.</StepText>
						<Text>    Use decimal separated text to store the version.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    When evaluating the version, MUST NOT convert the entire text to a number. Each decimal separated section must be evaluated individually, and in order. Here is a possible method of doing so:Let ( [	ver = &quot;1.2.21&quot; ;	// extract pre-release version string	ver = Substitute ( ver ; &quot;-&quot; ; ¶ ) ;	preRelease = GetValue ( ver ; 2 ) ;	// extract normal version string	ver = GetValue ( ver ; 1 ) ;	ver = Substitute ( ver ; &quot;.&quot; ; ¶ ) ;	major = GetAsNumber ( GetValue ( ver ; 1 ) ) ;	minor = GetAsNumber ( GetValue ( ver ; 2 ) ) ;	patch = GetAsNumber ( GetValue ( ver ; 3 ) )] ;	// evaluate version	Case (		major = 0 ;		&quot;initial development&quot; ;				major = 1 ;		&quot;first public release&quot;	))</StepText>
						<Text>    When evaluating the version, MUST NOT convert the entire text to a number. Each decimal separated section must be evaluated individually, and in order. Here is a possible method of doing so:Let ( [	ver = &quot;1.2.21&quot; ;	// extract pre-release version string	ver = Substitute ( ver ; &quot;-&quot; ; ¶ ) ;	preRelease = GetValue ( ver ; 2 ) ;	// extract normal version string	ver = GetValue ( ver ; 1 ) ;	ver = Substitute ( ver ; &quot;.&quot; ; ¶ ) ;	major = GetAsNumber ( GetValue ( ver ; 1 ) ) ;	minor = GetAsNumber ( GetValue ( ver ; 2 ) ) ;	patch = GetAsNumber ( GetValue ( ver ; 3 ) )] ;	// evaluate version	Case (		major = 0 ;		&quot;initial development&quot; ;				major = 1 ;		&quot;first public release&quot;	))</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Summarize the changes of each version in a single comment step below.</StepText>
						<Text>    Summarize the changes of each version in a single comment step below.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ==============================================================================</StepText>
						<Text> ==============================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># CHANGELOG</StepText>
						<Text> CHANGELOG</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ==============================================================================</StepText>
						<Text> ==============================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>## 1.0.0 #- initial release</StepText>
						<Text># 1.0.0 #- initial release</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="188" name="-">
				<StepList/>
			</Script>
			<Group groupCollapsed="True" includeInMenu="False" id="196" name="Log Writer: FM BaseElements: Public">
				<Script includeInMenu="False" runFullAccess="False" id="189" name="Log Writer: FM BaseElements: Create Entry ( logData )">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Save a set of name/value pairs (dictionary) to a new record in a logging table.</StepText>
							<Text>    Save a set of name/value pairs (dictionary) to a new record in a logging table.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: global</StepText>
							<Text> CONTEXT: global</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS:</StepText>
							<Text> PARAMETERS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    entire script parameter is the data to log, in whichever format you choose.</StepText>
							<Text>    entire script parameter is the data to log, in whichever format you choose.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Since this script will often be used for logging errors, it does not generate any errors itself to prevent infinite recursion.</StepText>
							<Text>    Since this script will often be used for logging errors, it does not generate any errors itself to prevent infinite recursion.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Not returning a result also preserves the value of Get ( ScriptResult ) in the calling script.</StepText>
							<Text>    Not returning a result also preserves the value of Get ( ScriptResult ) in the calling script.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># DEPENDENCIES: none</StepText>
							<Text> DEPENDENCIES: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-FEB-03	 Daniel Smith	- return an error code	- send the correct error code to error handling script2014-JAN-29	 Daniel Smith	- Created</StepText>
							<Text>    2014-FEB-03	 Daniel Smith	- return an error code	- send the correct error code to error handling script2014-JAN-29	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># ASSIGN PARAMETERS</StepText>
							<Text> ASSIGN PARAMETERS</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $logData; Value:Get ( ScriptParameter ) &amp; LogDataSession ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( ScriptParameter ) & LogDataSession]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptParameter</Chunk>
									<Chunk type="NoRef"> ) &amp; </Chunk>
									<Chunk type="CustomFunctionRef">LogDataSession</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$logData</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CREATE RECORD</StepText>
							<Text> CREATE RECORD</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $sqlResult; Value:Let ( [	~tableName = GetValue ( Substitute ( GetFieldName ( Log::logData ) ; &quot;::&quot; ; ¶ ) ; 1 ) ;	~fieldName = GetValue ( Substitute ( GetFieldName ( Log::logData ) ; &quot;::&quot; ; ¶ ) ; 2 ) ;	$sqlQuery =		&quot;INSERT INTO &quot; &amp; Quote ( ~tableName ) &amp; &quot; ( &quot;			&amp; Quote ( ~fieldName )		&amp; &quot; ) &quot;		&amp; &quot;¶VALUES ( &quot;			&amp; &quot;&apos;&quot; &amp; Substitute ( $logData ; &quot;&apos;&quot;; &quot;&apos;&apos;&quot; ) &amp; &quot;&apos;&quot;		&amp; &quot; )&quot;] ;	BE_FileMakerSQL ( $sqlQuery )) ]</StepText>
							<Value>
								<Calculation><![CDATA[Let ( [	~tableName = GetValue ( Substitute ( GetFieldName ( Log::logData ) ; "::" ; ¶ ) ; 1 ) ;	~fieldName = GetValue ( Substitute ( GetFieldName ( Log::logData ) ; "::" ; ¶ ) ; 2 ) ;	$sqlQuery =		"INSERT INTO " & Quote ( ~tableName ) & " ( "			& Quote ( ~fieldName )		& " ) "		& "¶VALUES ( "			& "'" & Substitute ( $logData ; "'"; "''" ) & "'"		& " )"] ;	BE_FileMakerSQL ( $sqlQuery ))]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Let</Chunk>
									<Chunk type="NoRef"> ( [	~tableName = </Chunk>
									<Chunk type="FunctionRef">GetValue</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Substitute</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">GetFieldName</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FieldRef">
										<Field table="Log" id="2" name="logData"/>
									</Chunk>
									<Chunk type="NoRef"> ) ; &quot;::&quot; ; ¶ ) ; 1 ) ;	~fieldName = </Chunk>
									<Chunk type="FunctionRef">GetValue</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Substitute</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">GetFieldName</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FieldRef">
										<Field table="Log" id="2" name="logData"/>
									</Chunk>
									<Chunk type="NoRef"> ) ; &quot;::&quot; ; ¶ ) ; 2 ) ;	$sqlQuery =		&quot;INSERT INTO &quot; &amp; </Chunk>
									<Chunk type="FunctionRef">Quote</Chunk>
									<Chunk type="NoRef"> ( ~tableName ) &amp; &quot; ( &quot;			&amp; </Chunk>
									<Chunk type="FunctionRef">Quote</Chunk>
									<Chunk type="NoRef"> ( ~fieldName )		&amp; &quot; ) &quot;		&amp; &quot;¶VALUES ( &quot;			&amp; &quot;&apos;&quot; &amp; </Chunk>
									<Chunk type="FunctionRef">Substitute</Chunk>
									<Chunk type="NoRef"> ( $logData ; &quot;&apos;&quot;; &quot;&apos;&apos;&quot; ) &amp; &quot;&apos;&quot;		&amp; &quot; )&quot;] ;	</Chunk>
									<Chunk type="FunctionRef">BE_FileMakerSQL</Chunk>
									<Chunk type="NoRef"> ( $sqlQuery ))</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$sqlResult</Name>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $errorCode; Value:BE_GetLastError ]</StepText>
							<Value>
								<Calculation><![CDATA[BE_GetLastError]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">BE_GetLastError</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$errorCode</Name>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: FM BaseElements: Config: Handle Error ( errorCode )”; Parameter: &quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot; ]</StepText>
							<Calculation><![CDATA["$errorCode = GetAsNumber ( " & $errorCode & " ) ;¶"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;</Chunk>
							</DisplayCalculation>
							<Script id="193" name="Log Writer: FM BaseElements: Config: Handle Error ( errorCode )"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
			</Group>
			<Group groupCollapsed="True" includeInMenu="False" id="194" name="Log Writer: FM BaseElements: Config">
				<Script includeInMenu="False" runFullAccess="False" id="193" name="Log Writer: FM BaseElements: Config: Handle Error ( errorCode )">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Handle an error that occured in this module.</StepText>
							<Text>    Handle an error that occured in this module.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: (let notation)</StepText>
							<Text> PARAMETERS: (let notation)</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    errorCode | numeric value representing the code of the error encountered.</StepText>
							<Text>    errorCode | numeric value representing the code of the error encountered.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-14	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-14	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># ASSIGN PARAMETERS</StepText>
							<Text> ASSIGN PARAMETERS</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $!; Value:// Save script parameter to local variablesLet ( [	~data = Get ( ScriptParameter ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	&quot;&quot;) ]</StepText>
							<Value>
								<Calculation><![CDATA[// Save script parameter to local variablesLet ( [	~data = Get ( ScriptParameter ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			"Let ( [¶"			& ~data 			& "! = \"\" ] ; \"\" )"		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	"")]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">// Save script parameter to local variables</Chunk>
									<Chunk type="NoRef"></Chunk>
									<Chunk type="FunctionRef">Let</Chunk>
									<Chunk type="NoRef"> ( [	~data = </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptParameter</Chunk>
									<Chunk type="NoRef"> ) ;	~evaluationErrorCode = 		</Chunk>
									<Chunk type="FunctionRef">EvaluationError</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Evaluate</Chunk>
									<Chunk type="NoRef"> (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = </Chunk>
									<Chunk type="FunctionRef">If</Chunk>
									<Chunk type="NoRef"> ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	&quot;&quot;)</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$!</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Left ( Get ( ApplicationVersion ) ; 3 ) = &quot;Pro&quot;orLeft ( Get ( ApplicationVersion ) ; 7 ) = &quot;Runtime&quot;orGet ( ScriptParameter ) = 3	 // iOSorGet ( ScriptParameter ) = 4	 // WebDirect ]</StepText>
							<Calculation><![CDATA[Left ( Get ( ApplicationVersion ) ; 3 ) = "Pro"orLeft ( Get ( ApplicationVersion ) ; 7 ) = "Runtime"orGet ( ScriptParameter ) = 3	 // iOSorGet ( ScriptParameter ) = 4	 // WebDirect]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ; 3 ) = &quot;Pro&quot;</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ; 7 ) = &quot;Runtime&quot;</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) = 3	 </Chunk>
								<Chunk type="FunctionRef">// iOS</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) = 4	 </Chunk>
								<Chunk type="FunctionRef">// WebDirect</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;Error&quot;; Message: &quot;Log Writer: FM BaseElements module encountered an error:&quot;&amp; ¶&amp; BE_GetLastError; Default Button: “OK”, Commit: “Yes” ]</StepText>
							<Title>
								<Calculation><![CDATA["Error"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Error&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA["Log Writer: FM BaseElements module encountered an error:"& ¶& BE_GetLastError]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Log Writer: FM BaseElements module encountered an error:&quot;&amp; ¶&amp; </Chunk>
									<Chunk type="FunctionRef">BE_GetLastError</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
								</Button>
								<Button CommitState="False"/>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="True" runFullAccess="False" id="192" name="Log Writer: FM BaseElements: Config: Test Installation">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Check to see if the module is fully installed and working.</StepText>
							<Text>    Check to see if the module is fully installed and working.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: global</StepText>
							<Text> CONTEXT: global</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># DEPENDENCIES: none</StepText>
							<Text> DEPENDENCIES: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-29	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-29	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $logData; Value:&quot;$logLevel = 1 ;¶&quot;&amp; &quot;$accountName = &quot; &amp; Quote ( Get ( AccountName ) ) &amp; &quot; ;¶&quot;&amp; &quot;$errorType = \&quot;mFM: Log Writer: FM BaseElements\&quot; ;¶&quot;&amp; &quot;$errorCode = 0 ;¶&quot;&amp; &quot;$errorDescription = \&quot;no error\&quot; ;¶&quot;&amp; &quot;$errorInfo = \&quot;testing installation of module\&quot; ;¶&quot;&amp; &quot;$scriptName = &quot; &amp; Quote ( Get ( ScriptName ) ) &amp; &quot; ;¶&quot;&amp; &quot;$scriptParameter = Random ;¶&quot; ]</StepText>
							<Value>
								<Calculation><![CDATA["$logLevel = 1 ;¶"& "$accountName = " & Quote ( Get ( AccountName ) ) & " ;¶"& "$errorType = \"mFM: Log Writer: FM BaseElements\" ;¶"& "$errorCode = 0 ;¶"& "$errorDescription = \"no error\" ;¶"& "$errorInfo = \"testing installation of module\" ;¶"& "$scriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"& "$scriptParameter = Random ;¶"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;$logLevel = 1 ;¶&quot;&amp; &quot;$accountName = &quot; &amp; </Chunk>
									<Chunk type="FunctionRef">Quote</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">AccountName</Chunk>
									<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$errorType = \&quot;mFM: Log Writer: FM BaseElements\&quot; ;¶&quot;&amp; &quot;$errorCode = 0 ;¶&quot;&amp; &quot;$errorDescription = \&quot;no error\&quot; ;¶&quot;&amp; &quot;$errorInfo = \&quot;testing installation of module\&quot; ;¶&quot;&amp; &quot;$scriptName = &quot; &amp; </Chunk>
									<Chunk type="FunctionRef">Quote</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptName</Chunk>
									<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$scriptParameter = Random ;¶&quot;</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$logData</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: FM BaseElements: Create Entry ( logData )”; Parameter: $logData ]</StepText>
							<Calculation><![CDATA[$logData]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$logData</Chunk>
							</DisplayCalculation>
							<Script id="189" name="Log Writer: FM BaseElements: Create Entry ( logData )"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;Test Finished&quot;; Message: &quot;If you did not see a dialog box, the test likely passed. To confirm, review the log for an entry just created.&quot;; Default Button: “OK”, Commit: “Yes” ]</StepText>
							<Title>
								<Calculation><![CDATA["Test Finished"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Test Finished&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA["If you did not see a dialog box, the test likely passed. To confirm, review the log for an entry just created."]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;If you did not see a dialog box, the test likely passed. To confirm, review the log for an entry just created.&quot;</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
								</Button>
								<Button CommitState="False"/>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
			</Group>
		</Group>
		<Group groupCollapsed="True" includeInMenu="False" id="147" name="Log Writer: Email">
			<Script includeInMenu="False" runFullAccess="False" id="169" name="-">
				<StepList/>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="149" name="Log Writer: Email: README">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>#########################################################################</StepText>
						<Text>########################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Log Writer: Email</StepText>
						<Text> Log Writer: Email</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Created by Daniel Smith, dansmith65@gmail.com</StepText>
						<Text> Created by Daniel Smith, dansmith65@gmail.com</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#	</StepText>
						<Text>	</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Write log data to an email.</StepText>
						<Text> Write log data to an email.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#	</StepText>
						<Text>	</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#########################################################################</StepText>
						<Text>########################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># REQUIRES</StepText>
						<Text> REQUIRES</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># INTEGRATION</StepText>
						<Text> INTEGRATION</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        1. import module script folder</StepText>
						<Text>        1. import module script folder</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        2. adjust privileges:</StepText>
						<Text>        2. adjust privileges:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                To allow a user to create log entries:</StepText>
						<Text>                To allow a user to create log entries:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        Scripts</StepText>
						<Text>                        Scripts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - run all scripts in the module folder</StepText>
						<Text>                                - run all scripts in the module folder</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        3. modify &quot;Log Writer: Email: Send ( logData )&quot; script as necessary</StepText>
						<Text>        3. modify &quot;Log Writer: Email: Send ( logData )&quot; script as necessary</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># INSTRUCTIONS FOR USE</StepText>
						<Text> INSTRUCTIONS FOR USE</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - install Logger module in every file that will write data to this log</StepText>
						<Text>        - install Logger module in every file that will write data to this log</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - point Logger module to script: &quot;Log Writer: Email: Send ( logData )&quot;</StepText>
						<Text>        - point Logger module to script: &quot;Log Writer: Email: Send ( logData )&quot;</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># LICENSE:</StepText>
						<Text> LICENSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        The MIT License (MIT)Copyright (c) 2014 Daniel SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</StepText>
						<Text>        The MIT License (MIT)Copyright (c) 2014 Daniel SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="150" name="Log Writer: Email: Version 1.0.0-beta1">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># PURPOSE:</StepText>
						<Text> PURPOSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Return the version number of this module.</StepText>
						<Text>    Return the version number of this module.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># RETURNS:</StepText>
						<Text> RETURNS:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    version string portion of the script name</StepText>
						<Text>    version string portion of the script name</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># NOTES:</StepText>
						<Text> NOTES:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    http://filemakerstandards.org/display/bp/Default+scripts</StepText>
						<Text>    http://filemakerstandards.org/display/bp/Default+scripts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    This guideline was heavily influenced by http://semver.org/spec/v2.0.0-rc.1.html</StepText>
						<Text>    This guideline was heavily influenced by http://semver.org/spec/v2.0.0-rc.1.html</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Changelog: Summary is formatted with markdown: http://daringfireball.net/projects/markdown/- use different header &apos;tag&apos; (#&apos;s) depending on the version being incrementedMajor: H1Minor: H2Patch: H3</StepText>
						<Text>    Changelog: Summary is formatted with markdown: http://daringfireball.net/projects/markdown/- use different header &apos;tag&apos; (#&apos;s) depending on the version being incrementedMajor: H1Minor: H2Patch: H3</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $scriptResult; Value:// return script version string portion of script nameLet ( [	~text = Get ( ScriptName ) ;	~firstNumber = Left ( Filter ( ~text  ; &quot;0123456789&quot; ) ; 1 ) ;	~firstNumberPosition = Position ( ~text ; ~firstNumber ; 1 ; 1 )] ;	Right ( ~text ; Length ( ~text ) - ~firstNumberPosition + 1 )) ]</StepText>
						<Value>
							<Calculation><![CDATA[// return script version string portion of script nameLet ( [	~text = Get ( ScriptName ) ;	~firstNumber = Left ( Filter ( ~text  ; "0123456789" ) ; 1 ) ;	~firstNumberPosition = Position ( ~text ; ~firstNumber ; 1 ; 1 )] ;	Right ( ~text ; Length ( ~text ) - ~firstNumberPosition + 1 ))]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// return script version string portion of script name</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~text = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptName</Chunk>
								<Chunk type="NoRef"> ) ;	~firstNumber = </Chunk>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Filter</Chunk>
								<Chunk type="NoRef"> ( ~text  ; &quot;0123456789&quot; ) ; 1 ) ;	~firstNumberPosition = </Chunk>
								<Chunk type="FunctionRef">Position</Chunk>
								<Chunk type="NoRef"> ( ~text ; ~firstNumber ; 1 ; 1 )] ;	</Chunk>
								<Chunk type="FunctionRef">Right</Chunk>
								<Chunk type="NoRef"> ( ~text ; </Chunk>
								<Chunk type="FunctionRef">Length</Chunk>
								<Chunk type="NoRef"> ( ~text ) - ~firstNumberPosition + 1 ))</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$scriptResult</Name>
					</Step>
					<Step enable="True" id="103" name="Exit Script">
						<StepText>Exit Script [ Result: $scriptResult ]</StepText>
						<Calculation><![CDATA[$scriptResult]]></Calculation>
						<DisplayCalculation>
							<Chunk type="NoRef">$scriptResult</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># MAJOR.MINOR.PATCH{-PRERELEASE}{+}</StepText>
						<Text> MAJOR.MINOR.PATCH{-PRERELEASE}{+}</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    MAJOR:    Arbitrarily defined by the developer, but must introduce significant change to either the feature set, or the internal method of processing.</StepText>
						<Text>    MAJOR:    Arbitrarily defined by the developer, but must introduce significant change to either the feature set, or the internal method of processing.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    MINOR:    New features. Should be incremented whenever a new feature is added.</StepText>
						<Text>    MINOR:    New features. Should be incremented whenever a new feature is added.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    PATCH:    Bug fixes. Should not introduce new features (unless the lack of that feature can be considered a bug).</StepText>
						<Text>    PATCH:    Bug fixes. Should not introduce new features (unless the lack of that feature can be considered a bug).</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    {-PRERELEASE}    OPTIONAL    A pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.This value can be compaired as text in FileMaker, and the following will be true:  &quot;alpha&quot; &lt; &quot;beta&quot; and &quot;alpha&quot; &lt; &quot;rc&quot; and &quot;beta&quot; &lt; &quot;rc&quot;.</StepText>
						<Text>    {-PRERELEASE}    OPTIONAL    A pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.This value can be compaired as text in FileMaker, and the following will be true:  &quot;alpha&quot; &lt; &quot;beta&quot; and &quot;alpha&quot; &lt; &quot;rc&quot; and &quot;beta&quot; &lt; &quot;rc&quot;.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    {+}    OPTIONAL    If the file has been modified since the version was last incremented, and the version does not need to be incremented yet (still under development), append the version string with a +.</StepText>
						<Text>    {+}    OPTIONAL    If the file has been modified since the version was last incremented, and the version does not need to be incremented yet (still under development), append the version string with a +.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># These guidelines should be followed:</StepText>
						<Text> These guidelines should be followed:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Use decimal separated text to store the version.</StepText>
						<Text>    Use decimal separated text to store the version.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    When evaluating the version, MUST NOT convert the entire text to a number. Each decimal separated section must be evaluated individually, and in order. Here is a possible method of doing so:Let ( [	ver = &quot;1.2.21&quot; ;	// extract pre-release version string	ver = Substitute ( ver ; &quot;-&quot; ; ¶ ) ;	preRelease = GetValue ( ver ; 2 ) ;	// extract normal version string	ver = GetValue ( ver ; 1 ) ;	ver = Substitute ( ver ; &quot;.&quot; ; ¶ ) ;	major = GetAsNumber ( GetValue ( ver ; 1 ) ) ;	minor = GetAsNumber ( GetValue ( ver ; 2 ) ) ;	patch = GetAsNumber ( GetValue ( ver ; 3 ) )] ;	// evaluate version	Case (		major = 0 ;		&quot;initial development&quot; ;				major = 1 ;		&quot;first public release&quot;	))</StepText>
						<Text>    When evaluating the version, MUST NOT convert the entire text to a number. Each decimal separated section must be evaluated individually, and in order. Here is a possible method of doing so:Let ( [	ver = &quot;1.2.21&quot; ;	// extract pre-release version string	ver = Substitute ( ver ; &quot;-&quot; ; ¶ ) ;	preRelease = GetValue ( ver ; 2 ) ;	// extract normal version string	ver = GetValue ( ver ; 1 ) ;	ver = Substitute ( ver ; &quot;.&quot; ; ¶ ) ;	major = GetAsNumber ( GetValue ( ver ; 1 ) ) ;	minor = GetAsNumber ( GetValue ( ver ; 2 ) ) ;	patch = GetAsNumber ( GetValue ( ver ; 3 ) )] ;	// evaluate version	Case (		major = 0 ;		&quot;initial development&quot; ;				major = 1 ;		&quot;first public release&quot;	))</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Summarize the changes of each version in a single comment step below.</StepText>
						<Text>    Summarize the changes of each version in a single comment step below.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ==============================================================================</StepText>
						<Text> ==============================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># CHANGELOG</StepText>
						<Text> CHANGELOG</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ==============================================================================</StepText>
						<Text> ==============================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>## 1.0.0 #- initial release</StepText>
						<Text># 1.0.0 #- initial release</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="174" name="-">
				<StepList/>
			</Script>
			<Group groupCollapsed="True" includeInMenu="False" id="213" name="Log Writer: Email: Public">
				<Script includeInMenu="False" runFullAccess="False" id="155" name="Log Writer: Email: Send ( logData )">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Email a set of name/value pairs (dictionary).</StepText>
							<Text>    Email a set of name/value pairs (dictionary).</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: global</StepText>
							<Text> CONTEXT: global</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS:</StepText>
							<Text> PARAMETERS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    entire script parameter is the data to log, in whichever format you choose.</StepText>
							<Text>    entire script parameter is the data to log, in whichever format you choose.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS:</StepText>
							<Text> RETURNS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    numeric errorCode</StepText>
							<Text>    numeric errorCode</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># DEPENDENCIES: none</StepText>
							<Text> DEPENDENCIES: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-FEB-03	 Daniel Smith	- add &quot;before sending&quot; hook	- move send mail step to a sub-script2014-FEB-03	 Daniel Smith	- modified to enable error capture and return an errorCode2014-JAN-16	 Daniel Smith	- Created</StepText>
							<Text>    2014-FEB-03	 Daniel Smith	- add &quot;before sending&quot; hook	- move send mail step to a sub-script2014-FEB-03	 Daniel Smith	- modified to enable error capture and return an errorCode2014-JAN-16	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># ASSIGN PARAMETERS</StepText>
							<Text> ASSIGN PARAMETERS</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $logData; Value:Get ( ScriptParameter ) &amp; LogDataSession ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( ScriptParameter ) & LogDataSession]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptParameter</Chunk>
									<Chunk type="NoRef"> ) &amp; </Chunk>
									<Chunk type="CustomFunctionRef">LogDataSession</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$logData</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># HOOK</StepText>
							<Text> HOOK</Text>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: Email: Config: Hook: Before Sending ( logData )”; Parameter: $logData ]</StepText>
							<Calculation><![CDATA[$logData]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$logData</Chunk>
							</DisplayCalculation>
							<Script id="220" name="Log Writer: Email: Config: Hook: Before Sending ( logData )"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: Email: Config: Handle Error ( errorCode { errorInfo } )”; Parameter: &quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;&amp; &quot;$errorInfo = &quot; &amp; Quote ( &quot;FileMaker Error when performing script: &apos;Log Writer: Email: Config: Hook: Before Sending&apos;&quot; ) &amp; &quot; ;¶&quot; ]</StepText>
							<Calculation><![CDATA["$errorCode = GetAsNumber ( " & $errorCode & " ) ;¶"& "$errorInfo = " & Quote ( "FileMaker Error when performing script: 'Log Writer: Email: Config: Hook: Before Sending'" ) & " ;¶"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;&amp; &quot;$errorInfo = &quot; &amp; </Chunk>
								<Chunk type="FunctionRef">Quote</Chunk>
								<Chunk type="NoRef"> ( &quot;FileMaker Error when performing script: &apos;Log Writer: Email: Config: Hook: Before Sending&apos;&quot; ) &amp; &quot; ;¶&quot;</Chunk>
							</DisplayCalculation>
							<Script id="217" name="Log Writer: Email: Config: Handle Error ( errorCode { errorInfo } )"/>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ // Save script result to local variablesLet ( [	~data = Get ( ScriptResult ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode) ]</StepText>
							<Calculation><![CDATA[// Save script result to local variablesLet ( [	~data = Get ( ScriptResult ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			"Let ( [¶"			& ~data 			& "¶! = \"\" ] ; \"\" )"		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode)]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// Save script result to local variables</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~data = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptResult</Chunk>
								<Chunk type="NoRef"> ) ;	~evaluationErrorCode = 		</Chunk>
								<Chunk type="FunctionRef">EvaluationError</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Evaluate</Chunk>
								<Chunk type="NoRef"> (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = </Chunk>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode)</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># this error was passed up by the hook script, which should call the Handle Error script for itself if necessary, which is why it&apos;s not called here</StepText>
							<Text> this error was passed up by the hook script, which should call the Handle Error script for itself if necessary, which is why it&apos;s not called here</Text>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># SET ENVIRONMENT</StepText>
							<Text> SET ENVIRONMENT</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $ErrorCaptureState; Value:Get ( ErrorCaptureState ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( ErrorCaptureState )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ErrorCaptureState</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$ErrorCaptureState</Name>
						</Step>
						<Step enable="True" id="86" name="Set Error Capture">
							<StepText>Set Error Capture [ On ]</StepText>
							<Set state="True"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># SEND EMAIL</StepText>
							<Text> SEND EMAIL</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># (via sub-script)</StepText>
							<Text> (via sub-script)</Text>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: Email: Config: Send ( logData )”; Parameter: $logData ]</StepText>
							<Calculation><![CDATA[$logData]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$logData</Chunk>
							</DisplayCalculation>
							<Script id="221" name="Log Writer: Email: Config: Send ( logData )"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: Email: Config: Handle Error ( errorCode { errorInfo } )”; Parameter: &quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;&amp; &quot;$errorInfo = &quot; &amp; Quote ( &quot;FileMaker Error when performing script: &apos;Log Writer: Email: Config: Send&apos;&quot; ) &amp; &quot; ;¶&quot; ]</StepText>
							<Calculation><![CDATA["$errorCode = GetAsNumber ( " & $errorCode & " ) ;¶"& "$errorInfo = " & Quote ( "FileMaker Error when performing script: 'Log Writer: Email: Config: Send'" ) & " ;¶"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;&amp; &quot;$errorInfo = &quot; &amp; </Chunk>
								<Chunk type="FunctionRef">Quote</Chunk>
								<Chunk type="NoRef"> ( &quot;FileMaker Error when performing script: &apos;Log Writer: Email: Config: Send&apos;&quot; ) &amp; &quot; ;¶&quot;</Chunk>
							</DisplayCalculation>
							<Script id="217" name="Log Writer: Email: Config: Handle Error ( errorCode { errorInfo } )"/>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ // Save script result to local variablesLet ( [	~data = Get ( ScriptResult ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode) ]</StepText>
							<Calculation><![CDATA[// Save script result to local variablesLet ( [	~data = Get ( ScriptResult ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			"Let ( [¶"			& ~data 			& "¶! = \"\" ] ; \"\" )"		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode)]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// Save script result to local variables</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~data = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptResult</Chunk>
								<Chunk type="NoRef"> ) ;	~evaluationErrorCode = 		</Chunk>
								<Chunk type="FunctionRef">EvaluationError</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Evaluate</Chunk>
								<Chunk type="NoRef"> (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = </Chunk>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode)</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># this error was passed up by the hook script, which should call the Handle Error script for itself if necessary, which is why it&apos;s not called here</StepText>
							<Text> this error was passed up by the hook script, which should call the Handle Error script for itself if necessary, which is why it&apos;s not called here</Text>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RESTORE ENVIRONMENT</StepText>
							<Text> RESTORE ENVIRONMENT</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ not $ErrorCaptureState ]</StepText>
							<Calculation><![CDATA[not $ErrorCaptureState]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> $ErrorCaptureState</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="86" name="Set Error Capture">
							<StepText>Set Error Capture [ Off ]</StepText>
							<Set state="False"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
			</Group>
			<Group groupCollapsed="True" includeInMenu="False" id="215" name="Log Writer: Email: Config">
				<Script includeInMenu="False" runFullAccess="False" id="217" name="Log Writer: Email: Config: Handle Error ( errorCode { errorInfo } )">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Handle an error that occured in this module.</StepText>
							<Text>    Handle an error that occured in this module.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: (let notation)</StepText>
							<Text> PARAMETERS: (let notation)</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    errorCode | numeric value representing the code of the error encountered.</StepText>
							<Text>    errorCode | numeric value representing the code of the error encountered.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    errorInfo | text explaination of the error.</StepText>
							<Text>    errorInfo | text explaination of the error.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-FEB-03	 Daniel Smith	- add errorInfo parameter2014-JAN-14	 Daniel Smith	- Created</StepText>
							<Text>    2014-FEB-03	 Daniel Smith	- add errorInfo parameter2014-JAN-14	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># ASSIGN PARAMETERS</StepText>
							<Text> ASSIGN PARAMETERS</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $!; Value:// Save script parameter to local variablesLet ( [	~data = Get ( ScriptParameter ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	&quot;&quot;) ]</StepText>
							<Value>
								<Calculation><![CDATA[// Save script parameter to local variablesLet ( [	~data = Get ( ScriptParameter ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			"Let ( [¶"			& ~data 			& "! = \"\" ] ; \"\" )"		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	"")]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">// Save script parameter to local variables</Chunk>
									<Chunk type="NoRef"></Chunk>
									<Chunk type="FunctionRef">Let</Chunk>
									<Chunk type="NoRef"> ( [	~data = </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptParameter</Chunk>
									<Chunk type="NoRef"> ) ;	~evaluationErrorCode = 		</Chunk>
									<Chunk type="FunctionRef">EvaluationError</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Evaluate</Chunk>
									<Chunk type="NoRef"> (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = </Chunk>
									<Chunk type="FunctionRef">If</Chunk>
									<Chunk type="NoRef"> ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	&quot;&quot;)</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$!</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Left ( Get ( ApplicationVersion ) ; 3 ) = &quot;Pro&quot;orLeft ( Get ( ApplicationVersion ) ; 7 ) = &quot;Runtime&quot;orGet ( ScriptParameter ) = 3	 // iOSorGet ( ScriptParameter ) = 4	 // WebDirect ]</StepText>
							<Calculation><![CDATA[Left ( Get ( ApplicationVersion ) ; 3 ) = "Pro"orLeft ( Get ( ApplicationVersion ) ; 7 ) = "Runtime"orGet ( ScriptParameter ) = 3	 // iOSorGet ( ScriptParameter ) = 4	 // WebDirect]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ; 3 ) = &quot;Pro&quot;</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ; 7 ) = &quot;Runtime&quot;</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) = 3	 </Chunk>
								<Chunk type="FunctionRef">// iOS</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) = 4	 </Chunk>
								<Chunk type="FunctionRef">// WebDirect</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;Error&quot;; Message: &quot;Log Writer: Email module encountered an error:&quot;&amp; ¶&amp; $errorCode&amp; &quot;: &quot;&amp; $errorInfo; Default Button: “OK”, Commit: “Yes” ]</StepText>
							<Title>
								<Calculation><![CDATA["Error"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Error&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA["Log Writer: Email module encountered an error:"& ¶& $errorCode& ": "& $errorInfo]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Log Writer: Email module encountered an error:&quot;&amp; ¶&amp; $errorCode&amp; &quot;: &quot;&amp; $errorInfo</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;OK&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False"/>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="221" name="Log Writer: Email: Config: Send ( logData )">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Send the email.</StepText>
							<Text>    Send the email.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS:</StepText>
							<Text> PARAMETERS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    entire script parameter is the data to log, in whichever format you choose.</StepText>
							<Text>    entire script parameter is the data to log, in whichever format you choose.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS:</StepText>
							<Text> RETURNS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    numeric errorCode</StepText>
							<Text>    numeric errorCode</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-FEB-03	 Daniel Smith	- Created</StepText>
							<Text>    2014-FEB-03	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="63" name="Send Mail">
							<StepText>Send Mail [ Send via E-mail Client; To: &quot;you@yourdomain.com&quot;; Subject: Get ( FileName ) &amp; &quot; - &quot; &amp; Get ( ScriptName ); Message: Get ( ScriptParameter ) (NOT COMPATIBLE) ]</StepText>
							<NoInteract state="False"/>
							<To UseFoundSet="False">
								<Calculation><![CDATA["you@yourdomain.com"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;you@yourdomain.com&quot;</Chunk>
								</DisplayCalculation>
							</To>
							<Subject>
								<Calculation><![CDATA[Get ( FileName ) & " - " & Get ( ScriptName )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">FileName</Chunk>
									<Chunk type="NoRef"> ) &amp; &quot; - &quot; &amp; </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptName</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Subject>
							<Message>
								<Calculation><![CDATA[Get ( ScriptParameter )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptParameter</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Message>
							<MultipleEmails state="False"/>
							<SendViaSMTP state="False"/>
							<SMTPEncryptionType type="SMTPEncryptionNone"/>
							<SMTPAuthenticationType type="SMTPAuthenticationNone"/>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $errorCode; Value:Get ( LastError ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( LastError )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">LastError</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$errorCode</Name>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: Email: Config: Handle Error ( errorCode { errorInfo } )”; Parameter: &quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;&amp; &quot;$errorInfo = &quot; &amp; Quote ( &quot;FileMaker Error after Send Mail step&quot; ) &amp; &quot; ;¶&quot; ]</StepText>
							<Calculation><![CDATA["$errorCode = GetAsNumber ( " & $errorCode & " ) ;¶"& "$errorInfo = " & Quote ( "FileMaker Error after Send Mail step" ) & " ;¶"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;&amp; &quot;$errorInfo = &quot; &amp; </Chunk>
								<Chunk type="FunctionRef">Quote</Chunk>
								<Chunk type="NoRef"> ( &quot;FileMaker Error after Send Mail step&quot; ) &amp; &quot; ;¶&quot;</Chunk>
							</DisplayCalculation>
							<Script id="217" name="Log Writer: Email: Config: Handle Error ( errorCode { errorInfo } )"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="True" runFullAccess="False" id="199" name="Log Writer: Email: Config: Test Installation">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Check to see if the module is fully installed and working.</StepText>
							<Text>    Check to see if the module is fully installed and working.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: global</StepText>
							<Text> CONTEXT: global</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># DEPENDENCIES: none</StepText>
							<Text> DEPENDENCIES: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-FEB-03	 Daniel Smith	- Created</StepText>
							<Text>    2014-FEB-03	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $logData; Value:&quot;$logLevel = 4 ;¶&quot;&amp; &quot;$accountName = &quot; &amp; Quote ( Get ( AccountName ) ) &amp; &quot; ;¶&quot;&amp; &quot;$fileName = &quot; &amp; Quote ( Get ( FileName ) ) &amp; &quot; ;¶&quot;&amp; &quot;$errorType = \&quot;mFM: Log Writer: Email\&quot; ;¶&quot;&amp; &quot;$errorCode = 0 ;¶&quot;&amp; &quot;$errorDescription = \&quot;no error\&quot; ;¶&quot;&amp; &quot;$errorInfo = \&quot;testing installation of module\&quot; ;¶&quot;&amp; &quot;$scriptName = &quot; &amp; Quote ( Get ( ScriptName ) ) &amp; &quot; ;¶&quot;&amp; &quot;$scriptParameter = Random ;¶&quot; ]</StepText>
							<Value>
								<Calculation><![CDATA["$logLevel = 4 ;¶"& "$accountName = " & Quote ( Get ( AccountName ) ) & " ;¶"& "$fileName = " & Quote ( Get ( FileName ) ) & " ;¶"& "$errorType = \"mFM: Log Writer: Email\" ;¶"& "$errorCode = 0 ;¶"& "$errorDescription = \"no error\" ;¶"& "$errorInfo = \"testing installation of module\" ;¶"& "$scriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"& "$scriptParameter = Random ;¶"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;$logLevel = 4 ;¶&quot;&amp; &quot;$accountName = &quot; &amp; </Chunk>
									<Chunk type="FunctionRef">Quote</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">AccountName</Chunk>
									<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$fileName = &quot; &amp; </Chunk>
									<Chunk type="FunctionRef">Quote</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">FileName</Chunk>
									<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$errorType = \&quot;mFM: Log Writer: Email\&quot; ;¶&quot;&amp; &quot;$errorCode = 0 ;¶&quot;&amp; &quot;$errorDescription = \&quot;no error\&quot; ;¶&quot;&amp; &quot;$errorInfo = \&quot;testing installation of module\&quot; ;¶&quot;&amp; &quot;$scriptName = &quot; &amp; </Chunk>
									<Chunk type="FunctionRef">Quote</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptName</Chunk>
									<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$scriptParameter = Random ;¶&quot;</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$logData</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $testName; Value:&quot;TEST 1: send email with data&quot; ]</StepText>
							<Value>
								<Calculation><![CDATA["TEST 1: send email with data"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;TEST 1: send email with data&quot;</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$testName</Name>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;starting&quot;; Message: $testName; Default Button: “OK”, Commit: “Yes”; Button 2: “Cancel”, Commit: “No” ]</StepText>
							<Title>
								<Calculation><![CDATA["starting"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;starting&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA[$testName]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">$testName</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;OK&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False">
									<Calculation><![CDATA["Cancel"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;Cancel&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( LastMessageChoice ) = 2	 // Cancel ]</StepText>
							<Calculation><![CDATA[Get ( LastMessageChoice ) = 2	 // Cancel]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastMessageChoice</Chunk>
								<Chunk type="NoRef"> ) = 2	 </Chunk>
								<Chunk type="FunctionRef">// Cancel</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: Email: Send ( logData )”; Parameter: $logData ]</StepText>
							<Calculation><![CDATA[$logData]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$logData</Chunk>
							</DisplayCalculation>
							<Script id="155" name="Log Writer: Email: Send ( logData )"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $testName; Value:&quot;TEST 2: send email WITHOUT data&quot; ]</StepText>
							<Value>
								<Calculation><![CDATA["TEST 2: send email WITHOUT data"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;TEST 2: send email WITHOUT data&quot;</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$testName</Name>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;starting&quot;; Message: $testName; Default Button: “OK”, Commit: “Yes”; Button 2: “Cancel”, Commit: “No” ]</StepText>
							<Title>
								<Calculation><![CDATA["starting"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;starting&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA[$testName]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">$testName</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;OK&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False">
									<Calculation><![CDATA["Cancel"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;Cancel&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( LastMessageChoice ) = 2	 // Cancel ]</StepText>
							<Calculation><![CDATA[Get ( LastMessageChoice ) = 2	 // Cancel]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastMessageChoice</Chunk>
								<Chunk type="NoRef"> ) = 2	 </Chunk>
								<Chunk type="FunctionRef">// Cancel</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: Email: Send ( logData )” ]</StepText>
							<Script id="155" name="Log Writer: Email: Send ( logData )"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;Test Finished&quot;; Message: &quot;Test Finished&quot;; Default Button: “OK”, Commit: “Yes” ]</StepText>
							<Title>
								<Calculation><![CDATA["Test Finished"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Test Finished&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA["Test Finished"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Test Finished&quot;</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;OK&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False"/>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Group groupCollapsed="True" includeInMenu="False" id="218" name="Log Writer: Email: Config: Hook">
					<Script includeInMenu="False" runFullAccess="False" id="220" name="Log Writer: Email: Config: Hook: Before Sending ( logData )">
						<StepList>
							<Step enable="True" id="89" name="Comment">
								<StepText>################################################################################</StepText>
								<Text>###############################################################################</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText># PURPOSE:</StepText>
								<Text> PURPOSE:</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#    Allow custom steps to be performed at a specified point in the module.</StepText>
								<Text>    Allow custom steps to be performed at a specified point in the module.</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText># PARAMETERS:</StepText>
								<Text> PARAMETERS:</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#    entire script parameter is the data to log, in whichever format you choose.</StepText>
								<Text>    entire script parameter is the data to log, in whichever format you choose.</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText># RETURNS: (let notation)</StepText>
								<Text> RETURNS: (let notation)</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#    errorCode | number | error code encountered in this script. This will be evaluated as a boolean to determine if this script succeeded or failed.</StepText>
								<Text>    errorCode | number | error code encountered in this script. This will be evaluated as a boolean to determine if this script succeeded or failed.</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText># NOTES:</StepText>
								<Text> NOTES:</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#    This script is run before sending email. Exiting this script with an error code will cause the email to not be sent.</StepText>
								<Text>    This script is run before sending email. Exiting this script with an error code will cause the email to not be sent.</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText># REVISIONS:</StepText>
								<Text> REVISIONS:</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#    2014-FEB-03	 Daniel Smith	- Created</StepText>
								<Text>    2014-FEB-03	 Daniel Smith	- Created</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>################################################################################</StepText>
								<Text>###############################################################################</Text>
							</Step>
							<Step enable="True" id="141" name="Set Variable">
								<StepText>Set Variable [ $errorCode; Value:0 ]</StepText>
								<Value>
									<Calculation><![CDATA[0]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">0</Chunk>
									</DisplayCalculation>
								</Value>
								<Repetition>
									<Calculation><![CDATA[1]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">1</Chunk>
									</DisplayCalculation>
								</Repetition>
								<Name>$errorCode</Name>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText># the following section is one idea of what this script could be used for...</StepText>
								<Text> the following section is one idea of what this script could be used for...</Text>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText># LIMIT EMAIL FREQUENCY</StepText>
								<Text> LIMIT EMAIL FREQUENCY</Text>
							</Step>
							<Step enable="True" id="68" name="If">
								<StepText>If [ IsEmpty ( $$LOGWRITER.EMAIL.LASTRUN ) ]</StepText>
								<Calculation><![CDATA[IsEmpty ( $$LOGWRITER.EMAIL.LASTRUN )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">IsEmpty</Chunk>
									<Chunk type="NoRef"> ( $$LOGWRITER.EMAIL.LASTRUN )</Chunk>
								</DisplayCalculation>
							</Step>
							<Step enable="True" id="141" name="Set Variable">
								<StepText>Set Variable [ $$LOGWRITER.EMAIL.LASTRUN; Value:Get ( CurrentTimeStamp ) ]</StepText>
								<Value>
									<Calculation><![CDATA[Get ( CurrentTimeStamp )]]></Calculation>
									<DisplayCalculation>
										<Chunk type="FunctionRef">Get</Chunk>
										<Chunk type="NoRef"> ( </Chunk>
										<Chunk type="FunctionRef">CurrentTimeStamp</Chunk>
										<Chunk type="NoRef"> )</Chunk>
									</DisplayCalculation>
								</Value>
								<Repetition>
									<Calculation><![CDATA[1]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">1</Chunk>
									</DisplayCalculation>
								</Repetition>
								<Name>$$LOGWRITER.EMAIL.LASTRUN</Name>
							</Step>
							<Step enable="True" id="125" name="Else If">
								<StepText>Else If [ // last ran less than 5 min. ago$$LOGWRITER.EMAIL.LASTRUN + Time ( 0 ; 5 ; 0 )&gt;Get ( CurrentTimeStamp ) ]</StepText>
								<Calculation><![CDATA[// last ran less than 5 min. ago$$LOGWRITER.EMAIL.LASTRUN + Time ( 0 ; 5 ; 0 )>Get ( CurrentTimeStamp )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">// last ran less than 5 min. ago</Chunk>
									<Chunk type="NoRef">$$LOGWRITER.EMAIL.LASTRUN + </Chunk>
									<Chunk type="FunctionRef">Time</Chunk>
									<Chunk type="NoRef"> ( 0 ; 5 ; 0 )&gt;</Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">CurrentTimeStamp</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Step>
							<Step enable="True" id="141" name="Set Variable">
								<StepText>Set Variable [ $errorCode; Value:1	 // User canceled action  ]</StepText>
								<Value>
									<Calculation><![CDATA[1	 // User canceled action ]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">1	 </Chunk>
										<Chunk type="FunctionRef">// User canceled action </Chunk>
									</DisplayCalculation>
								</Value>
								<Repetition>
									<Calculation><![CDATA[1]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">1</Chunk>
									</DisplayCalculation>
								</Repetition>
								<Name>$errorCode</Name>
							</Step>
							<Step enable="True" id="69" name="Else">
								<StepText>Else</StepText>
							</Step>
							<Step enable="True" id="141" name="Set Variable">
								<StepText>Set Variable [ $$LOGWRITER.EMAIL.LASTRUN; Value:Get ( CurrentTimeStamp ) ]</StepText>
								<Value>
									<Calculation><![CDATA[Get ( CurrentTimeStamp )]]></Calculation>
									<DisplayCalculation>
										<Chunk type="FunctionRef">Get</Chunk>
										<Chunk type="NoRef"> ( </Chunk>
										<Chunk type="FunctionRef">CurrentTimeStamp</Chunk>
										<Chunk type="NoRef"> )</Chunk>
									</DisplayCalculation>
								</Value>
								<Repetition>
									<Calculation><![CDATA[1]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">1</Chunk>
									</DisplayCalculation>
								</Repetition>
								<Name>$$LOGWRITER.EMAIL.LASTRUN</Name>
							</Step>
							<Step enable="True" id="70" name="End If">
								<StepText>End If</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
							<Step enable="True" id="103" name="Exit Script">
								<StepText>Exit Script [ Result: &quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot; ]</StepText>
								<Calculation><![CDATA["$errorCode = GetAsNumber ( " & $errorCode & " ) ;¶"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;</Chunk>
								</DisplayCalculation>
							</Step>
							<Step enable="True" id="89" name="Comment">
								<StepText>#</StepText>
							</Step>
						</StepList>
					</Script>
				</Group>
			</Group>
			<Script includeInMenu="False" runFullAccess="False" id="170" name="-">
				<StepList/>
			</Script>
		</Group>
		<Group groupCollapsed="True" includeInMenu="False" id="118" name="Log Viewer: FM">
			<Script includeInMenu="False" runFullAccess="False" id="167" name="-">
				<StepList/>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="120" name="Log Viewer: FM: README">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>#########################################################################</StepText>
						<Text>########################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Log Viewer: FM</StepText>
						<Text> Log Viewer: FM</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Created by Daniel Smith, dansmith65@gmail.com</StepText>
						<Text> Created by Daniel Smith, dansmith65@gmail.com</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#	</StepText>
						<Text>	</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># Provide a user interface for viewing log entries created by the Log Writer: FM module.</StepText>
						<Text> Provide a user interface for viewing log entries created by the Log Writer: FM module.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># This module is seperate from the Log Writer so that it easily supports a multi-file solution.</StepText>
						<Text> This module is seperate from the Log Writer so that it easily supports a multi-file solution.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#########################################################################</StepText>
						<Text>########################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># REQUIRES</StepText>
						<Text> REQUIRES</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - modules:</StepText>
						<Text>        - modules:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                Log Writer: FM (in any accessable file)</StepText>
						<Text>                Log Writer: FM (in any accessable file)</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># INTEGRATION</StepText>
						<Text> INTEGRATION</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        1. import custom functions:</StepText>
						<Text>        1. import custom functions:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - [optional] #Get</StepText>
						<Text>                - [optional] #Get</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        is used in the following places:scripts	Logger: Create Entry ( logData )		set $logLevel variable	Log Viewer: FM: Parse Log Data		CREATE RELATED RECORDS section	Log Viewer: FM: Update Field Contents		Replace Field Contents step</StepText>
						<Text>                        is used in the following places:scripts	Logger: Create Entry ( logData )		set $logLevel variable	Log Viewer: FM: Parse Log Data		CREATE RELATED RECORDS section	Log Viewer: FM: Update Field Contents		Replace Field Contents step</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - [optional] #GetNameList</StepText>
						<Text>                - [optional] #GetNameList</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        is used in the following places:scripts	Log Viewer: FM: Parse Log Data		CREATE RELATED RECORDS section</StepText>
						<Text>                        is used in the following places:scripts	Log Viewer: FM: Parse Log Data		CREATE RELATED RECORDS section</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        2. create table occurrences/relationships to match those in the module file</StepText>
						<Text>        2. create table occurrences/relationships to match those in the module file</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        3. create value lists:</StepText>
						<Text>        3. create value lists:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - LogItem: All Names</StepText>
						<Text>                - LogItem: All Names</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        - use all values from field: LogItem::name</StepText>
						<Text>                        - use all values from field: LogItem::name</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - LogItem: Custom Sort</StepText>
						<Text>                - LogItem: Custom Sort</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        - modify the values in this list to suit your needs: it defines the sort order on Log: Detail layout</StepText>
						<Text>                        - modify the values in this list to suit your needs: it defines the sort order on Log: Detail layout</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        - by including all the default name/value pairs added by the LogData custom function, any custom</StepText>
						<Text>                        - by including all the default name/value pairs added by the LogData custom function, any custom</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                           name/value pairs added for the particular log entry will be grouped together at the bottom of the</StepText>
						<Text>                           name/value pairs added for the particular log entry will be grouped together at the bottom of the</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                           portal</StepText>
						<Text>                           portal</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - 1</StepText>
						<Text>                - 1</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        4. create layouts (don&apos;t add anything to them, yet)</StepText>
						<Text>        4. create layouts (don&apos;t add anything to them, yet)</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - Log: List</StepText>
						<Text>                - Log: List</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - Log: Detail</StepText>
						<Text>                - Log: Detail</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - Log Item: Detail</StepText>
						<Text>                - Log Item: Detail</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        5. import module script folder</StepText>
						<Text>        5. import module script folder</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        6. copy layout elements into the layouts created above</StepText>
						<Text>        6. copy layout elements into the layouts created above</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - Log: List</StepText>
						<Text>                - Log: List</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        header: 80 pt</StepText>
						<Text>                        header: 80 pt</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        body:   48 pt</StepText>
						<Text>                        body:   48 pt</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        footer: 24 pt</StepText>
						<Text>                        footer: 24 pt</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        width:  1104 pt</StepText>
						<Text>                        width:  1104 pt</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                - Log: Detail AND Log Item: Detail</StepText>
						<Text>                - Log: Detail AND Log Item: Detail</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        header: 64 pt</StepText>
						<Text>                        header: 64 pt</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        body:   296 pt</StepText>
						<Text>                        body:   296 pt</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        footer: 24 pt</StepText>
						<Text>                        footer: 24 pt</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        width:  592 pt</StepText>
						<Text>                        width:  592 pt</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        7. adjust privileges:</StepText>
						<Text>        7. adjust privileges:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                To allow a user to view/parse log entries:</StepText>
						<Text>                To allow a user to view/parse log entries:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                (any user that will view the log will likely need to be able to &quot;Parse&quot; the log as well)</StepText>
						<Text>                (any user that will view the log will likely need to be able to &quot;Parse&quot; the log as well)</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        Records</StepText>
						<Text>                        Records</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - Log table: view and edit</StepText>
						<Text>                                - Log table: view and edit</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - LogItem table: view and create</StepText>
						<Text>                                - LogItem table: view and create</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        Layouts</StepText>
						<Text>                        Layouts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - view and modify records from &quot;Log: List&quot; and &quot;Log: Detail&quot; layouts</StepText>
						<Text>                                - view and modify records from &quot;Log: List&quot; and &quot;Log: Detail&quot; layouts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - view records from &quot;Log Item: Detail&quot;</StepText>
						<Text>                                - view records from &quot;Log Item: Detail&quot;</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        Value Lists</StepText>
						<Text>                        Value Lists</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - view all</StepText>
						<Text>                                - view all</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                        Scripts</StepText>
						<Text>                        Scripts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#                                - run all scripts in the module folder</StepText>
						<Text>                                - run all scripts in the module folder</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># INSTRUCTIONS FOR USE</StepText>
						<Text> INSTRUCTIONS FOR USE</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - run script &quot;Log Viewer: FM: Open Window&quot; to view log entries in a new window</StepText>
						<Text>        - run script &quot;Log Viewer: FM: Open Window&quot; to view log entries in a new window</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        - click the &quot;Parse All Error Objects&quot; button to parse the logData into related records</StepText>
						<Text>        - click the &quot;Parse All Error Objects&quot; button to parse the logData into related records</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># LICENSE:</StepText>
						<Text> LICENSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#        The MIT License (MIT)Copyright (c) 2014 Daniel SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</StepText>
						<Text>        The MIT License (MIT)Copyright (c) 2014 Daniel SmithPermission is hereby granted, free of charge, to any person obtaining a copyof this software and associated documentation files (the &quot;Software&quot;), to dealin the Software without restriction, including without limitation the rightsto use, copy, modify, merge, publish, distribute, sublicense, and/or sellcopies of the Software, and to permit persons to whom the Software isfurnished to do so, subject to the following conditions:The above copyright notice and this permission notice shall be included inall copies or substantial portions of the Software.THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS ORIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THEAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHERLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS INTHE SOFTWARE.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="138" name="Log Viewer: FM: Version 1.0.0-beta2">
				<StepList>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># PURPOSE:</StepText>
						<Text> PURPOSE:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Return the version number of this module.</StepText>
						<Text>    Return the version number of this module.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># RETURNS:</StepText>
						<Text> RETURNS:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    version string portion of the script name</StepText>
						<Text>    version string portion of the script name</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># NOTES:</StepText>
						<Text> NOTES:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    http://filemakerstandards.org/display/bp/Default+scripts</StepText>
						<Text>    http://filemakerstandards.org/display/bp/Default+scripts</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    This guideline was heavily influenced by http://semver.org/spec/v2.0.0-rc.1.html</StepText>
						<Text>    This guideline was heavily influenced by http://semver.org/spec/v2.0.0-rc.1.html</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Changelog: Summary is formatted with markdown: http://daringfireball.net/projects/markdown/- use different header &apos;tag&apos; (#&apos;s) depending on the version being incrementedMajor: H1Minor: H2Patch: H3</StepText>
						<Text>    Changelog: Summary is formatted with markdown: http://daringfireball.net/projects/markdown/- use different header &apos;tag&apos; (#&apos;s) depending on the version being incrementedMajor: H1Minor: H2Patch: H3</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>################################################################################</StepText>
						<Text>###############################################################################</Text>
					</Step>
					<Step enable="True" id="141" name="Set Variable">
						<StepText>Set Variable [ $scriptResult; Value:// return script version string portion of script nameLet ( [	~text = Get ( ScriptName ) ;	~firstNumber = Left ( Filter ( ~text  ; &quot;0123456789&quot; ) ; 1 ) ;	~firstNumberPosition = Position ( ~text ; ~firstNumber ; 1 ; 1 )] ;	Right ( ~text ; Length ( ~text ) - ~firstNumberPosition + 1 )) ]</StepText>
						<Value>
							<Calculation><![CDATA[// return script version string portion of script nameLet ( [	~text = Get ( ScriptName ) ;	~firstNumber = Left ( Filter ( ~text  ; "0123456789" ) ; 1 ) ;	~firstNumberPosition = Position ( ~text ; ~firstNumber ; 1 ; 1 )] ;	Right ( ~text ; Length ( ~text ) - ~firstNumberPosition + 1 ))]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// return script version string portion of script name</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~text = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptName</Chunk>
								<Chunk type="NoRef"> ) ;	~firstNumber = </Chunk>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Filter</Chunk>
								<Chunk type="NoRef"> ( ~text  ; &quot;0123456789&quot; ) ; 1 ) ;	~firstNumberPosition = </Chunk>
								<Chunk type="FunctionRef">Position</Chunk>
								<Chunk type="NoRef"> ( ~text ; ~firstNumber ; 1 ; 1 )] ;	</Chunk>
								<Chunk type="FunctionRef">Right</Chunk>
								<Chunk type="NoRef"> ( ~text ; </Chunk>
								<Chunk type="FunctionRef">Length</Chunk>
								<Chunk type="NoRef"> ( ~text ) - ~firstNumberPosition + 1 ))</Chunk>
							</DisplayCalculation>
						</Value>
						<Repetition>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
						</Repetition>
						<Name>$scriptResult</Name>
					</Step>
					<Step enable="True" id="103" name="Exit Script">
						<StepText>Exit Script [ Result: $scriptResult ]</StepText>
						<Calculation><![CDATA[$scriptResult]]></Calculation>
						<DisplayCalculation>
							<Chunk type="NoRef">$scriptResult</Chunk>
						</DisplayCalculation>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># MAJOR.MINOR.PATCH{-PRERELEASE}{+}</StepText>
						<Text> MAJOR.MINOR.PATCH{-PRERELEASE}{+}</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    MAJOR:    Arbitrarily defined by the developer, but must introduce significant change to either the feature set, or the internal method of processing.</StepText>
						<Text>    MAJOR:    Arbitrarily defined by the developer, but must introduce significant change to either the feature set, or the internal method of processing.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    MINOR:    New features. Should be incremented whenever a new feature is added.</StepText>
						<Text>    MINOR:    New features. Should be incremented whenever a new feature is added.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    PATCH:    Bug fixes. Should not introduce new features (unless the lack of that feature can be considered a bug).</StepText>
						<Text>    PATCH:    Bug fixes. Should not introduce new features (unless the lack of that feature can be considered a bug).</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    {-PRERELEASE}    OPTIONAL    A pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.This value can be compaired as text in FileMaker, and the following will be true:  &quot;alpha&quot; &lt; &quot;beta&quot; and &quot;alpha&quot; &lt; &quot;rc&quot; and &quot;beta&quot; &lt; &quot;rc&quot;.</StepText>
						<Text>    {-PRERELEASE}    OPTIONAL    A pre-release version MAY be denoted by appending a dash and a series of dot separated identifiers immediately following the patch version. Identifiers MUST be comprised of only ASCII alphanumerics and dash [0-9A-Za-z-]. Pre-release versions satisfy but have a lower precedence than the associated normal version. Examples: 1.0.0-alpha, 1.0.0-alpha.1, 1.0.0-0.3.7, 1.0.0-x.7.z.92.This value can be compaired as text in FileMaker, and the following will be true:  &quot;alpha&quot; &lt; &quot;beta&quot; and &quot;alpha&quot; &lt; &quot;rc&quot; and &quot;beta&quot; &lt; &quot;rc&quot;.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    {+}    OPTIONAL    If the file has been modified since the version was last incremented, and the version does not need to be incremented yet (still under development), append the version string with a +.</StepText>
						<Text>    {+}    OPTIONAL    If the file has been modified since the version was last incremented, and the version does not need to be incremented yet (still under development), append the version string with a +.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># These guidelines should be followed:</StepText>
						<Text> These guidelines should be followed:</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Use decimal separated text to store the version.</StepText>
						<Text>    Use decimal separated text to store the version.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    When evaluating the version, MUST NOT convert the entire text to a number. Each decimal separated section must be evaluated individually, and in order. Here is a possible method of doing so:Let ( [	ver = &quot;1.2.21&quot; ;	// extract pre-release version string	ver = Substitute ( ver ; &quot;-&quot; ; ¶ ) ;	preRelease = GetValue ( ver ; 2 ) ;	// extract normal version string	ver = GetValue ( ver ; 1 ) ;	ver = Substitute ( ver ; &quot;.&quot; ; ¶ ) ;	major = GetAsNumber ( GetValue ( ver ; 1 ) ) ;	minor = GetAsNumber ( GetValue ( ver ; 2 ) ) ;	patch = GetAsNumber ( GetValue ( ver ; 3 ) )] ;	// evaluate version	Case (		major = 0 ;		&quot;initial development&quot; ;				major = 1 ;		&quot;first public release&quot;	))</StepText>
						<Text>    When evaluating the version, MUST NOT convert the entire text to a number. Each decimal separated section must be evaluated individually, and in order. Here is a possible method of doing so:Let ( [	ver = &quot;1.2.21&quot; ;	// extract pre-release version string	ver = Substitute ( ver ; &quot;-&quot; ; ¶ ) ;	preRelease = GetValue ( ver ; 2 ) ;	// extract normal version string	ver = GetValue ( ver ; 1 ) ;	ver = Substitute ( ver ; &quot;.&quot; ; ¶ ) ;	major = GetAsNumber ( GetValue ( ver ; 1 ) ) ;	minor = GetAsNumber ( GetValue ( ver ; 2 ) ) ;	patch = GetAsNumber ( GetValue ( ver ; 3 ) )] ;	// evaluate version	Case (		major = 0 ;		&quot;initial development&quot; ;				major = 1 ;		&quot;first public release&quot;	))</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#    Summarize the changes of each version in a single comment step below.</StepText>
						<Text>    Summarize the changes of each version in a single comment step below.</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ==============================================================================</StepText>
						<Text> ==============================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># CHANGELOG</StepText>
						<Text> CHANGELOG</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText># ==============================================================================</StepText>
						<Text> ==============================================================================</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>## 1.0.0 #- initial release</StepText>
						<Text># 1.0.0 #- initial release</Text>
					</Step>
					<Step enable="True" id="89" name="Comment">
						<StepText>#</StepText>
					</Step>
				</StepList>
			</Script>
			<Script includeInMenu="False" runFullAccess="False" id="168" name="-">
				<StepList/>
			</Script>
			<Group groupCollapsed="True" includeInMenu="False" id="121" name="Log Viewer: FM: Public">
				<Script includeInMenu="False" runFullAccess="False" id="109" name="Log Viewer: FM: Open Window">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Open new window and go to appropriate layout to view Log.</StepText>
							<Text>    Open new window and go to appropriate layout to view Log.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: global</StepText>
							<Text> CONTEXT: global</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-FEB-06	 Daniel Smith	- adjust window size on windows2014-JAN-28	 Daniel Smith	- add default found set section2014-JAN-14	 Daniel Smith	- Created</StepText>
							<Text>    2014-FEB-06	 Daniel Smith	- adjust window size on windows2014-JAN-28	 Daniel Smith	- add default found set section2014-JAN-14	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># WINDOW</StepText>
							<Text> WINDOW</Text>
						</Step>
						<Step enable="True" id="122" name="New Window">
							<StepText>New Window (VIRTUAL WINDOW ON WEB)  [ Style: Document; Close: “Yes”; Minimize: “Yes”; Maximize: “Yes”; Zoom Control Area: “Yes”; Resize: “Yes” ]</StepText>
							<NewWndStyles Styles="983554"/>
						</Step>
						<Step enable="True" id="79" name="Freeze Window">
							<StepText>Freeze Window</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># LAYOUT</StepText>
							<Text> LAYOUT</Text>
						</Step>
						<Step enable="True" id="6" name="Go to Layout">
							<StepText>Go to Layout [ “Log: List” (Log) ]</StepText>
							<LayoutDestination value="SelectedLayout"/>
							<Layout id="2" name="Log: List"/>
						</Step>
						<Step enable="True" id="55" name="Enter Browse Mode">
							<StepText>Enter Browse Mode</StepText>
							<Pause state="False"/>
						</Step>
						<Step enable="True" id="30" name="View As">
							<StepText>View As[ View as List ]</StepText>
							<View value="List"/>
						</Step>
						<Step enable="True" id="29" name="Show/Hide Toolbars">
							<StepText>Show/Hide Toolbars[ Show ]</StepText>
							<Lock state="False"/>
							<ShowHide value="Show"/>
						</Step>
						<Step enable="True" id="31" name="Adjust Window">
							<StepText>Adjust Window[ Resize to Fit ]</StepText>
							<WindowState value="ResizeToFit"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( SystemPlatform ) = -2	 // Windows ]</StepText>
							<Calculation><![CDATA[Get ( SystemPlatform ) = -2	 // Windows]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">SystemPlatform</Chunk>
								<Chunk type="NoRef"> ) = -2	 </Chunk>
								<Chunk type="FunctionRef">// Windows</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="119" name="Move/Resize Window">
							<StepText>Move/Resize Window [ Current Window; Height: Get ( WindowHeight ) - 27// allow room for scroll bars and minimized windows ]</StepText>
							<LimitToWindowsOfCurrentFile state="True"/>
							<Window value="Current"/>
							<Height>
								<Calculation><![CDATA[Get ( WindowHeight ) - 27// allow room for scroll bars and minimized windows]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">WindowHeight</Chunk>
									<Chunk type="NoRef"> ) - 27</Chunk>
									<Chunk type="FunctionRef">// allow room for scroll bars and minimized windows</Chunk>
								</DisplayCalculation>
							</Height>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># FOUND SET</StepText>
							<Text> FOUND SET</Text>
						</Step>
						<Step enable="True" id="22" name="Enter Find Mode">
							<StepText>Enter Find Mode [  ]</StepText>
							<Pause state="False"/>
							<Restore state="False"/>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ Log::creationHostTimestamp; &quot;&gt;=&quot; &amp; Get ( CurrentHostTimeStamp ) - Time ( 24 ; 0 ; 0 ) ]</StepText>
							<Calculation><![CDATA[">=" & Get ( CurrentHostTimeStamp ) - Time ( 24 ; 0 ; 0 )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;&gt;=&quot; &amp; </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">CurrentHostTimeStamp</Chunk>
								<Chunk type="NoRef"> ) - </Chunk>
								<Chunk type="FunctionRef">Time</Chunk>
								<Chunk type="NoRef"> ( 24 ; 0 ; 0 )</Chunk>
							</DisplayCalculation>
							<Field table="Log" id="6" name="creationHostTimestamp"/>
						</Step>
						<Step enable="True" id="86" name="Set Error Capture">
							<StepText>Set Error Capture [ On ]</StepText>
							<Set state="True"/>
						</Step>
						<Step enable="True" id="28" name="Perform Find">
							<StepText>Perform Find [  ]</StepText>
							<Restore state="False"/>
						</Step>
						<Step enable="True" id="86" name="Set Error Capture">
							<StepText>Set Error Capture [ Off ]</StepText>
							<Set state="False"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( FoundCount ) = 0 ]</StepText>
							<Calculation><![CDATA[Get ( FoundCount ) = 0]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">FoundCount</Chunk>
								<Chunk type="NoRef"> ) = 0</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="23" name="Show All Records">
							<StepText>Show All Records</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="16" name="Go to Record/Request/Page">
							<StepText>Go to Record/Request/Page[ Last ]</StepText>
							<NoInteract state="False"/>
							<RowPageLocation value="Last"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># SET GLOBAL FIELDS TO DEFAULT VALUES</StepText>
							<Text> SET GLOBAL FIELDS TO DEFAULT VALUES</Text>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ Log::FILTER_NAME; &quot;&quot; ]</StepText>
							<Calculation><![CDATA[""]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;&quot;</Chunk>
							</DisplayCalculation>
							<Field table="Log" id="17" name="FILTER_NAME"/>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ Log::FILTER_VALUE; &quot;&quot; ]</StepText>
							<Calculation><![CDATA[""]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;&quot;</Chunk>
							</DisplayCalculation>
							<Field table="Log" id="18" name="FILTER_VALUE"/>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ Log::REFRESH_RELATIONSHIP; 1 ]</StepText>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
							<Field table="Log" id="19" name="REFRESH_RELATIONSHIP"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="161" name="Log Viewer: FM: Update Field Contents">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Update a fields contents with related data.</StepText>
							<Text>    Update a fields contents with related data.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: Log</StepText>
							<Text> CONTEXT: Log</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Use when adding a field to the log table (for list view) after log entries have already been created.</StepText>
							<Text>    Use when adding a field to the log table (for list view) after log entries have already been created.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    This script only operates on the current found set.</StepText>
							<Text>    This script only operates on the current found set.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-28	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-28	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># TODO: disable/delete these steps</StepText>
							<Text> TODO: disable/delete these steps</Text>
						</Step>
						<Step enable="False" id="87" name="Show Custom Dialog">
							<StepText>//  Show Custom Dialog [ Title: &quot;Warning&quot;; Message: &quot;This script must be modified before it is run.&quot;; Default Button: “Cancel”, Commit: “Yes” ]</StepText>
							<Title>
								<Calculation><![CDATA["Warning"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Warning&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA["This script must be modified before it is run."]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;This script must be modified before it is run.&quot;</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["Cancel"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;Cancel&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False"/>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="False" id="103" name="Exit Script">
							<StepText>//  Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># TODO: set this variable to the field name to update</StepText>
							<Text> TODO: set this variable to the field name to update</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $fieldName; Value:GetFieldName ( Log::accountName ) ]</StepText>
							<Value>
								<Calculation><![CDATA[GetFieldName ( Log::accountName )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">GetFieldName</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FieldRef">
										<Field table="Log" id="20" name="accountName"/>
									</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$fieldName</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># SET VARIABLES</StepText>
							<Text> SET VARIABLES</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $fieldName; Value:Let (	~substituted = Substitute ( $fieldName ; &quot;::&quot; ; ¶ );	GetValue (		~substituted ;		ValueCount ( ~substituted )	)) ]</StepText>
							<Value>
								<Calculation><![CDATA[Let (	~substituted = Substitute ( $fieldName ; "::" ; ¶ );	GetValue (		~substituted ;		ValueCount ( ~substituted )	))]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Let</Chunk>
									<Chunk type="NoRef"> (	~substituted = </Chunk>
									<Chunk type="FunctionRef">Substitute</Chunk>
									<Chunk type="NoRef"> ( $fieldName ; &quot;::&quot; ; ¶ );	</Chunk>
									<Chunk type="FunctionRef">GetValue</Chunk>
									<Chunk type="NoRef"> (		~substituted ;		</Chunk>
									<Chunk type="FunctionRef">ValueCount</Chunk>
									<Chunk type="NoRef"> ( ~substituted )	))</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$fieldName</Name>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $logItemTableName; Value:GetValue (	Substitute (		GetFieldName ( LogItem::id ) ;		[ &quot;::&quot; ; ¶ ]	) ;	1) ]</StepText>
							<Value>
								<Calculation><![CDATA[GetValue (	Substitute (		GetFieldName ( LogItem::id ) ;		[ "::" ; ¶ ]	) ;	1)]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">GetValue</Chunk>
									<Chunk type="NoRef"> (	</Chunk>
									<Chunk type="FunctionRef">Substitute</Chunk>
									<Chunk type="NoRef"> (		</Chunk>
									<Chunk type="FunctionRef">GetFieldName</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FieldRef">
										<Field table="LogItem" id="1" name="id"/>
									</Chunk>
									<Chunk type="NoRef"> ) ;		[ &quot;::&quot; ; ¶ ]	) ;	1)</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$logItemTableName</Name>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $logItemLogIdFieldName; Value:GetValue (	Substitute (		GetFieldName ( LogItem::id_Log ) ;		[ &quot;::&quot; ; ¶ ]	) ;	2) ]</StepText>
							<Value>
								<Calculation><![CDATA[GetValue (	Substitute (		GetFieldName ( LogItem::id_Log ) ;		[ "::" ; ¶ ]	) ;	2)]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">GetValue</Chunk>
									<Chunk type="NoRef"> (	</Chunk>
									<Chunk type="FunctionRef">Substitute</Chunk>
									<Chunk type="NoRef"> (		</Chunk>
									<Chunk type="FunctionRef">GetFieldName</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FieldRef">
										<Field table="LogItem" id="2" name="id_Log"/>
									</Chunk>
									<Chunk type="NoRef"> ) ;		[ &quot;::&quot; ; ¶ ]	) ;	2)</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$logItemLogIdFieldName</Name>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $logItemNameFieldName; Value:GetValue (	Substitute (		GetFieldName ( LogItem::name ) ;		[ &quot;::&quot; ; ¶ ]	) ;	2) ]</StepText>
							<Value>
								<Calculation><![CDATA[GetValue (	Substitute (		GetFieldName ( LogItem::name ) ;		[ "::" ; ¶ ]	) ;	2)]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">GetValue</Chunk>
									<Chunk type="NoRef"> (	</Chunk>
									<Chunk type="FunctionRef">Substitute</Chunk>
									<Chunk type="NoRef"> (		</Chunk>
									<Chunk type="FunctionRef">GetFieldName</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FieldRef">
										<Field table="LogItem" id="3" name="name"/>
									</Chunk>
									<Chunk type="NoRef"> ) ;		[ &quot;::&quot; ; ¶ ]	) ;	2)</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$logItemNameFieldName</Name>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $logItemValueFieldName; Value:GetValue (	Substitute (		GetFieldName ( LogItem::value ) ;		[ &quot;::&quot; ; ¶ ]	) ;	2) ]</StepText>
							<Value>
								<Calculation><![CDATA[GetValue (	Substitute (		GetFieldName ( LogItem::value ) ;		[ "::" ; ¶ ]	) ;	2)]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">GetValue</Chunk>
									<Chunk type="NoRef"> (	</Chunk>
									<Chunk type="FunctionRef">Substitute</Chunk>
									<Chunk type="NoRef"> (		</Chunk>
									<Chunk type="FunctionRef">GetFieldName</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FieldRef">
										<Field table="LogItem" id="4" name="value"/>
									</Chunk>
									<Chunk type="NoRef"> ) ;		[ &quot;::&quot; ; ¶ ]	) ;	2)</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$logItemValueFieldName</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># TODO: SET FIELD NAME TO REPLACE</StepText>
							<Text> TODO: SET FIELD NAME TO REPLACE</Text>
						</Step>
						<Step enable="True" id="91" name="Replace Field Contents">
							<StepText>Replace Field Contents [ Log::accountName; Replace with calculation: If ( not IsEmpty ( Log::logData ) ;	#Get ( Log::logData ; $fieldName ) ;		// get value from LogItem table	ExecuteSQL (		&quot;SELECT &quot; &amp; Quote ( $logItemValueFieldName )			&amp; &quot; FROM &quot; &amp; Quote ( $logItemTableName )			&amp; &quot; WHERE &quot; &amp; Quote ( $logItemLogIdFieldName ) &amp; &quot; = ?&quot;			&amp; &quot; AND UPPER ( &quot; &amp; Quote ( $logItemNameFieldName ) &amp; &quot; ) &quot; &amp; &quot; = ?&quot;		;		&quot;&quot; ;		&quot;&quot; ;		Log::id ;		Upper ( $fieldName )	)) ][ No dialog ]</StepText>
							<NoInteract state="True"/>
							<With value="Calculation"/>
							<Calculation><![CDATA[If ( not IsEmpty ( Log::logData ) ;	#Get ( Log::logData ; $fieldName ) ;		// get value from LogItem table	ExecuteSQL (		"SELECT " & Quote ( $logItemValueFieldName )			& " FROM " & Quote ( $logItemTableName )			& " WHERE " & Quote ( $logItemLogIdFieldName ) & " = ?"			& " AND UPPER ( " & Quote ( $logItemNameFieldName ) & " ) " & " = ?"		;		"" ;		"" ;		Log::id ;		Upper ( $fieldName )	))]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> </Chunk>
								<Chunk type="FunctionRef">IsEmpty</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FieldRef">
									<Field table="Log" id="2" name="logData"/>
								</Chunk>
								<Chunk type="NoRef"> ) ;	</Chunk>
								<Chunk type="CustomFunctionRef">#Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FieldRef">
									<Field table="Log" id="2" name="logData"/>
								</Chunk>
								<Chunk type="NoRef"> ; $fieldName ) ;		</Chunk>
								<Chunk type="FunctionRef">// get value from LogItem table</Chunk>
								<Chunk type="NoRef">	</Chunk>
								<Chunk type="FunctionRef">ExecuteSQL</Chunk>
								<Chunk type="NoRef"> (		&quot;SELECT &quot; &amp; </Chunk>
								<Chunk type="FunctionRef">Quote</Chunk>
								<Chunk type="NoRef"> ( $logItemValueFieldName )			&amp; &quot; FROM &quot; &amp; </Chunk>
								<Chunk type="FunctionRef">Quote</Chunk>
								<Chunk type="NoRef"> ( $logItemTableName )			&amp; &quot; WHERE &quot; &amp; </Chunk>
								<Chunk type="FunctionRef">Quote</Chunk>
								<Chunk type="NoRef"> ( $logItemLogIdFieldName ) &amp; &quot; = ?&quot;			&amp; &quot; AND UPPER ( &quot; &amp; </Chunk>
								<Chunk type="FunctionRef">Quote</Chunk>
								<Chunk type="NoRef"> ( $logItemNameFieldName ) &amp; &quot; ) &quot; &amp; &quot; = ?&quot;		;		&quot;&quot; ;		&quot;&quot; ;		</Chunk>
								<Chunk type="FieldRef">
									<Field table="Log" id="1" name="id"/>
								</Chunk>
								<Chunk type="NoRef"> ;		</Chunk>
								<Chunk type="FunctionRef">Upper</Chunk>
								<Chunk type="NoRef"> ( $fieldName )	))</Chunk>
							</DisplayCalculation>
							<SerialNumbers UpdateEntryOptions="False" UseEntryOptions="True"/>
							<Field table="Log" id="20" name="accountName"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="4" name="Log Viewer: FM: Parse Log Data">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Create record for every name/value pair stored in ErrorLog table as an errorObject.</StepText>
							<Text>    Create record for every name/value pair stored in ErrorLog table as an errorObject.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: Log</StepText>
							<Text> CONTEXT: Log</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: (let notation)</StepText>
							<Text> RETURNS: (let notation)</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    errorCode | number | error code encountered in this script. This will be evaluated as a boolean to determine if this script succeeded or failed.</StepText>
							<Text>    errorCode | number | error code encountered in this script. This will be evaluated as a boolean to determine if this script succeeded or failed.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># DEPENDENCIES:</StepText>
							<Text> DEPENDENCIES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-28	 Daniel Smith	- add go to portal tab section2014-JAN-16	 Daniel Smith	- update create record section2012-NOV-22	 Daniel Smith	- fix use of IsError custom function - added a parameter2012-NOV-20	 Daniel Smith	- updated to use new custom functions2012-NOV-16	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-28	 Daniel Smith	- add go to portal tab section2014-JAN-16	 Daniel Smith	- update create record section2012-NOV-22	 Daniel Smith	- fix use of IsError custom function - added a parameter2012-NOV-20	 Daniel Smith	- updated to use new custom functions2012-NOV-16	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># SET VARIABLES</StepText>
							<Text> SET VARIABLES</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># VALIDATE</StepText>
							<Text> VALIDATE</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [  ]</StepText>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ Get ( FoundCount ) = 0 ]</StepText>
							<Calculation><![CDATA[Get ( FoundCount ) = 0]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">FoundCount</Chunk>
								<Chunk type="NoRef"> ) = 0</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: &quot;$errorCode = GetAsNumber ( 401 ) ;¶&quot;		 // No records match the request  ]</StepText>
							<Calculation><![CDATA["$errorCode = GetAsNumber ( 401 ) ;¶"		 // No records match the request ]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( 401 ) ;¶&quot;		 </Chunk>
								<Chunk type="FunctionRef">// No records match the request </Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ IsEmpty ( Log::logData ) ]</StepText>
							<Calculation><![CDATA[IsEmpty ( Log::logData )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">IsEmpty</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FieldRef">
									<Field table="Log" id="2" name="logData"/>
								</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: &quot;$errorCode = GetAsNumber ( 10 ) ;¶&quot;		 // Requested data is missing ]</StepText>
							<Calculation><![CDATA["$errorCode = GetAsNumber ( 10 ) ;¶"		 // Requested data is missing]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( 10 ) ;¶&quot;		 </Chunk>
								<Chunk type="FunctionRef">// Requested data is missing</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># MODIFY CONTEXT</StepText>
							<Text> MODIFY CONTEXT</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ // the current layout is not based on the correct table occurenceGetValue ( Substitute ( GetFieldName ( Log::logData ) ; &quot;::&quot; ; ¶ ) ; 1 )≠Get ( LayoutTableName ) ]</StepText>
							<Calculation><![CDATA[// the current layout is not based on the correct table occurenceGetValue ( Substitute ( GetFieldName ( Log::logData ) ; "::" ; ¶ ) ; 1 )≠Get ( LayoutTableName )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// the current layout is not based on the correct table occurence</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">GetValue</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Substitute</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">GetFieldName</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FieldRef">
									<Field table="Log" id="2" name="logData"/>
								</Chunk>
								<Chunk type="NoRef"> ) ; &quot;::&quot; ; ¶ ) ; 1 )≠</Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LayoutTableName</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="6" name="Go to Layout">
							<StepText>Go to Layout [ “Log: Detail” (Log) ]</StepText>
							<LayoutDestination value="SelectedLayout"/>
							<Layout id="4" name="Log: Detail"/>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $errorCode; Value:Get ( LastError ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( LastError )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">LastError</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$errorCode</Name>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ not $errorCodeandGet(WindowMode) ≠ 0	 // Browse mode ]</StepText>
							<Calculation><![CDATA[not $errorCodeandGet(WindowMode) ≠ 0	 // Browse mode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> $errorCode</Chunk>
								<Chunk type="FunctionRef">and</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef">(</Chunk>
								<Chunk type="FunctionRef">WindowMode</Chunk>
								<Chunk type="NoRef">) ≠ 0	 </Chunk>
								<Chunk type="FunctionRef">// Browse mode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="55" name="Enter Browse Mode">
							<StepText>Enter Browse Mode</StepText>
							<Pause state="False"/>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $errorCode; Value:Get ( LastError ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( LastError )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">LastError</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$errorCode</Name>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CREATE RELATED RECORDS</StepText>
							<Text> CREATE RELATED RECORDS</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ not $errorCode ]</StepText>
							<Calculation><![CDATA[not $errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> $errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $nameList; Value:#GetNameList ( Log::logData ) ]</StepText>
							<Value>
								<Calculation><![CDATA[#GetNameList ( Log::logData )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="CustomFunctionRef">#GetNameList</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FieldRef">
										<Field table="Log" id="2" name="logData"/>
									</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$nameList</Name>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $count; Value:ValueCount ( $nameList ) ]</StepText>
							<Value>
								<Calculation><![CDATA[ValueCount ( $nameList )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">ValueCount</Chunk>
									<Chunk type="NoRef"> ( $nameList )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$count</Name>
						</Step>
						<Step enable="True" id="71" name="Loop">
							<StepText>Loop</StepText>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ // For $i from 1 to $countLet( $i = $i + 1 ; If ( $i &gt; $count ; Let ( $i = &quot;&quot; ; True ) ) ) ]</StepText>
							<Calculation><![CDATA[// For $i from 1 to $countLet( $i = $i + 1 ; If ( $i > $count ; Let ( $i = "" ; True ) ) )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// For $i from 1 to $count</Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef">( $i = $i + 1 ; </Chunk>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( $i &gt; $count ; </Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $i = &quot;&quot; ; </Chunk>
								<Chunk type="FunctionRef">True</Chunk>
								<Chunk type="NoRef"> ) ) )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># get data</StepText>
							<Text> get data</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $name; Value:GetValue ( $nameList ; $i ) ]</StepText>
							<Value>
								<Calculation><![CDATA[GetValue ( $nameList ; $i )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">GetValue</Chunk>
									<Chunk type="NoRef"> ( $nameList ; $i )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$name</Name>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $value; Value:#Get ( Log::logData ; $name ) ]</StepText>
							<Value>
								<Calculation><![CDATA[#Get ( Log::logData ; $name )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="CustomFunctionRef">#Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FieldRef">
										<Field table="Log" id="2" name="logData"/>
									</Chunk>
									<Chunk type="NoRef"> ; $name )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$value</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># create record</StepText>
							<Text> create record</Text>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ Log::magicKey; Get ( UUID ) ]</StepText>
							<Calculation><![CDATA[Get ( UUID )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">UUID</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
							<Field table="Log" id="3" name="magicKey"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># save data to the new record</StepText>
							<Text> save data to the new record</Text>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ LogItem__create::id_Log; Log::id ]</StepText>
							<Calculation><![CDATA[Log::id]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FieldRef">
									<Field table="Log" id="1" name="id"/>
								</Chunk>
							</DisplayCalculation>
							<Field table="LogItem__create" id="2" name="id_Log"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ LogItem__create::name; $name ]</StepText>
							<Calculation><![CDATA[$name]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$name</Chunk>
							</DisplayCalculation>
							<Field table="LogItem__create" id="3" name="name"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ LogItem__create::value; $value ]</StepText>
							<Calculation><![CDATA[$value]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$value</Chunk>
							</DisplayCalculation>
							<Field table="LogItem__create" id="4" name="value"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $i = $count ]</StepText>
							<Calculation><![CDATA[$i = $count]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$i = $count</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># remove saved error data from parent record</StepText>
							<Text> remove saved error data from parent record</Text>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ Log::logData; &quot;&quot; ]</StepText>
							<Calculation><![CDATA[""]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;&quot;</Chunk>
							</DisplayCalculation>
							<Field table="Log" id="2" name="logData"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="75" name="Commit Records/Requests">
							<StepText>Commit Records/Requests[ No dialog ]</StepText>
							<NoInteract state="True"/>
							<Option state="False"/>
							<ESSForceCommit state="False"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="73" name="End Loop">
							<StepText>End Loop</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># handle error</StepText>
							<Text> handle error</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="51" name="Revert Record/Request">
							<StepText>Revert Record/Request[ No dialog ]</StepText>
							<NoInteract state="True"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RESTORE CONTEXT</StepText>
							<Text> RESTORE CONTEXT</Text>
						</Step>
						<Step enable="True" id="6" name="Go to Layout">
							<StepText>Go to Layout [ original layout ]</StepText>
							<LayoutDestination value="OriginalLayout"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># GO TO PORTAL TAB</StepText>
							<Text> GO TO PORTAL TAB</Text>
						</Step>
						<Step enable="True" id="145" name="Go to Object">
							<StepText>Go to Object [ Object Name: &quot;tab.portal&quot; ]</StepText>
							<ObjectName>
								<Calculation><![CDATA["tab.portal"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;tab.portal&quot;</Chunk>
								</DisplayCalculation>
							</ObjectName>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [ Result: &quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot; ]</StepText>
							<Calculation><![CDATA["$errorCode = GetAsNumber ( " & $errorCode & " ) ;¶"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;$errorCode = GetAsNumber ( &quot; &amp; $errorCode &amp; &quot; ) ;¶&quot;</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="5" name="Log Viewer: FM: Parse All Log Data">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    For every record that contains data in logDataAsDictionary field, create related record for every name/value pair.</StepText>
							<Text>    For every record that contains data in logDataAsDictionary field, create related record for every name/value pair.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: global</StepText>
							<Text> CONTEXT: global</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># DEPENDENCIES:</StepText>
							<Text> DEPENDENCIES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Log Writer: FM: Parse Log Data</StepText>
							<Text>    Log Writer: FM: Parse Log Data</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-10	 Daniel Smith	- remove use of #Filter() custom function, to reduce dependencies	- restore error pature state2012-NOV-22	 Daniel Smith	- fix use of IsError custom function - added a parameter2012-NOV-20	 Daniel Smith	- updated to use new custom functions2012-NOV-16	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-10	 Daniel Smith	- remove use of #Filter() custom function, to reduce dependencies	- restore error pature state2012-NOV-22	 Daniel Smith	- fix use of IsError custom function - added a parameter2012-NOV-20	 Daniel Smith	- updated to use new custom functions2012-NOV-16	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTE: if running on FM13, is hosted (by FM13), and NOT currently running on server: consider performing this script on the server</StepText>
							<Text> NOTE: if running on FM13, is hosted (by FM13), and NOT currently running on server: consider performing this script on the server</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="122" name="New Window">
							<StepText>New Window (VIRTUAL WINDOW ON WEB)  [ Name: Get( ScriptName ); Height: 0; Width: 0; Top: Get( ScreenHeight ); Left: 0; Style: Document; Close: “Yes”; Minimize: “Yes”; Maximize: “Yes”; Zoom Control Area: “Yes”; Resize: “Yes” ]</StepText>
							<Name>
								<Calculation><![CDATA[Get( ScriptName )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef">( </Chunk>
									<Chunk type="FunctionRef">ScriptName</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Name>
							<Height>
								<Calculation><![CDATA[0]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">0</Chunk>
								</DisplayCalculation>
							</Height>
							<Width>
								<Calculation><![CDATA[0]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">0</Chunk>
								</DisplayCalculation>
							</Width>
							<DistanceFromTop>
								<Calculation><![CDATA[Get( ScreenHeight )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef">( </Chunk>
									<Chunk type="FunctionRef">ScreenHeight</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</DistanceFromTop>
							<DistanceFromLeft>
								<Calculation><![CDATA[0]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">0</Chunk>
								</DisplayCalculation>
							</DistanceFromLeft>
							<NewWndStyles Styles="983554"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Left ( Get ( ApplicationVersion ) ; 3 ) = &quot;Pro&quot;orLeft ( Get ( ApplicationVersion ) ; 7 ) = &quot;Runtime&quot;orGet ( ScriptParameter ) = 3	 // iOSorGet ( ScriptParameter ) = 4	 // WebDirect ]</StepText>
							<Calculation><![CDATA[Left ( Get ( ApplicationVersion ) ; 3 ) = "Pro"orLeft ( Get ( ApplicationVersion ) ; 7 ) = "Runtime"orGet ( ScriptParameter ) = 3	 // iOSorGet ( ScriptParameter ) = 4	 // WebDirect]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ; 3 ) = &quot;Pro&quot;</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ; 7 ) = &quot;Runtime&quot;</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) = 3	 </Chunk>
								<Chunk type="FunctionRef">// iOS</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) = 4	 </Chunk>
								<Chunk type="FunctionRef">// WebDirect</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="79" name="Freeze Window">
							<StepText>Freeze Window</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="6" name="Go to Layout">
							<StepText>Go to Layout [ “Log: Detail” (Log) ]</StepText>
							<LayoutDestination value="SelectedLayout"/>
							<Layout id="4" name="Log: Detail"/>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $ErrorCaptureState; Value:Get ( ErrorCaptureState ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( ErrorCaptureState )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ErrorCaptureState</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$ErrorCaptureState</Name>
						</Step>
						<Step enable="True" id="86" name="Set Error Capture">
							<StepText>Set Error Capture [ On ]</StepText>
							<Set state="True"/>
						</Step>
						<Step enable="True" id="22" name="Enter Find Mode">
							<StepText>Enter Find Mode [  ]</StepText>
							<Pause state="False"/>
							<Restore state="False"/>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ Log::logData; &quot;*&quot; ]</StepText>
							<Calculation><![CDATA["*"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;*&quot;</Chunk>
							</DisplayCalculation>
							<Field table="Log" id="2" name="logData"/>
						</Step>
						<Step enable="True" id="28" name="Perform Find">
							<StepText>Perform Find [  ]</StepText>
							<Restore state="False"/>
						</Step>
						<Step enable="True" id="86" name="Set Error Capture">
							<StepText>Set Error Capture [ Off ]</StepText>
							<Set state="False"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $ErrorCaptureState ]</StepText>
							<Calculation><![CDATA[$ErrorCaptureState]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$ErrorCaptureState</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="86" name="Set Error Capture">
							<StepText>Set Error Capture [ On ]</StepText>
							<Set state="True"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( FoundCount ) &gt; 0 ]</StepText>
							<Calculation><![CDATA[Get ( FoundCount ) > 0]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">FoundCount</Chunk>
								<Chunk type="NoRef"> ) &gt; 0</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="16" name="Go to Record/Request/Page">
							<StepText>Go to Record/Request/Page[ First ]</StepText>
							<NoInteract state="False"/>
							<RowPageLocation value="First"/>
						</Step>
						<Step enable="True" id="71" name="Loop">
							<StepText>Loop</StepText>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Viewer: FM: Parse Log Data” ]</StepText>
							<Script id="4" name="Log Viewer: FM: Parse Log Data"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ // Save script result to local variablesLet ( [	~data = Get ( ScriptResult ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode) ]</StepText>
							<Calculation><![CDATA[// Save script result to local variablesLet ( [	~data = Get ( ScriptResult ) ;	~evaluationErrorCode = 		EvaluationError ( Evaluate (			"Let ( [¶"			& ~data 			& "¶! = \"\" ] ; \"\" )"		) )	;	$errorCode = If ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode)]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">// Save script result to local variables</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( [	~data = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptResult</Chunk>
								<Chunk type="NoRef"> ) ;	~evaluationErrorCode = 		</Chunk>
								<Chunk type="FunctionRef">EvaluationError</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Evaluate</Chunk>
								<Chunk type="NoRef"> (			&quot;Let ( [¶&quot;			&amp; ~data 			&amp; &quot;¶! = \&quot;\&quot; ] ; \&quot;\&quot; )&quot;		) )	;	$errorCode = </Chunk>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( ~evaluationErrorCode ; ~evaluationErrorCode ; $errorCode )] ;	$errorCode)</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="16" name="Go to Record/Request/Page">
							<StepText>Go to Record/Request/Page[ Next; Exit after last ]</StepText>
							<NoInteract state="False"/>
							<Exit state="True"/>
							<RowPageLocation value="Next"/>
						</Step>
						<Step enable="True" id="73" name="End Loop">
							<StepText>End Loop</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="121" name="Close Window">
							<StepText>Close Window [ Current Window ]</StepText>
							<LimitToWindowsOfCurrentFile state="True"/>
							<Window value="Current"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="205" name="Log Viewer: FM: Delete All Records">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Delete all records in the file.</StepText>
							<Text>    Delete all records in the file.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: global</StepText>
							<Text> CONTEXT: global</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># NOTES:</StepText>
							<Text> NOTES:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Since deleting records from a hosted file can be slow, this script is designed to run on the server.</StepText>
							<Text>    Since deleting records from a hosted file can be slow, this script is designed to run on the server.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    It could easily be modified to delete only old records, if you choose.</StepText>
							<Text>    It could easily be modified to delete only old records, if you choose.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-FEB-03	 Daniel Smith	- Created</StepText>
							<Text>    2014-FEB-03	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># this script is disabled by default, for safety</StepText>
							<Text> this script is disabled by default, for safety</Text>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># USER CONFIRMATION</StepText>
							<Text> USER CONFIRMATION</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Left ( Get ( ApplicationVersion ) ; 3 ) = &quot;Pro&quot;orLeft ( Get ( ApplicationVersion ) ; 7 ) = &quot;Runtime&quot;orGet ( ScriptParameter ) = 3	 // iOSorGet ( ScriptParameter ) = 4	 // WebDirect ]</StepText>
							<Calculation><![CDATA[Left ( Get ( ApplicationVersion ) ; 3 ) = "Pro"orLeft ( Get ( ApplicationVersion ) ; 7 ) = "Runtime"orGet ( ScriptParameter ) = 3	 // iOSorGet ( ScriptParameter ) = 4	 // WebDirect]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ; 3 ) = &quot;Pro&quot;</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Left</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ; 7 ) = &quot;Runtime&quot;</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) = 3	 </Chunk>
								<Chunk type="FunctionRef">// iOS</Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"></Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ScriptParameter</Chunk>
								<Chunk type="NoRef"> ) = 4	 </Chunk>
								<Chunk type="FunctionRef">// WebDirect</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;Confirm&quot;; Message: &quot;Please confirm you would like to Delete ALL log records.&quot;; Default Button: “Cancel”, Commit: “Yes”; Button 2: “Delete”, Commit: “No” ]</StepText>
							<Title>
								<Calculation><![CDATA["Confirm"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Confirm&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA["Please confirm you would like to Delete ALL log records."]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Please confirm you would like to Delete ALL log records.&quot;</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["Cancel"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;Cancel&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False">
									<Calculation><![CDATA["Delete"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;Delete&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( LastMessageChoice ) = 1	 // Cancel ]</StepText>
							<Calculation><![CDATA[Get ( LastMessageChoice ) = 1	 // Cancel]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastMessageChoice</Chunk>
								<Chunk type="NoRef"> ) = 1	 </Chunk>
								<Chunk type="FunctionRef">// Cancel</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;Confirm Again&quot;; Message: &quot;This script removes all data, so please confirm again that you would like to Delete ALL log records.&quot;; Default Button: “Cancel”, Commit: “Yes”; Button 2: “Delete”, Commit: “No” ]</StepText>
							<Title>
								<Calculation><![CDATA["Confirm Again"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;Confirm Again&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA["This script removes all data, so please confirm again that you would like to Delete ALL log records."]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;This script removes all data, so please confirm again that you would like to Delete ALL log records.&quot;</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["Cancel"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;Cancel&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False">
									<Calculation><![CDATA["Delete"]]></Calculation>
									<DisplayCalculation>
										<Chunk type="NoRef">&quot;Delete&quot;</Chunk>
									</DisplayCalculation>
								</Button>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( LastMessageChoice ) = 1	 // Cancel ]</StepText>
							<Calculation><![CDATA[Get ( LastMessageChoice ) = 1	 // Cancel]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastMessageChoice</Chunk>
								<Chunk type="NoRef"> ) = 1	 </Chunk>
								<Chunk type="FunctionRef">// Cancel</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># DELETE LOG RECORDS</StepText>
							<Text> DELETE LOG RECORDS</Text>
						</Step>
						<Step enable="True" id="71" name="Loop">
							<StepText>Loop</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># single-pass loop for error trapping</StepText>
							<Text> single-pass loop for error trapping</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</StepText>
							<Text>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</Text>
						</Step>
						<Step enable="True" id="122" name="New Window">
							<StepText>New Window (VIRTUAL WINDOW ON WEB)  [ Name: Get( ScriptName ); Height: 0; Width: 0; Top: Get( ScreenHeight ); Left: 0; Style: Document; Close: “Yes”; Minimize: “Yes”; Maximize: “Yes”; Zoom Control Area: “Yes”; Resize: “Yes” ]</StepText>
							<Name>
								<Calculation><![CDATA[Get( ScriptName )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef">( </Chunk>
									<Chunk type="FunctionRef">ScriptName</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Name>
							<Height>
								<Calculation><![CDATA[0]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">0</Chunk>
								</DisplayCalculation>
							</Height>
							<Width>
								<Calculation><![CDATA[0]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">0</Chunk>
								</DisplayCalculation>
							</Width>
							<DistanceFromTop>
								<Calculation><![CDATA[Get( ScreenHeight )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef">( </Chunk>
									<Chunk type="FunctionRef">ScreenHeight</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</DistanceFromTop>
							<DistanceFromLeft>
								<Calculation><![CDATA[0]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">0</Chunk>
								</DisplayCalculation>
							</DistanceFromLeft>
							<NewWndStyles Styles="983554"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="6" name="Go to Layout">
							<StepText>Go to Layout [ “Log: Blank” (Log) ]</StepText>
							<LayoutDestination value="SelectedLayout"/>
							<Layout id="10" name="Log: Blank"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="23" name="Show All Records">
							<StepText>Show All Records</StepText>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( FoundCount ) ]</StepText>
							<Calculation><![CDATA[Get ( FoundCount )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">FoundCount</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="10" name="Delete All Records">
							<StepText>Delete All Records[ No dialog ]</StepText>
							<NoInteract state="True"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#//////////////////////////////////////////////////</StepText>
							<Text>//////////////////////////////////////////////////</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># end single-pass loop for error trapping</StepText>
							<Text> end single-pass loop for error trapping</Text>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ True ]</StepText>
							<Calculation><![CDATA[True]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">True</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="73" name="End Loop">
							<StepText>End Loop</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel1Error ; &quot;error deleting Log records&quot; ) ]</StepText>
							<Calculation><![CDATA[LogData ( LogLevel1Error ; "error deleting Log records" )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="CustomFunctionRef">LogData</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="CustomFunctionRef">LogLevel1Error</Chunk>
								<Chunk type="NoRef"> ; &quot;error deleting Log records&quot; )</Chunk>
							</DisplayCalculation>
							<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># DELETE ORPHANED LOGITEM RECORDS</StepText>
							<Text> DELETE ORPHANED LOGITEM RECORDS</Text>
						</Step>
						<Step enable="True" id="71" name="Loop">
							<StepText>Loop</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># single-pass loop for error trapping</StepText>
							<Text> single-pass loop for error trapping</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</StepText>
							<Text>\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\</Text>
						</Step>
						<Step enable="True" id="6" name="Go to Layout">
							<StepText>Go to Layout [ “Log Item: Detail” (LogItem) ]</StepText>
							<LayoutDestination value="SelectedLayout"/>
							<Layout id="3" name="Log Item: Detail"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="22" name="Enter Find Mode">
							<StepText>Enter Find Mode [  ]</StepText>
							<Pause state="False"/>
							<Restore state="False"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ Log::id; &quot;*&quot; ]</StepText>
							<Calculation><![CDATA["*"]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">&quot;*&quot;</Chunk>
							</DisplayCalculation>
							<Field table="Log" id="1" name="id"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="25" name="Omit Record">
							<StepText>Omit Record</StepText>
						</Step>
						<Step enable="True" id="86" name="Set Error Capture">
							<StepText>Set Error Capture [ On ]</StepText>
							<Set state="True"/>
						</Step>
						<Step enable="True" id="28" name="Perform Find">
							<StepText>Perform Find [  ]</StepText>
							<Restore state="False"/>
						</Step>
						<Step enable="True" id="86" name="Set Error Capture">
							<StepText>Set Error Capture [ Off ]</StepText>
							<Set state="False"/>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( FoundCount ) ]</StepText>
							<Calculation><![CDATA[Get ( FoundCount )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">FoundCount</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="10" name="Delete All Records">
							<StepText>Delete All Records[ No dialog ]</StepText>
							<NoInteract state="True"/>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ Let ( $errorCode = Get ( LastError ) ; $errorCode ) ]</StepText>
							<Calculation><![CDATA[Let ( $errorCode = Get ( LastError ) ; $errorCode )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Let</Chunk>
								<Chunk type="NoRef"> ( $errorCode = </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">LastError</Chunk>
								<Chunk type="NoRef"> ) ; $errorCode )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#//////////////////////////////////////////////////</StepText>
							<Text>//////////////////////////////////////////////////</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># end single-pass loop for error trapping</StepText>
							<Text> end single-pass loop for error trapping</Text>
						</Step>
						<Step enable="True" id="72" name="Exit Loop If">
							<StepText>Exit Loop If [ True ]</StepText>
							<Calculation><![CDATA[True]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">True</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="73" name="End Loop">
							<StepText>End Loop</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $errorCode ]</StepText>
							<Calculation><![CDATA[$errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="1" name="Perform Script">
							<StepText>Perform Script [ “Log Writer: FM: Create Entry ( logData )”; Parameter: LogData ( LogLevel1Error ; &quot;error deleting LogItem records&quot; ) ]</StepText>
							<Calculation><![CDATA[LogData ( LogLevel1Error ; "error deleting LogItem records" )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="CustomFunctionRef">LogData</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="CustomFunctionRef">LogLevel1Error</Chunk>
								<Chunk type="NoRef"> ; &quot;error deleting LogItem records&quot; )</Chunk>
							</DisplayCalculation>
							<Script id="34" name="Log Writer: FM: Create Entry ( logData )"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="121" name="Close Window">
							<StepText>Close Window [ Current Window ]</StepText>
							<LimitToWindowsOfCurrentFile state="True"/>
							<Window value="Current"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
			</Group>
			<Group groupCollapsed="True" includeInMenu="False" id="159" name="Log Viewer: FM: Private">
				<Script includeInMenu="False" runFullAccess="False" id="158" name="Log Viewer: FM: Clear Filter: Name">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Delete filter text and commit the record so no fields are highlighted.</StepText>
							<Text>    Delete filter text and commit the record so no fields are highlighted.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: Log</StepText>
							<Text> CONTEXT: Log</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-28	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-28	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># use Insert step so it field&apos;s script trigger runs</StepText>
							<Text> use Insert step so it field&apos;s script trigger runs</Text>
						</Step>
						<Step enable="True" id="61" name="Insert Text">
							<StepText>Insert Text [ Log::FILTER_NAME ][ Select ]</StepText>
							<SelectAll state="True"/>
							<Field table="Log" id="17" name="FILTER_NAME"/>
						</Step>
						<Step enable="True" id="75" name="Commit Records/Requests">
							<StepText>Commit Records/Requests[ Perform with dialog (NOT COMPATIBLE) ]</StepText>
							<NoInteract state="False"/>
							<Option state="False"/>
							<ESSForceCommit state="False"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="157" name="Log Viewer: FM: Clear Filter: Value">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Delete filter text and commit the record so no fields are highlighted.</StepText>
							<Text>    Delete filter text and commit the record so no fields are highlighted.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: Log</StepText>
							<Text> CONTEXT: Log</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-28	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-28	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># use Insert step so it field&apos;s script trigger runs</StepText>
							<Text> use Insert step so it field&apos;s script trigger runs</Text>
						</Step>
						<Step enable="True" id="61" name="Insert Text">
							<StepText>Insert Text [ Log::FILTER_VALUE ][ Select ]</StepText>
							<SelectAll state="True"/>
							<Field table="Log" id="18" name="FILTER_VALUE"/>
						</Step>
						<Step enable="True" id="75" name="Commit Records/Requests">
							<StepText>Commit Records/Requests[ Perform with dialog (NOT COMPATIBLE) ]</StepText>
							<NoInteract state="False"/>
							<Option state="False"/>
							<ESSForceCommit state="False"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="108" name="Log Viewer: FM: Filter OOModify Trigger">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Refresh portal with data that was just entered.</StepText>
							<Text>    Refresh portal with data that was just entered.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: Log</StepText>
							<Text> CONTEXT: Log</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    since this script is run by a trigger, no value is returned to prevent modifying the ScriptResult in a previously running script</StepText>
							<Text>    since this script is run by a trigger, no value is returned to prevent modifying the ScriptResult in a previously running script</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-10	 Daniel Smith	- update error trapping2013-JAN-14	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-10	 Daniel Smith	- update error trapping2013-JAN-14	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># SET VARIABLES</StepText>
							<Text> SET VARIABLES</Text>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $ActiveSelectionStart; Value:Get ( ActiveSelectionStart ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( ActiveSelectionStart )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ActiveSelectionStart</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$ActiveSelectionStart</Name>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $ActiveSelectionSize; Value:Get ( ActiveSelectionSize ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( ActiveSelectionSize )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ActiveSelectionSize</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$ActiveSelectionSize</Name>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $ActiveFieldName_FullyQualified; Value:GetFieldName ( GetField ( Get ( ActiveFieldName ) ) ) ]</StepText>
							<Value>
								<Calculation><![CDATA[GetFieldName ( GetField ( Get ( ActiveFieldName ) ) )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">GetFieldName</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">GetField</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ActiveFieldName</Chunk>
									<Chunk type="NoRef"> ) ) )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$ActiveFieldName_FullyQualified</Name>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># UPDATE PORTAL</StepText>
							<Text> UPDATE PORTAL</Text>
						</Step>
						<Step enable="True" id="75" name="Commit Records/Requests">
							<StepText>Commit Records/Requests[ Perform with dialog (NOT COMPATIBLE) ]</StepText>
							<NoInteract state="False"/>
							<Option state="False"/>
							<ESSForceCommit state="False"/>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ Log::REFRESH_RELATIONSHIP; 1 ]</StepText>
							<Calculation><![CDATA[1]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">1</Chunk>
							</DisplayCalculation>
							<Field table="Log" id="19" name="REFRESH_RELATIONSHIP"/>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RESTORE CONTEXT</StepText>
							<Text> RESTORE CONTEXT</Text>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ $ActiveFieldName_FullyQualified = GetFieldName ( Log::FILTER_NAME ) ]</StepText>
							<Calculation><![CDATA[$ActiveFieldName_FullyQualified = GetFieldName ( Log::FILTER_NAME )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$ActiveFieldName_FullyQualified = </Chunk>
								<Chunk type="FunctionRef">GetFieldName</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FieldRef">
									<Field table="Log" id="17" name="FILTER_NAME"/>
								</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="17" name="Go to Field">
							<StepText>Go to Field [ Log::FILTER_NAME ]</StepText>
							<SelectAll state="False"/>
							<Field table="Log" id="17" name="FILTER_NAME"/>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $errorCode; Value:Get ( LastError ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( LastError )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">LastError</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$errorCode</Name>
						</Step>
						<Step enable="True" id="125" name="Else If">
							<StepText>Else If [ $ActiveFieldName_FullyQualified = GetFieldName ( Log::FILTER_VALUE ) ]</StepText>
							<Calculation><![CDATA[$ActiveFieldName_FullyQualified = GetFieldName ( Log::FILTER_VALUE )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="NoRef">$ActiveFieldName_FullyQualified = </Chunk>
								<Chunk type="FunctionRef">GetFieldName</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FieldRef">
									<Field table="Log" id="18" name="FILTER_VALUE"/>
								</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="17" name="Go to Field">
							<StepText>Go to Field [ Log::FILTER_VALUE ]</StepText>
							<SelectAll state="False"/>
							<Field table="Log" id="18" name="FILTER_VALUE"/>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $errorCode; Value:Get ( LastError ) ]</StepText>
							<Value>
								<Calculation><![CDATA[Get ( LastError )]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">LastError</Chunk>
									<Chunk type="NoRef"> )</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$errorCode</Name>
						</Step>
						<Step enable="True" id="69" name="Else">
							<StepText>Else</StepText>
						</Step>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $errorCode; Value:509	  // Field requires a valid value   ]</StepText>
							<Value>
								<Calculation><![CDATA[509	  // Field requires a valid value  ]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">509	  </Chunk>
									<Chunk type="FunctionRef">// Field requires a valid value  </Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$errorCode</Name>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ not $errorCode ]</StepText>
							<Calculation><![CDATA[not $errorCode]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> $errorCode</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="130" name="Set Selection">
							<StepText>Set Selection [ Start Position: $ActiveSelectionStart; End Position: $ActiveSelectionSize ]</StepText>
							<StartPosition>
								<Calculation><![CDATA[$ActiveSelectionStart]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">$ActiveSelectionStart</Chunk>
								</DisplayCalculation>
							</StartPosition>
							<EndPosition>
								<Calculation><![CDATA[$ActiveSelectionSize]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">$ActiveSelectionSize</Chunk>
								</DisplayCalculation>
							</EndPosition>
						</Step>
						<Step enable="True" id="69" name="Else">
							<StepText>Else</StepText>
						</Step>
						<Step enable="True" id="87" name="Show Custom Dialog">
							<StepText>Show Custom Dialog [ Title: &quot;ERROR&quot;; Message: &quot;script: &quot; &amp; Get ( ScriptName ) &amp; ¶&amp; &quot;error code: &quot; &amp; $errorCode; Default Button: “OK”, Commit: “Yes” ]</StepText>
							<Title>
								<Calculation><![CDATA["ERROR"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;ERROR&quot;</Chunk>
								</DisplayCalculation>
							</Title>
							<Message>
								<Calculation><![CDATA["script: " & Get ( ScriptName ) & ¶& "error code: " & $errorCode]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;script: &quot; &amp; </Chunk>
									<Chunk type="FunctionRef">Get</Chunk>
									<Chunk type="NoRef"> ( </Chunk>
									<Chunk type="FunctionRef">ScriptName</Chunk>
									<Chunk type="NoRef"> ) &amp; ¶&amp; &quot;error code: &quot; &amp; $errorCode</Chunk>
								</DisplayCalculation>
							</Message>
							<Buttons>
								<Button CommitState="True">
									<Calculation><![CDATA["OK"]]></Calculation>
								</Button>
								<Button CommitState="False"/>
								<Button CommitState="False"/>
							</Buttons>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="156" name="Log Viewer: FM: Detail OnRecordLoad Trigger">
					<StepList>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PURPOSE:</StepText>
							<Text> PURPOSE:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    Go to the tab that contains data.</StepText>
							<Text>    Go to the tab that contains data.</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># CONTEXT: Log</StepText>
							<Text> CONTEXT: Log</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># PARAMETERS: none</StepText>
							<Text> PARAMETERS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># RETURNS: none</StepText>
							<Text> RETURNS: none</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    since this script is run by a trigger, no value is returned to prevent modifying the ScriptResult in a previously running script</StepText>
							<Text>    since this script is run by a trigger, no value is returned to prevent modifying the ScriptResult in a previously running script</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText># REVISIONS:</StepText>
							<Text> REVISIONS:</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#    2014-JAN-28	 Daniel Smith	- Created</StepText>
							<Text>    2014-JAN-28	 Daniel Smith	- Created</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>################################################################################</StepText>
							<Text>###############################################################################</Text>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ IsEmpty ( Log::logData ) ]</StepText>
							<Calculation><![CDATA[IsEmpty ( Log::logData )]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">IsEmpty</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FieldRef">
									<Field table="Log" id="2" name="logData"/>
								</Chunk>
								<Chunk type="NoRef"> )</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ If ( GetAsNumber ( Get ( ApplicationVersion ) ) ≥ 13 ;	not GetLayoutObjectAttribute ( &quot;tab.portal&quot; ; &quot;isFrontPanel&quot; ) ;	not GetLayoutObjectAttribute ( &quot;tab.portal&quot; ; &quot;isFrontTabPanel&quot; )) ]</StepText>
							<Calculation><![CDATA[If ( GetAsNumber ( Get ( ApplicationVersion ) ) ≥ 13 ;	not GetLayoutObjectAttribute ( "tab.portal" ; "isFrontPanel" ) ;	not GetLayoutObjectAttribute ( "tab.portal" ; "isFrontTabPanel" ))]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">GetAsNumber</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ) ≥ 13 ;	</Chunk>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> </Chunk>
								<Chunk type="FunctionRef">GetLayoutObjectAttribute</Chunk>
								<Chunk type="NoRef"> ( &quot;tab.portal&quot; ; &quot;isFrontPanel&quot; ) ;	</Chunk>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> </Chunk>
								<Chunk type="FunctionRef">GetLayoutObjectAttribute</Chunk>
								<Chunk type="NoRef"> ( &quot;tab.portal&quot; ; &quot;isFrontTabPanel&quot; ))</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="145" name="Go to Object">
							<StepText>Go to Object [ Object Name: &quot;tab.portal&quot; ]</StepText>
							<ObjectName>
								<Calculation><![CDATA["tab.portal"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;tab.portal&quot;</Chunk>
								</DisplayCalculation>
							</ObjectName>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="69" name="Else">
							<StepText>Else</StepText>
						</Step>
						<Step enable="True" id="68" name="If">
							<StepText>If [ If ( GetAsNumber ( Get ( ApplicationVersion ) ) ≥ 13 ;	not GetLayoutObjectAttribute ( &quot;tab.logData&quot; ; &quot;isFrontPanel&quot; ) ;	not GetLayoutObjectAttribute ( &quot;tab.logData&quot; ; &quot;isFrontTabPanel&quot; )) ]</StepText>
							<Calculation><![CDATA[If ( GetAsNumber ( Get ( ApplicationVersion ) ) ≥ 13 ;	not GetLayoutObjectAttribute ( "tab.logData" ; "isFrontPanel" ) ;	not GetLayoutObjectAttribute ( "tab.logData" ; "isFrontTabPanel" ))]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">If</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">GetAsNumber</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ApplicationVersion</Chunk>
								<Chunk type="NoRef"> ) ) ≥ 13 ;	</Chunk>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> </Chunk>
								<Chunk type="FunctionRef">GetLayoutObjectAttribute</Chunk>
								<Chunk type="NoRef"> ( &quot;tab.logData&quot; ; &quot;isFrontPanel&quot; ) ;	</Chunk>
								<Chunk type="FunctionRef">not</Chunk>
								<Chunk type="NoRef"> </Chunk>
								<Chunk type="FunctionRef">GetLayoutObjectAttribute</Chunk>
								<Chunk type="NoRef"> ( &quot;tab.logData&quot; ; &quot;isFrontTabPanel&quot; ))</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="145" name="Go to Object">
							<StepText>Go to Object [ Object Name: &quot;tab.logData&quot; ]</StepText>
							<ObjectName>
								<Calculation><![CDATA["tab.logData"]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">&quot;tab.logData&quot;</Chunk>
								</DisplayCalculation>
							</ObjectName>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
						<Step enable="True" id="103" name="Exit Script">
							<StepText>Exit Script [  ]</StepText>
						</Step>
						<Step enable="True" id="89" name="Comment">
							<StepText>#</StepText>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="225" name="Log Viewer: FM: Toggle Hide">
					<StepList>
						<Step enable="True" id="141" name="Set Variable">
							<StepText>Set Variable [ $$LOGVIEWERFM.HIDE; Value:not $$LOGVIEWERFM.HIDE ]</StepText>
							<Value>
								<Calculation><![CDATA[not $$LOGVIEWERFM.HIDE]]></Calculation>
								<DisplayCalculation>
									<Chunk type="FunctionRef">not</Chunk>
									<Chunk type="NoRef"> $$LOGVIEWERFM.HIDE</Chunk>
								</DisplayCalculation>
							</Value>
							<Repetition>
								<Calculation><![CDATA[1]]></Calculation>
								<DisplayCalculation>
									<Chunk type="NoRef">1</Chunk>
								</DisplayCalculation>
							</Repetition>
							<Name>$$LOGVIEWERFM.HIDE</Name>
						</Step>
						<Step enable="True" id="76" name="Set Field">
							<StepText>Set Field [ Log::REFRESH_RELATIONSHIP; True ]</StepText>
							<Calculation><![CDATA[True]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">True</Chunk>
							</DisplayCalculation>
							<Field table="Log" id="19" name="REFRESH_RELATIONSHIP"/>
						</Step>
						<Step enable="True" id="80" name="Refresh Window">
							<StepText>Refresh Window</StepText>
							<Option state="False"/>
							<FlushSQLData state="False"/>
						</Step>
					</StepList>
				</Script>
				<Script includeInMenu="False" runFullAccess="False" id="226" name="Log Viewer: FM: Detail Arrow Button">
					<StepList>
						<Step enable="True" id="68" name="If">
							<StepText>If [ Get ( ActiveModifierKeys ) = 8 or Get ( ActiveModifierKeys ) = 10 /* Alt/Option */ ]</StepText>
							<Calculation><![CDATA[Get ( ActiveModifierKeys ) = 8 or Get ( ActiveModifierKeys ) = 10 /* Alt/Option */]]></Calculation>
							<DisplayCalculation>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ActiveModifierKeys</Chunk>
								<Chunk type="NoRef"> ) = 8 </Chunk>
								<Chunk type="FunctionRef">or</Chunk>
								<Chunk type="NoRef"> </Chunk>
								<Chunk type="FunctionRef">Get</Chunk>
								<Chunk type="NoRef"> ( </Chunk>
								<Chunk type="FunctionRef">ActiveModifierKeys</Chunk>
								<Chunk type="NoRef"> ) = 10 /* Alt/Option */</Chunk>
							</DisplayCalculation>
						</Step>
						<Step enable="True" id="79" name="Freeze Window">
							<StepText>Freeze Window</StepText>
						</Step>
						<Step enable="True" id="74" name="Go to Related Record">
							<StepText>Go to Related Record [ From table: “LogItem”; Using layout: “Log Item: Detail” (LogItem) ][ Show only related records ]</StepText>
							<Option state="False"/>
							<MatchAllRecords state="False"/>
							<ShowInNewWindow state="False"/>
							<Restore state="True"/>
							<LayoutDestination value="SelectedLayout"/>
							<NewWndStyles Styles="983554"/>
							<Table id="1065091" name="LogItem"/>
							<Layout id="3" name="Log Item: Detail"/>
						</Step>
						<Step enable="True" id="17" name="Go to Field">
							<StepText>Go to Field [ LogItem::name ]</StepText>
							<SelectAll state="False"/>
							<Field table="LogItem" id="3" name="name"/>
						</Step>
						<Step enable="True" id="22" name="Enter Find Mode">
							<StepText>Enter Find Mode [  ]</StepText>
							<Pause state="False"/>
							<Restore state="False"/>
						</Step>
						<Step enable="True" id="12" name="Insert from Last Visited">
							<StepText>Insert from Last Visited [ LogItem::name ][ Select ]</StepText>
							<SelectAll state="True"/>
							<Field table="LogItem" id="3" name="name"/>
						</Step>
						<Step enable="True" id="12" name="Insert from Last Visited">
							<StepText>Insert from Last Visited [ LogItem::value ][ Select ]</StepText>
							<SelectAll state="True"/>
							<Field table="LogItem" id="4" name="value"/>
						</Step>
						<Step enable="True" id="28" name="Perform Find">
							<StepText>Perform Find [  ]</StepText>
							<Restore state="False"/>
						</Step>
						<Step enable="True" id="74" name="Go to Related Record">
							<StepText>Go to Related Record [ From table: “Log”; Using layout: “Log: List” (Log) ][ Show only related records; Match found set ]</StepText>
							<Option state="False"/>
							<MatchAllRecords state="True"/>
							<ShowInNewWindow state="False"/>
							<Restore state="True"/>
							<LayoutDestination value="SelectedLayout"/>
							<NewWndStyles Styles="983554"/>
							<Table id="1065090" name="Log"/>
							<Layout id="2" name="Log: List"/>
						</Step>
						<Step enable="True" id="69" name="Else">
							<StepText>Else</StepText>
						</Step>
						<Step enable="True" id="74" name="Go to Related Record">
							<StepText>Go to Related Record [ From table: “LogItem”; Using layout: “Log Item: Detail” (LogItem) ][ Show only related records ]</StepText>
							<Option state="False"/>
							<MatchAllRecords state="False"/>
							<ShowInNewWindow state="False"/>
							<Restore state="True"/>
							<LayoutDestination value="SelectedLayout"/>
							<NewWndStyles Styles="983554"/>
							<Table id="1065091" name="LogItem"/>
							<Layout id="3" name="Log Item: Detail"/>
						</Step>
						<Step enable="True" id="70" name="End If">
							<StepText>End If</StepText>
						</Step>
					</StepList>
				</Script>
			</Group>
		</Group>
	</Group>
</ScriptCatalog>
<AccountCatalog>
	<Account id="1" privilegeSet="[Read-Only Access]" emptyPassword="False" changePasswordOnNextLogin="False" managedBy="FileMaker" status="Inactive" name="[Guest]">
		<Description/>
	</Account>
	<Account id="2" privilegeSet="[Full Access]" emptyPassword="True" changePasswordOnNextLogin="False" managedBy="FileMaker" status="Active" name="Admin">
		<Description/>
	</Account>
	<Account id="3" privilegeSet="create" emptyPassword="True" changePasswordOnNextLogin="False" managedBy="FileMaker" status="Active" name="create">
		<Description>test account</Description>
	</Account>
	<Account id="5" privilegeSet="create and view" emptyPassword="True" changePasswordOnNextLogin="False" managedBy="FileMaker" status="Active" name="create and view">
		<Description>test account</Description>
	</Account>
</AccountCatalog>
<PrivilegesCatalog>
	<PrivilegeSet comment="access to everything" id="1" allowModifyPassword="True" managedExtended="True" menu="All" idleDisconnect="False" overrideValidationWarning="True" exporting="True" printing="True" name="[Full Access]">
		<Records value="CreateEditDelete"/>
		<Layouts value="Modifiable" allowCreation="True"/>
		<ValueLists value="Modifiable" allowCreation="True"/>
		<Scripts value="Modifiable" allowCreation="True"/>
	</PrivilegeSet>
	<PrivilegeSet comment="write access to all records, no design access" id="2" allowModifyPassword="True" managedExtended="False" menu="All" idleDisconnect="True" overrideValidationWarning="False" exporting="True" printing="True" name="[Data Entry Only]">
		<Records value="CreateEditDelete"/>
		<Layouts value="ViewOnly" allowCreation="False"/>
		<ValueLists value="ViewOnly" allowCreation="False"/>
		<Scripts value="ExecutableOnly" allowCreation="False"/>
	</PrivilegeSet>
	<PrivilegeSet comment="read access to all records, no design access, write access to all global fields" id="3" allowModifyPassword="True" managedExtended="False" menu="All" idleDisconnect="True" overrideValidationWarning="False" exporting="True" printing="True" name="[Read-Only Access]">
		<Records value="ViewOnly"/>
		<Layouts value="ViewOnly" allowCreation="False"/>
		<ValueLists value="ViewOnly" allowCreation="False"/>
		<Scripts value="ExecutableOnly" allowCreation="False"/>
	</PrivilegeSet>
	<PrivilegeSet comment="create entries only, not view: for the average user" id="4" allowModifyPassword="False" managedExtended="False" menu="Minimal" idleDisconnect="True" overrideValidationWarning="False" exporting="False" printing="False" name="create">
		<Records value="Custom">
			<TableList>
				<BaseTable id="130" name="Log">
					<Create value="True"/>
					<View value="False"/>
					<Edit value="False"/>
					<Delete value="False"/>
					<FieldAccess value="Limited">
						<FieldList>
							<Field accessRestriction="NoAccess" id="1" name="id"/>
							<Field accessRestriction="Modifiable" id="2" name="logData"/>
							<Field accessRestriction="NoAccess" id="3" name="magicKey"/>
							<Field accessRestriction="NoAccess" id="6" name="creationHostTimestamp"/>
							<Field accessRestriction="NoAccess" id="7" name="checked"/>
							<Field accessRestriction="NoAccess" id="8" name="notes"/>
							<Field accessRestriction="NoAccess" id="10" name="logLevel"/>
							<Field accessRestriction="NoAccess" id="11" name="errorType"/>
							<Field accessRestriction="NoAccess" id="12" name="errorCode"/>
							<Field accessRestriction="NoAccess" id="13" name="errorDescription"/>
							<Field accessRestriction="NoAccess" id="14" name="errorInfo"/>
							<Field accessRestriction="NoAccess" id="15" name="scriptName"/>
							<Field accessRestriction="NoAccess" id="16" name="fileName"/>
							<Field accessRestriction="NoAccess" id="17" name="FILTER_NAME"/>
							<Field accessRestriction="NoAccess" id="18" name="FILTER_VALUE"/>
							<Field accessRestriction="NoAccess" id="19" name="REFRESH_RELATIONSHIP"/>
							<Field accessRestriction="NoAccess" id="20" name="accountName"/>
							<Field accessRestriction="NoAccess" name="[Any New Field]"/>
						</FieldList>
					</FieldAccess>
				</BaseTable>
				<BaseTable id="131" name="LogItem">
					<Create value="False"/>
					<View value="False"/>
					<Edit value="False"/>
					<Delete value="False"/>
					<FieldAccess value="NoAccess"/>
				</BaseTable>
				<BaseTable name="[Any New Table]">
					<Create value="False"/>
					<View value="False"/>
					<Edit value="False"/>
					<Delete value="False"/>
					<FieldAccess value="NoAccess"/>
				</BaseTable>
			</TableList>
		</Records>
		<Layouts value="Custom" allowCreation="False">
			<LayoutList>
				<Layout id="2" name="Log: List">
					<LayoutAccess value="NoAccess"/>
					<DataAccess value="NoAccess"/>
				</Layout>
				<Layout id="3" name="Log Item: Detail">
					<LayoutAccess value="NoAccess"/>
					<DataAccess value="NoAccess"/>
				</Layout>
				<Layout id="4" name="Log: Detail">
					<LayoutAccess value="NoAccess"/>
					<DataAccess value="NoAccess"/>
				</Layout>
				<Layout id="10" name="Log: Blank">
					<LayoutAccess value="ViewOnly"/>
					<DataAccess value="Modifiable"/>
				</Layout>
				<Layout name="[Any New Layout]">
					<LayoutAccess value="NoAccess"/>
					<DataAccess value="NoAccess"/>
				</Layout>
			</LayoutList>
		</Layouts>
		<ValueLists value="NoAccess" allowCreation="False"/>
		<Scripts value="Custom" allowCreation="False">
			<ScriptList>
				<Script runFullAccess="False" id="2" name="Logger: Create Entry ( logData )">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="4" name="Log Viewer: FM: Parse Log Data">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="5" name="Log Viewer: FM: Parse All Log Data">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="24" name="Modules">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="25" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="26" name="Logger">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="27" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="34" name="Log Writer: FM: Create Entry ( logData )">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="35" name="Logger: READ ME">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="36" name="Log Writer: FM">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="37" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="39" name="Create test log entries">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="108" name="Log Viewer: FM: Filter OOModify Trigger">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="109" name="Log Viewer: FM: Open Window">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="115" name="Startup OnFirstWindowOpen">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="116" name="Application">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="117" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="118" name="Log Viewer: FM">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="119" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="120" name="Log Viewer: FM: README">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="121" name="Log Viewer: FM: Public">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="122" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="123" name="Log Writer: FM: README">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="124" name="Log Writer: FM: Public">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="125" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="126" name="Log Writer: FM: Config">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="127" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="128" name="Log Writer: FM: Config: Open New Window">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="129" name="Log Writer: FM: Config: Go To Layout ( layoutNumber )">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="130" name="Log Writer: FM: Config: Handle Error ( errorCode { errorInfo } )">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="131" name="Log Writer: FM: Config: Hook: After Setting LogData">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="132" name="Log Writer: FM: Config: Hook">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="133" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="134" name="Log Writer: FM: Config: Get">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="136" name="Log Writer: FM: Config: Test Installation">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="137" name="Log Writer: FM: Version 1.0.0-beta2">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="138" name="Log Viewer: FM: Version 1.0.0-beta2">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="139" name="Logger: Version 1.0.0-beta3">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="146" name="Logger: Test Installation">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="147" name="Log Writer: Email">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="148" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="149" name="Log Writer: Email: README">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="150" name="Log Writer: Email: Version 1.0.0-beta1">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="155" name="Log Writer: Email: Send ( logData )">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="156" name="Log Viewer: FM: Detail OnRecordLoad Trigger">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="157" name="Log Viewer: FM: Clear Filter: Value">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="158" name="Log Viewer: FM: Clear Filter: Name">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="159" name="Log Viewer: FM: Private">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="160" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="161" name="Log Viewer: FM: Update Field Contents">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="165" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="166" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="167" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="168" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="169" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="170" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="171" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="172" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="173" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="174" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="175" name="Re-Login">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="176" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="177" name="Log: READ ME">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="178" name="Log: Version 1.0.0-beta2">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="179" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="184" name="Log Writer: FM BaseElements">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="185" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="186" name="Log Writer: FM BaseElements: README">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="187" name="Log Writer: FM BaseElements: Version 1.0.0-beta1">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="188" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="189" name="Log Writer: FM BaseElements: Create Entry ( logData )">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="191" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="192" name="Log Writer: FM BaseElements: Config: Test Installation">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="193" name="Log Writer: FM BaseElements: Config: Handle Error ( errorCode )">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="194" name="Log Writer: FM BaseElements: Config">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="195" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="196" name="Log Writer: FM BaseElements: Public">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="197" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="198" name="Hide Window">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="199" name="Log Writer: Email: Config: Test Installation">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="201" name="Log">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="202" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="203" name="Speed Tests">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="204" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="205" name="Log Viewer: FM: Delete All Records">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="208" name="Speed Test: Template">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="213" name="Log Writer: Email: Public">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="214" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="215" name="Log Writer: Email: Config">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="216" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="217" name="Log Writer: Email: Config: Handle Error ( errorCode { errorInfo } )">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="218" name="Log Writer: Email: Config: Hook">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="219" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="220" name="Log Writer: Email: Config: Hook: Before Sending ( logData )">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="221" name="Log Writer: Email: Config: Send ( logData )">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="222" name="Speed Test: Writer FM vs BE">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="223" name="Shutdown OnLastWindowClose">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="225" name="Log Viewer: FM: Toggle Hide">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="226" name="Log Viewer: FM: Detail Arrow Button">
					<Access value="NoAccess"/>
				</Script>
				<Script name="[Any New Script]">
					<Access value="NoAccess"/>
				</Script>
			</ScriptList>
		</Scripts>
	</PrivilegeSet>
	<PrivilegeSet comment="for admin users" id="5" allowModifyPassword="False" managedExtended="False" menu="Minimal" idleDisconnect="True" overrideValidationWarning="False" exporting="False" printing="False" name="create and view">
		<Records value="Custom">
			<TableList>
				<BaseTable id="130" name="Log">
					<Create value="True"/>
					<View value="True"/>
					<Edit value="True"/>
					<Delete value="False"/>
					<FieldAccess value="Limited">
						<FieldList>
							<Field accessRestriction="ViewOnly" id="1" name="id"/>
							<Field accessRestriction="Modifiable" id="2" name="logData"/>
							<Field accessRestriction="Modifiable" id="3" name="magicKey"/>
							<Field accessRestriction="ViewOnly" id="6" name="creationHostTimestamp"/>
							<Field accessRestriction="Modifiable" id="7" name="checked"/>
							<Field accessRestriction="Modifiable" id="8" name="notes"/>
							<Field accessRestriction="ViewOnly" id="10" name="logLevel"/>
							<Field accessRestriction="ViewOnly" id="11" name="errorType"/>
							<Field accessRestriction="ViewOnly" id="12" name="errorCode"/>
							<Field accessRestriction="ViewOnly" id="13" name="errorDescription"/>
							<Field accessRestriction="ViewOnly" id="14" name="errorInfo"/>
							<Field accessRestriction="ViewOnly" id="15" name="scriptName"/>
							<Field accessRestriction="ViewOnly" id="16" name="fileName"/>
							<Field accessRestriction="Modifiable" id="17" name="FILTER_NAME"/>
							<Field accessRestriction="Modifiable" id="18" name="FILTER_VALUE"/>
							<Field accessRestriction="Modifiable" id="19" name="REFRESH_RELATIONSHIP"/>
							<Field accessRestriction="ViewOnly" id="20" name="accountName"/>
							<Field accessRestriction="ViewOnly" name="[Any New Field]"/>
						</FieldList>
					</FieldAccess>
				</BaseTable>
				<BaseTable id="131" name="LogItem">
					<Create value="True"/>
					<View value="True"/>
					<Edit value="False"/>
					<Delete value="False"/>
					<FieldAccess value="All"/>
				</BaseTable>
				<BaseTable name="[Any New Table]">
					<Create value="False"/>
					<View value="False"/>
					<Edit value="False"/>
					<Delete value="False"/>
					<FieldAccess value="NoAccess"/>
				</BaseTable>
			</TableList>
		</Records>
		<Layouts value="Custom" allowCreation="False">
			<LayoutList>
				<Layout id="2" name="Log: List">
					<LayoutAccess value="ViewOnly"/>
					<DataAccess value="Modifiable"/>
				</Layout>
				<Layout id="3" name="Log Item: Detail">
					<LayoutAccess value="ViewOnly"/>
					<DataAccess value="ViewOnly"/>
				</Layout>
				<Layout id="4" name="Log: Detail">
					<LayoutAccess value="ViewOnly"/>
					<DataAccess value="Modifiable"/>
				</Layout>
				<Layout id="10" name="Log: Blank">
					<LayoutAccess value="ViewOnly"/>
					<DataAccess value="Modifiable"/>
				</Layout>
				<Layout name="[Any New Layout]">
					<LayoutAccess value="NoAccess"/>
					<DataAccess value="NoAccess"/>
				</Layout>
			</LayoutList>
		</Layouts>
		<ValueLists value="ViewOnly" allowCreation="False"/>
		<Scripts value="Custom" allowCreation="False">
			<ScriptList>
				<Script runFullAccess="False" id="2" name="Logger: Create Entry ( logData )">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="4" name="Log Viewer: FM: Parse Log Data">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="5" name="Log Viewer: FM: Parse All Log Data">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="24" name="Modules">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="25" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="26" name="Logger">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="27" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="34" name="Log Writer: FM: Create Entry ( logData )">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="35" name="Logger: READ ME">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="36" name="Log Writer: FM">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="37" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="39" name="Create test log entries">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="108" name="Log Viewer: FM: Filter OOModify Trigger">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="109" name="Log Viewer: FM: Open Window">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="115" name="Startup OnFirstWindowOpen">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="116" name="Application">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="117" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="118" name="Log Viewer: FM">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="119" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="120" name="Log Viewer: FM: README">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="121" name="Log Viewer: FM: Public">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="122" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="123" name="Log Writer: FM: README">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="124" name="Log Writer: FM: Public">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="125" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="126" name="Log Writer: FM: Config">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="127" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="128" name="Log Writer: FM: Config: Open New Window">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="129" name="Log Writer: FM: Config: Go To Layout ( layoutNumber )">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="130" name="Log Writer: FM: Config: Handle Error ( errorCode { errorInfo } )">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="131" name="Log Writer: FM: Config: Hook: After Setting LogData">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="132" name="Log Writer: FM: Config: Hook">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="133" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="134" name="Log Writer: FM: Config: Get">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="136" name="Log Writer: FM: Config: Test Installation">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="137" name="Log Writer: FM: Version 1.0.0-beta2">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="138" name="Log Viewer: FM: Version 1.0.0-beta2">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="139" name="Logger: Version 1.0.0-beta3">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="146" name="Logger: Test Installation">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="147" name="Log Writer: Email">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="148" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="149" name="Log Writer: Email: README">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="150" name="Log Writer: Email: Version 1.0.0-beta1">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="155" name="Log Writer: Email: Send ( logData )">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="156" name="Log Viewer: FM: Detail OnRecordLoad Trigger">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="157" name="Log Viewer: FM: Clear Filter: Value">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="158" name="Log Viewer: FM: Clear Filter: Name">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="159" name="Log Viewer: FM: Private">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="160" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="161" name="Log Viewer: FM: Update Field Contents">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="165" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="166" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="167" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="168" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="169" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="170" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="171" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="172" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="173" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="174" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="175" name="Re-Login">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="176" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="177" name="Log: READ ME">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="178" name="Log: Version 1.0.0-beta2">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="179" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="184" name="Log Writer: FM BaseElements">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="185" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="186" name="Log Writer: FM BaseElements: README">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="187" name="Log Writer: FM BaseElements: Version 1.0.0-beta1">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="188" name="-">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="189" name="Log Writer: FM BaseElements: Create Entry ( logData )">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="191" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="192" name="Log Writer: FM BaseElements: Config: Test Installation">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="193" name="Log Writer: FM BaseElements: Config: Handle Error ( errorCode )">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="194" name="Log Writer: FM BaseElements: Config">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="195" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="196" name="Log Writer: FM BaseElements: Public">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="197" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="198" name="Hide Window">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="199" name="Log Writer: Email: Config: Test Installation">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="201" name="Log">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="202" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="203" name="Speed Tests">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="204" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="205" name="Log Viewer: FM: Delete All Records">
					<Access value="ViewOnly"/>
				</Script>
				<Script runFullAccess="False" id="208" name="Speed Test: Template">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="213" name="Log Writer: Email: Public">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="214" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="215" name="Log Writer: Email: Config">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="216" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="217" name="Log Writer: Email: Config: Handle Error ( errorCode { errorInfo } )">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="218" name="Log Writer: Email: Config: Hook">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="219" name="--">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="220" name="Log Writer: Email: Config: Hook: Before Sending ( logData )">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="221" name="Log Writer: Email: Config: Send ( logData )">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="222" name="Speed Test: Writer FM vs BE">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="223" name="Shutdown OnLastWindowClose">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="225" name="Log Viewer: FM: Toggle Hide">
					<Access value="NoAccess"/>
				</Script>
				<Script runFullAccess="False" id="226" name="Log Viewer: FM: Detail Arrow Button">
					<Access value="NoAccess"/>
				</Script>
				<Script name="[Any New Script]">
					<Access value="ViewOnly"/>
				</Script>
			</ScriptList>
		</Scripts>
	</PrivilegeSet>
</PrivilegesCatalog>
<ExtendedPrivilegeCatalog>
	<ExtendedPrivilege id="1" comment="" name="fmiwp"/>
	<ExtendedPrivilege id="2" comment="Access via ODBC/JDBC" name="fmxdbc"/>
	<ExtendedPrivilege id="3" comment="Access via FileMaker Network" name="fmapp">
		<PrivilegeSetList>
			<PrivilegeSet id="1" name="[Full Access]"/>
			<PrivilegeSet id="4" name="create"/>
			<PrivilegeSet id="5" name="create and view"/>
		</PrivilegeSetList>
	</ExtendedPrivilege>
	<ExtendedPrivilege id="4" comment="Require re-authentication after the specified minutes in sleep/background.  Go only." name="fmreauthenticate10">
		<PrivilegeSetList>
			<PrivilegeSet id="1" name="[Full Access]"/>
			<PrivilegeSet id="2" name="[Data Entry Only]"/>
			<PrivilegeSet id="3" name="[Read-Only Access]"/>
			<PrivilegeSet id="4" name="create"/>
			<PrivilegeSet id="5" name="create and view"/>
		</PrivilegeSetList>
	</ExtendedPrivilege>
	<ExtendedPrivilege id="5" comment="Access via XML Web Publishing - FMS only" name="fmxml"/>
	<ExtendedPrivilege id="6" comment="Access via PHP Web Publishing - FMS only" name="fmphp"/>
	<ExtendedPrivilege id="7" comment="Access via FileMaker WebDirect" name="fmwebdirect"/>
</ExtendedPrivilegeCatalog>
<AuthFileCatalog requireAuthorization="False"/>
<CustomFunctionCatalog>
	<CustomFunction id="2" functionArity="2" visible="True" parameters="name;value" name="#">
		<Calculation><![CDATA[/** * ===================================== * # ( name ; value ) * * RETURNS: *		An name-value pair in Let notation. * * PARAMETERS: *		name: The name for the returned name-value pair. name can be any value *		that would be a valid Let() variable name. *		value: The value for the returned name-value pair. * * EXAMPLE: *		# ( "name"; $value ) & # ( "foo" ; "bar" ) * * DEPENDENCIES: none * * HISTORY: *		MODIFIED on 2013-12-24 by Jeremy Bante <http://scr.im/jbante> to return *		an error if name contains a carriage return (Char ( 13 )), and removing *		explicit encoding for line feeds. *		MODIFIED on 2013-12-12 by John Jones <john.christopher@alumni.virginia.edu> *		to explicitly encode line feed characters in text values. *		MODIFIED on 2013-09-02 by Daniel Smith dansmith65@gmail.com to fix a *		type misidentification bug. *		MODIFIED on 2013-07-27 by Jeremy Bante <http://scr.im/jbante> to fix a *		type misidentification bug. *		MODIFIED on 2013-04-15 by Jeremy Bante <http://scr.im/jbante> to not *		wrap numbers in GetAsNumber. *		MODIFIED on 2013-01-14 by Daniel Smith dansmith65@gmail.com to include *		trailing return on error result and accept a value of "?" *		MODIFIED on 2012-12-12 by Daniel Smith dansmith65@gmail.com to preserve *		data type of value *		MODIFIED on 2012-12-07 by Jeremy Bante <http://scr.im/jbante> where an *		error result could create invalid sytax for values containing a comment *		close sequence. *		MODIFIED on 2012-11-28 by Jeremy Bante <http://scr.im/jbante> to return *		error feedback, and to prefix names with "$". *		CREATED on 2012-11-10 by Jeremy Bante <http://scr.im/jbante>. * * REFERENCES: *		https://github.com/filemakerstandards/fmpstandards/blob/master/Functions/%23Name-Value/%23.fmfn * ===================================== */Let ( [	~name =	// strip leading "$$" and "$"		Substitute (			"/*start*/" & name ;			[ "/*start*/$$" ; "" ] ;			[ "/*start*/$" ; "" ] ;			[ "/*start*/" ; "" ]		) ;	~text = GetAsText ( value ) ;	~number = GetAsNumber ( value ) ;	~validDate =		IsValid ( GetAsDate ( ~text ) )		and not IsEmpty ( ~number ) ;	~validTime =		IsValid ( GetAsTime ( ~text ) )		and Position ( ~text ; ":" ; 1 ; 1 ) > 0		and not IsEmpty ( ~number ) ;	~value =		Case (			value = "" or value = "?" ;				Quote ( value ) ;			~validTime and ~validDate ;				"GetAsTimestamp ( " & Quote ( value ) & " )" ;			~validTime ;				"GetAsTime ( " & Quote ( value ) & " )" ;			~validDate ;				"GetAsDate ( " & Quote ( value ) & " )" ;			~text ≠ GetAsText ( ~number ) ;				Quote ( value ) ;			/* Else */				~number		) ;	~result =		"$"		& ~name		& " = "		& ~value		& " ;¶" ;	~testExpression =		"Let ( [ "		& ~result		& " ~ = \"\" ]; \"\" )" ;	~error =		Case (			IsEmpty ( ~name ) or Position ( ~name ; ¶ ; 1 ; 1 ) ≠ 0 ;				11 ;	// Name is not valid			not IsValidExpression ( ~testExpression ) ;				1200	// Generic calculation error		)];	If ( ~error ;	// prevent bad pairs from affecting evaluation by commenting		"/* Error "		& ~error		& " name: "		& Quote (			Substitute (	// escape comment character sequences				name ;				[ "*/" ; "\*\/" ] ;				[ "/*" ; "\/\*" ]			)		)		& " value: "		& Quote (			Substitute (	// escape comment character sequences				value ;				[ "*/" ; "\*\/" ] ;				[ "/*" ; "\/\*" ]			)		)		& " */"		& ¶ ;	/* Else */		~result	))]]></Calculation>
		<DisplayCalculation>
			<Chunk type="NoRef">/** * ===================================== * # ( name ; value ) * * RETURNS: *		An name-value pair in Let notation. * * PARAMETERS: *		name: The name for the returned name-value pair. name can be any value *		that would be a valid Let() variable name. *		value: The value for the returned name-value pair. * * EXAMPLE: *		# ( &quot;name&quot;; $value ) &amp; # ( &quot;foo&quot; ; &quot;bar&quot; ) * * DEPENDENCIES: none * * HISTORY: *		MODIFIED on 2013-12-24 by Jeremy Bante &lt;http://scr.im/jbante&gt; to return *		an error if name contains a carriage return (Char ( 13 )), and removing *		explicit encoding for line feeds. *		MODIFIED on 2013-12-12 by John Jones &lt;john.christopher@alumni.virginia.edu&gt; *		to explicitly encode line feed characters in text values. *		MODIFIED on 2013-09-02 by Daniel Smith dansmith65@gmail.com to fix a *		type misidentification bug. *		MODIFIED on 2013-07-27 by Jeremy Bante &lt;http://scr.im/jbante&gt; to fix a *		type misidentification bug. *		MODIFIED on 2013-04-15 by Jeremy Bante &lt;http://scr.im/jbante&gt; to not *		wrap numbers in GetAsNumber. *		MODIFIED on 2013-01-14 by Daniel Smith dansmith65@gmail.com to include *		trailing return on error result and accept a value of &quot;?&quot; *		MODIFIED on 2012-12-12 by Daniel Smith dansmith65@gmail.com to preserve *		data type of value *		MODIFIED on 2012-12-07 by Jeremy Bante &lt;http://scr.im/jbante&gt; where an *		error result could create invalid sytax for values containing a comment *		close sequence. *		MODIFIED on 2012-11-28 by Jeremy Bante &lt;http://scr.im/jbante&gt; to return *		error feedback, and to prefix names with &quot;$&quot;. *		CREATED on 2012-11-10 by Jeremy Bante &lt;http://scr.im/jbante&gt;. * * REFERENCES: *		https://github.com/filemakerstandards/fmpstandards/blob/master/Functions/%23Name-Value/%23.fmfn * ===================================== */</Chunk>
			<Chunk type="FunctionRef">Let</Chunk>
			<Chunk type="NoRef"> ( [	~name =	</Chunk>
			<Chunk type="FunctionRef">// strip leading &quot;$$&quot; and &quot;$&quot;</Chunk>
			<Chunk type="NoRef">		</Chunk>
			<Chunk type="FunctionRef">Substitute</Chunk>
			<Chunk type="NoRef"> (			&quot;/*start*/&quot; &amp; name ;			[ &quot;/*start*/$$&quot; ; &quot;&quot; ] ;			[ &quot;/*start*/$&quot; ; &quot;&quot; ] ;			[ &quot;/*start*/&quot; ; &quot;&quot; ]		) ;	~text = </Chunk>
			<Chunk type="FunctionRef">GetAsText</Chunk>
			<Chunk type="NoRef"> ( value ) ;	~number = </Chunk>
			<Chunk type="FunctionRef">GetAsNumber</Chunk>
			<Chunk type="NoRef"> ( value ) ;	~validDate =		</Chunk>
			<Chunk type="FunctionRef">IsValid</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">GetAsDate</Chunk>
			<Chunk type="NoRef"> ( ~text ) )		</Chunk>
			<Chunk type="FunctionRef">and</Chunk>
			<Chunk type="NoRef"> </Chunk>
			<Chunk type="FunctionRef">not</Chunk>
			<Chunk type="NoRef"> </Chunk>
			<Chunk type="FunctionRef">IsEmpty</Chunk>
			<Chunk type="NoRef"> ( ~number ) ;	~validTime =		</Chunk>
			<Chunk type="FunctionRef">IsValid</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">GetAsTime</Chunk>
			<Chunk type="NoRef"> ( ~text ) )		</Chunk>
			<Chunk type="FunctionRef">and</Chunk>
			<Chunk type="NoRef"> </Chunk>
			<Chunk type="FunctionRef">Position</Chunk>
			<Chunk type="NoRef"> ( ~text ; &quot;:&quot; ; 1 ; 1 ) &gt; 0		</Chunk>
			<Chunk type="FunctionRef">and</Chunk>
			<Chunk type="NoRef"> </Chunk>
			<Chunk type="FunctionRef">not</Chunk>
			<Chunk type="NoRef"> </Chunk>
			<Chunk type="FunctionRef">IsEmpty</Chunk>
			<Chunk type="NoRef"> ( ~number ) ;	~value =		</Chunk>
			<Chunk type="FunctionRef">Case</Chunk>
			<Chunk type="NoRef"> (			value = &quot;&quot; </Chunk>
			<Chunk type="FunctionRef">or</Chunk>
			<Chunk type="NoRef"> value = &quot;?&quot; ;				</Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( value ) ;			~validTime </Chunk>
			<Chunk type="FunctionRef">and</Chunk>
			<Chunk type="NoRef"> ~validDate ;				&quot;GetAsTimestamp ( &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( value ) &amp; &quot; )&quot; ;			~validTime ;				&quot;GetAsTime ( &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( value ) &amp; &quot; )&quot; ;			~validDate ;				&quot;GetAsDate ( &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( value ) &amp; &quot; )&quot; ;			~text ≠ </Chunk>
			<Chunk type="FunctionRef">GetAsText</Chunk>
			<Chunk type="NoRef"> ( ~number ) ;				</Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( value ) ;			/* Else */				~number		) ;	~result =		&quot;$&quot;		&amp; ~name		&amp; &quot; = &quot;		&amp; ~value		&amp; &quot; ;¶&quot; ;	~testExpression =		&quot;Let ( [ &quot;		&amp; ~result		&amp; &quot; ~ = \&quot;\&quot; ]; \&quot;\&quot; )&quot; ;	~error =		</Chunk>
			<Chunk type="FunctionRef">Case</Chunk>
			<Chunk type="NoRef"> (			</Chunk>
			<Chunk type="FunctionRef">IsEmpty</Chunk>
			<Chunk type="NoRef"> ( ~name ) </Chunk>
			<Chunk type="FunctionRef">or</Chunk>
			<Chunk type="NoRef"> </Chunk>
			<Chunk type="FunctionRef">Position</Chunk>
			<Chunk type="NoRef"> ( ~name ; ¶ ; 1 ; 1 ) ≠ 0 ;				11 ;	</Chunk>
			<Chunk type="FunctionRef">// Name is not valid</Chunk>
			<Chunk type="NoRef">			</Chunk>
			<Chunk type="FunctionRef">not</Chunk>
			<Chunk type="NoRef"> </Chunk>
			<Chunk type="FunctionRef">IsValidExpression</Chunk>
			<Chunk type="NoRef"> ( ~testExpression ) ;				1200	</Chunk>
			<Chunk type="FunctionRef">// Generic calculation error</Chunk>
			<Chunk type="NoRef">		)];	</Chunk>
			<Chunk type="FunctionRef">If</Chunk>
			<Chunk type="NoRef"> ( ~error ;	</Chunk>
			<Chunk type="FunctionRef">// prevent bad pairs from affecting evaluation by commenting</Chunk>
			<Chunk type="NoRef">		&quot;/* Error &quot;		&amp; ~error		&amp; &quot; name: &quot;		&amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> (			</Chunk>
			<Chunk type="FunctionRef">Substitute</Chunk>
			<Chunk type="NoRef"> (	</Chunk>
			<Chunk type="FunctionRef">// escape comment character sequences</Chunk>
			<Chunk type="NoRef">				name ;				[ &quot;*/&quot; ; &quot;\*\/&quot; ] ;				[ &quot;/*&quot; ; &quot;\/\*&quot; ]			)		)		&amp; &quot; value: &quot;		&amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> (			</Chunk>
			<Chunk type="FunctionRef">Substitute</Chunk>
			<Chunk type="NoRef"> (	</Chunk>
			<Chunk type="FunctionRef">// escape comment character sequences</Chunk>
			<Chunk type="NoRef">				value ;				[ &quot;*/&quot; ; &quot;\*\/&quot; ] ;				[ &quot;/*&quot; ; &quot;\/\*&quot; ]			)		)		&amp; &quot; */&quot;		&amp; ¶ ;	/* Else */		~result	))</Chunk>
		</DisplayCalculation>
	</CustomFunction>
	<CustomFunction id="5" functionArity="2" visible="True" parameters="parameters;name" name="#Get">
		<Calculation><![CDATA[/** * ===================================== * #Get ( parameters ; name ) * * RETURNS: *		A named value from a string of name-value pairs. * * PARAMETERS: *		parameters: A string of name-value pairs *		name: The name to retrieve the value of * * DEPENDENCIES: none * * NOTES: *		When a name is defined more than once in parameters, the last value is *		returned. * * HISTORY: *		MODIFIED on 2013-01-08 by Jeremy Bante <http://scr.im/jbante> to handle *		leading $$ and $ in the name parameter the same as the *		# ( name ; value ) function, based on a comment by Dan Smith. *		CREATED on 2012-12-05 by Jeremy Bante <http://scr.im/jbante>. * ===================================== */Let ( [	parameters = ¶ & parameters & ¶;	name =	// strip any leading $$ or $ for backwards compatibility		Substitute ( ¶ & name ; [ "¶$$" ; "" ] ; [ "¶$" ; "" ] ; [ ¶ ; "" ] ) ;	~length = Length ( parameters );	~namePosition =	// position of last occurrence of name		Position ( parameters ; "¶$" & name & " = " ; ~length ; -1 );	~namePosition =	// check for $$global name for backwards compatibility		If ( ~namePosition > 0;			~namePosition;		/* Else */			Position ( parameters ; "¶$$" & name & " = " ; ~length ; -1 )		);	~valueStart = Position ( parameters ; " = " ; ~namePosition ; 1 ) + 3;	~valueEnd = Position ( parameters ; ";¶" ; ~namePosition ; 1 );	~value = Middle ( parameters ; ~valueStart ; ~valueEnd - ~valueStart )];	// check that ~value exists and is valid	If ( ~namePosition > 0 and IsValidExpression ( ~value );		Evaluate ( ~value )	))]]></Calculation>
		<DisplayCalculation>
			<Chunk type="NoRef">/** * ===================================== * #Get ( parameters ; name ) * * RETURNS: *		A named value from a string of name-value pairs. * * PARAMETERS: *		parameters: A string of name-value pairs *		name: The name to retrieve the value of * * DEPENDENCIES: none * * NOTES: *		When a name is defined more than once in parameters, the last value is *		returned. * * HISTORY: *		MODIFIED on 2013-01-08 by Jeremy Bante &lt;http://scr.im/jbante&gt; to handle *		leading $$ and $ in the name parameter the same as the *		# ( name ; value ) function, based on a comment by Dan Smith. *		CREATED on 2012-12-05 by Jeremy Bante &lt;http://scr.im/jbante&gt;. * ===================================== */</Chunk>
			<Chunk type="FunctionRef">Let</Chunk>
			<Chunk type="NoRef"> ( [	parameters = ¶ &amp; parameters &amp; ¶;	name =	</Chunk>
			<Chunk type="FunctionRef">// strip any leading $$ or $ for backwards compatibility</Chunk>
			<Chunk type="NoRef">		</Chunk>
			<Chunk type="FunctionRef">Substitute</Chunk>
			<Chunk type="NoRef"> ( ¶ &amp; name ; [ &quot;¶$$&quot; ; &quot;&quot; ] ; [ &quot;¶$&quot; ; &quot;&quot; ] ; [ ¶ ; &quot;&quot; ] ) ;	~length = </Chunk>
			<Chunk type="FunctionRef">Length</Chunk>
			<Chunk type="NoRef"> ( parameters );	~namePosition =	</Chunk>
			<Chunk type="FunctionRef">// position of last occurrence of name</Chunk>
			<Chunk type="NoRef">		</Chunk>
			<Chunk type="FunctionRef">Position</Chunk>
			<Chunk type="NoRef"> ( parameters ; &quot;¶$&quot; &amp; name &amp; &quot; = &quot; ; ~length ; -1 );	~namePosition =	</Chunk>
			<Chunk type="FunctionRef">// check for $$global name for backwards compatibility</Chunk>
			<Chunk type="NoRef">		</Chunk>
			<Chunk type="FunctionRef">If</Chunk>
			<Chunk type="NoRef"> ( ~namePosition &gt; 0;			~namePosition;		/* Else */			</Chunk>
			<Chunk type="FunctionRef">Position</Chunk>
			<Chunk type="NoRef"> ( parameters ; &quot;¶$$&quot; &amp; name &amp; &quot; = &quot; ; ~length ; -1 )		);	~valueStart = </Chunk>
			<Chunk type="FunctionRef">Position</Chunk>
			<Chunk type="NoRef"> ( parameters ; &quot; = &quot; ; ~namePosition ; 1 ) + 3;	~valueEnd = </Chunk>
			<Chunk type="FunctionRef">Position</Chunk>
			<Chunk type="NoRef"> ( parameters ; &quot;;¶&quot; ; ~namePosition ; 1 );	~value = </Chunk>
			<Chunk type="FunctionRef">Middle</Chunk>
			<Chunk type="NoRef"> ( parameters ; ~valueStart ; ~valueEnd - ~valueStart )];	</Chunk>
			<Chunk type="FunctionRef">// check that ~value exists and is valid</Chunk>
			<Chunk type="NoRef">	</Chunk>
			<Chunk type="FunctionRef">If</Chunk>
			<Chunk type="NoRef"> ( ~namePosition &gt; 0 </Chunk>
			<Chunk type="FunctionRef">and</Chunk>
			<Chunk type="NoRef"> </Chunk>
			<Chunk type="FunctionRef">IsValidExpression</Chunk>
			<Chunk type="NoRef"> ( ~value );		</Chunk>
			<Chunk type="FunctionRef">Evaluate</Chunk>
			<Chunk type="NoRef"> ( ~value )	))</Chunk>
		</DisplayCalculation>
	</CustomFunction>
	<CustomFunction id="6" functionArity="1" visible="True" parameters="parameters" name="#GetNameList">
		<Calculation><![CDATA[/** * ===================================== * #GetNameList ( parameters ) * * RETURNS: *		A return-delimited list of names from the name-value pairs in parameters. * * PARAMETERS: *		parameters: A string of serialized name-value pair data in Let notation. * * EXAMPLE: *		#GetNameList ( *			# ( "name" ; "value" ) *			& # ( "foo" ; "bar" ); *		) = List ( "name" ; "foo" ) * * DEPENDENCIES: none * * HISTORY: *		MODIFIED on 2013-12-24 by Jeremy Bante <http://scr.im/jbante> to improve *		efficiency. *		MODIFIED on 2013-12-23 by John Jones john.christopher@alumni.virginia.edu *		to use Position/Middle. *		CREATED on 2013-01-24 by Daniel Smith dansmith65@gmail.com * ===================================== */Case (	/* Step 0, set-up */	not $#GetNameList.step ;		Let ( [			~empty = IsEmpty ( Trim ( parameters ) ) ;			parameters =				Substitute (					¶ & parameters ;					[ "¶$" ; ¶ ] ;		// remove "$" prefix					[ "¶$" ; ¶ ] ;		// remove "$$" prefix					[ "¶¶" ; ¶ ]		// remove empty values				) ;			$#GetNameList.length = Length ( parameters ) ;			$#GetNameList.step = If ( ~empty ; 2 ; /* Else */ 1 )		] ;			#GetNameList ( parameters )		) ;	/* Step 1, check each parameter */	$#GetNameList.step = 1 ;		Let ( [			~start = $#GetNameList.end + 1 ;			$#GetNameList.end = Position ( parameters ; ¶ ; ~start ; 1 ) ;			~endOfList = $#GetNameList.end = 0 ;			~length =				If ( ~endOfList ;					$#GetNameList.length + 1 ;					/* Else */ $#GetNameList.end				)				- ~start ;			~pair = Middle ( parameters ; ~start ; ~length ) ;			~name = Left ( ~pair ; Position ( ~pair ; " = " ; 1 ; 1 ) - 1 ) ;			~include =	// only include ~name if it isn't already in the result				Position (					¶ & $#GetNameList.result & ¶ ;					¶ & ~name & ¶ ;					1 ;					1				) = 0 ;			$#GetNameList.result =				List (					$#GetNameList.result ;					If ( ~include ; ~name )				) ;			~endOfList =				~endOfList				or $#GetNameList.end ≥ $#GetNameList.length ;			$#GetNameList.step =				If ( ~endOfList ;					$#GetNameList.step + 1 ;					/* Else */ $#GetNameList.step				)		] ;			#GetNameList ( parameters )		) ;	/* Step 2, clean-up and return result */	$#GetNameList.step = 2 ;		Let ( [			~result = $#GetNameList.result ;			// purge variables			$#GetNameList.end = "" ;			$#GetNameList.length = "" ;			$#GetNameList.result = "" ;			$#GetNameList.step = ""		] ;			~result		))]]></Calculation>
		<DisplayCalculation>
			<Chunk type="NoRef">/** * ===================================== * #GetNameList ( parameters ) * * RETURNS: *		A return-delimited list of names from the name-value pairs in parameters. * * PARAMETERS: *		parameters: A string of serialized name-value pair data in Let notation. * * EXAMPLE: *		#GetNameList ( *			# ( &quot;name&quot; ; &quot;value&quot; ) *			&amp; # ( &quot;foo&quot; ; &quot;bar&quot; ); *		) = List ( &quot;name&quot; ; &quot;foo&quot; ) * * DEPENDENCIES: none * * HISTORY: *		MODIFIED on 2013-12-24 by Jeremy Bante &lt;http://scr.im/jbante&gt; to improve *		efficiency. *		MODIFIED on 2013-12-23 by John Jones john.christopher@alumni.virginia.edu *		to use Position/Middle. *		CREATED on 2013-01-24 by Daniel Smith dansmith65@gmail.com * ===================================== */</Chunk>
			<Chunk type="FunctionRef">Case</Chunk>
			<Chunk type="NoRef"> (	/* Step 0, set-up */	</Chunk>
			<Chunk type="FunctionRef">not</Chunk>
			<Chunk type="NoRef"> $#GetNameList.step ;		</Chunk>
			<Chunk type="FunctionRef">Let</Chunk>
			<Chunk type="NoRef"> ( [			~empty = </Chunk>
			<Chunk type="FunctionRef">IsEmpty</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Trim</Chunk>
			<Chunk type="NoRef"> ( parameters ) ) ;			parameters =				</Chunk>
			<Chunk type="FunctionRef">Substitute</Chunk>
			<Chunk type="NoRef"> (					¶ &amp; parameters ;					[ &quot;¶$&quot; ; ¶ ] ;		</Chunk>
			<Chunk type="FunctionRef">// remove &quot;$&quot; prefix</Chunk>
			<Chunk type="NoRef">					[ &quot;¶$&quot; ; ¶ ] ;		</Chunk>
			<Chunk type="FunctionRef">// remove &quot;$$&quot; prefix</Chunk>
			<Chunk type="NoRef">					[ &quot;¶¶&quot; ; ¶ ]		</Chunk>
			<Chunk type="FunctionRef">// remove empty values</Chunk>
			<Chunk type="NoRef">				) ;			$#GetNameList.length = </Chunk>
			<Chunk type="FunctionRef">Length</Chunk>
			<Chunk type="NoRef"> ( parameters ) ;			$#GetNameList.step = </Chunk>
			<Chunk type="FunctionRef">If</Chunk>
			<Chunk type="NoRef"> ( ~empty ; 2 ; /* Else */ 1 )		] ;			</Chunk>
			<Chunk type="CustomFunctionRef">#GetNameList</Chunk>
			<Chunk type="NoRef"> ( parameters )		) ;	/* Step 1, check each parameter */	$#GetNameList.step = 1 ;		</Chunk>
			<Chunk type="FunctionRef">Let</Chunk>
			<Chunk type="NoRef"> ( [			~start = $#GetNameList.end + 1 ;			$#GetNameList.end = </Chunk>
			<Chunk type="FunctionRef">Position</Chunk>
			<Chunk type="NoRef"> ( parameters ; ¶ ; ~start ; 1 ) ;			~endOfList = $#GetNameList.end = 0 ;			~length =				</Chunk>
			<Chunk type="FunctionRef">If</Chunk>
			<Chunk type="NoRef"> ( ~endOfList ;					$#GetNameList.length + 1 ;					/* Else */ $#GetNameList.end				)				- ~start ;			~pair = </Chunk>
			<Chunk type="FunctionRef">Middle</Chunk>
			<Chunk type="NoRef"> ( parameters ; ~start ; ~length ) ;			~name = </Chunk>
			<Chunk type="FunctionRef">Left</Chunk>
			<Chunk type="NoRef"> ( ~pair ; </Chunk>
			<Chunk type="FunctionRef">Position</Chunk>
			<Chunk type="NoRef"> ( ~pair ; &quot; = &quot; ; 1 ; 1 ) - 1 ) ;			~include =	</Chunk>
			<Chunk type="FunctionRef">// only include ~name if it isn&apos;t already in the result</Chunk>
			<Chunk type="NoRef">				</Chunk>
			<Chunk type="FunctionRef">Position</Chunk>
			<Chunk type="NoRef"> (					¶ &amp; $#GetNameList.result &amp; ¶ ;					¶ &amp; ~name &amp; ¶ ;					1 ;					1				) = 0 ;			$#GetNameList.result =				</Chunk>
			<Chunk type="FunctionRef">List</Chunk>
			<Chunk type="NoRef"> (					$#GetNameList.result ;					</Chunk>
			<Chunk type="FunctionRef">If</Chunk>
			<Chunk type="NoRef"> ( ~include ; ~name )				) ;			~endOfList =				~endOfList				</Chunk>
			<Chunk type="FunctionRef">or</Chunk>
			<Chunk type="NoRef"> $#GetNameList.end ≥ $#GetNameList.length ;			$#GetNameList.step =				</Chunk>
			<Chunk type="FunctionRef">If</Chunk>
			<Chunk type="NoRef"> ( ~endOfList ;					$#GetNameList.step + 1 ;					/* Else */ $#GetNameList.step				)		] ;			</Chunk>
			<Chunk type="CustomFunctionRef">#GetNameList</Chunk>
			<Chunk type="NoRef"> ( parameters )		) ;	/* Step 2, clean-up and return result */	$#GetNameList.step = 2 ;		</Chunk>
			<Chunk type="FunctionRef">Let</Chunk>
			<Chunk type="NoRef"> ( [			~result = $#GetNameList.result ;			</Chunk>
			<Chunk type="FunctionRef">// purge variables</Chunk>
			<Chunk type="NoRef">			$#GetNameList.end = &quot;&quot; ;			$#GetNameList.length = &quot;&quot; ;			$#GetNameList.result = &quot;&quot; ;			$#GetNameList.step = &quot;&quot;		] ;			~result		))</Chunk>
		</DisplayCalculation>
	</CustomFunction>
	<CustomFunction id="24" functionArity="2" visible="True" parameters="theLogLevel;theMessage" name="LogData">
		<Calculation><![CDATA[/** * ===================================== * LogData ( theLogLevel ; theMessage ) * * RETURNS: *		(string) Let format dictionary which describes the current environment. * * PARAMETERS: *		theLogLevel = (numeric) 0 thru [n] *		theErrorInfo = (text, optional) some text describing the log entry * * EXAMPLE: *		LogData ( LogWarning ) *		LogData ( $logLevelDebug ) *		// Where your own custom function LogWarning *		// returns the constant of 1 or a variable *		// named $logLevelDebug returns a value of 3. * * NOTES: *		This function should be modified to capture any relevant values for *		your solution. This includes any plugin or solution specific data desired. *		The level/amount of data returned increases numerically. You can add *		as much data as needed. You can also define the log levels by using *		separate custom functions with the prefix of Log* - such as LogWarning, *		LogError, LogCritical, LogDebug, etc. *		See: http://en.wikipedia.org/wiki/Syslog for logging references. * * HISTORY: *		MODIFIED on 2014-FEB-05 by Daniel Smith dansmith65@gmail.com *			- prepend parameter with "the" to prevent collision *			- add theMessage parameter *			- remove session-specific values (see LogDataSession function) *			- manually encode name/value pairs, remove dependency on # *			- add values added in FileMaker 13 *			- disable UserCount *		MODIFIED on 2014-JAN-11 matt@filemakermagazine.com to use numeric logLevel *		MODIFIED on 2012-NOV-21 by Daniel Smith dansmith65@gmail.com *			- don't access $error variable directly *		CREATED on 2012-NOV-21 Daniel Smith dansmith65@gmail.com *		INSPIRED by ErrorData by matt@filemakermagazine.com *			https://github.com/filemakerstandards/fmpstandards/tree/master/Functions * * REFERENCE: *		http://filemakerstandards.org/x/LACm * ===================================== */// ALL LOG LEVELS"$LogLevel = " & theLogLevel & " ;¶"& If ( not IsEmpty ( theMessage ) ;	"$message = " & Quote ( theMessage ) & " ;¶")& "$AccountName = " & Quote ( Get ( AccountName ) ) & " ;¶"& "$CurrentHostTimestamp = GetAsTimeStamp ( " & Quote ( Get ( CurrentHostTimeStamp ) ) & " ) ;¶"// possibly use UTC in addition to/instead of CurrentHostTimeStamp, may want to only store this once per session//    FM12: Get ( UTCmSecs )//    FM13: Get ( CurrentTimeUTCMilliseconds )& "$FileName = " & Quote ( Get ( FileName ) ) & " ;¶"& "$ScriptName = " & Quote ( Get ( ScriptName ) ) & " ;¶"& "$ScriptParameter = " & Quote ( Get ( ScriptParameter ) ) & " ;¶"& "$ScriptResult = " & Quote ( Get ( ScriptResult ) ) & " ;¶"// LEVEL 1& If ( theLogLevel ≤ 1 ;	""	& "$AllowAbortState = " & Get ( AllowAbortState ) & " ;¶"	& "$ErrorCaptureState = " & Get ( ErrorCaptureState ) & " ;¶"	& "$FilePath = " & Quote ( Get ( FilePath ) ) & " ;¶"	& "$LayoutAccess = " & Get ( LayoutAccess ) & " ;¶"	& "$LayoutName = " & Quote ( Get ( LayoutName ) ) & " ;¶"	& "$LayoutTableName = " & Quote ( Get ( LayoutTableName ) ) & " ;¶"	& "$LayoutViewState = " & Get ( LayoutViewState ) & " ;¶"	& "$MultiUserState = " & Get ( MultiUserState ) & " ;¶"	& "$RecordAccess = " & Get ( RecordAccess ) & " ;¶"	& "$RecordID = " & Get ( RecordID ) & " ;¶"	& "$RecordOpenCount = " & Get ( RecordOpenCount ) & " ;¶"	& "$RecordOpenState = " &  Get ( RecordOpenState ) & " ;¶"	& "$SortState = " & Get ( SortState ) & " ;¶"	& "$StatusAreaState = " & Get ( StatusAreaState ) & " ;¶"	// UserCount is disabled by default because it is slow to calculate (~1000 times slower than Get ( UserName ) )	// & "$UserCount = " & Get ( UserCount ) & " ;¶"	& "$UserName = " & Quote ( Get ( UserName ) ) & " ;¶"	& "$WindowMode = " & Get ( WindowMode ) & " ;¶"	& "$WindowName = " & Quote ( Get ( WindowName ) ) & " ;¶"	& "$WindowOrientation = " & Quote ( Get ( WindowOrientation ) ) & " ;¶"	& "$WindowStyle = " & Get ( WindowStyle ) & " ;¶"	& "$WindowVisible = " & Get ( WindowVisible ) & " ;¶"	& If ( not IsEmpty ( Get ( ActiveFieldName ) ) ;		"$ActiveFieldName = " & Quote ( Get ( ActiveFieldName ) ) & " ;¶"		& "$ActiveFieldTableName = " & Quote ( Get ( ActiveFieldTableName ) ) & " ;¶"	)	& If ( not IsEmpty ( Get ( ActiveLayoutObjectName ) ) ;		"$ActiveLayoutObjectName = " & Quote ( Get ( ActiveLayoutObjectName ) ) & " ;¶"	))]]></Calculation>
		<DisplayCalculation>
			<Chunk type="NoRef">/** * ===================================== * LogData ( theLogLevel ; theMessage ) * * RETURNS: *		(string) Let format dictionary which describes the current environment. * * PARAMETERS: *		theLogLevel = (numeric) 0 thru [n] *		theErrorInfo = (text, optional) some text describing the log entry * * EXAMPLE: *		LogData ( LogWarning ) *		LogData ( $logLevelDebug ) *		// Where your own custom function LogWarning *		// returns the constant of 1 or a variable *		// named $logLevelDebug returns a value of 3. * * NOTES: *		This function should be modified to capture any relevant values for *		your solution. This includes any plugin or solution specific data desired. *		The level/amount of data returned increases numerically. You can add *		as much data as needed. You can also define the log levels by using *		separate custom functions with the prefix of Log* - such as LogWarning, *		LogError, LogCritical, LogDebug, etc. *		See: http://en.wikipedia.org/wiki/Syslog for logging references. * * HISTORY: *		MODIFIED on 2014-FEB-05 by Daniel Smith dansmith65@gmail.com *			- prepend parameter with &quot;the&quot; to prevent collision *			- add theMessage parameter *			- remove session-specific values (see LogDataSession function) *			- manually encode name/value pairs, remove dependency on # *			- add values added in FileMaker 13 *			- disable UserCount *		MODIFIED on 2014-JAN-11 matt@filemakermagazine.com to use numeric logLevel *		MODIFIED on 2012-NOV-21 by Daniel Smith dansmith65@gmail.com *			- don&apos;t access $error variable directly *		CREATED on 2012-NOV-21 Daniel Smith dansmith65@gmail.com *		INSPIRED by ErrorData by matt@filemakermagazine.com *			https://github.com/filemakerstandards/fmpstandards/tree/master/Functions * * REFERENCE: *		http://filemakerstandards.org/x/LACm * ===================================== */</Chunk>
			<Chunk type="FunctionRef">// ALL LOG LEVELS</Chunk>
			<Chunk type="NoRef">&quot;$LogLevel = &quot; &amp; theLogLevel &amp; &quot; ;¶&quot;&amp; </Chunk>
			<Chunk type="FunctionRef">If</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">not</Chunk>
			<Chunk type="NoRef"> </Chunk>
			<Chunk type="FunctionRef">IsEmpty</Chunk>
			<Chunk type="NoRef"> ( theMessage ) ;	&quot;$message = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( theMessage ) &amp; &quot; ;¶&quot;)&amp; &quot;$AccountName = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">AccountName</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$CurrentHostTimestamp = GetAsTimeStamp ( &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">CurrentHostTimeStamp</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ) ;¶&quot;</Chunk>
			<Chunk type="FunctionRef">// possibly use UTC in addition to/instead of CurrentHostTimeStamp, may want to only store this once per session</Chunk>
			<Chunk type="FunctionRef">//    FM12: Get ( UTCmSecs )</Chunk>
			<Chunk type="FunctionRef">//    FM13: Get ( CurrentTimeUTCMilliseconds )</Chunk>
			<Chunk type="NoRef">&amp; &quot;$FileName = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">FileName</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$ScriptName = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ScriptName</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$ScriptParameter = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ScriptParameter</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;&amp; &quot;$ScriptResult = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ScriptResult</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;</Chunk>
			<Chunk type="FunctionRef">// LEVEL 1</Chunk>
			<Chunk type="NoRef">&amp; </Chunk>
			<Chunk type="FunctionRef">If</Chunk>
			<Chunk type="NoRef"> ( theLogLevel ≤ 1 ;	&quot;&quot;	&amp; &quot;$AllowAbortState = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">AllowAbortState</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; &quot;$ErrorCaptureState = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ErrorCaptureState</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; &quot;$FilePath = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">FilePath</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;	&amp; &quot;$LayoutAccess = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">LayoutAccess</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; &quot;$LayoutName = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">LayoutName</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;	&amp; &quot;$LayoutTableName = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">LayoutTableName</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;	&amp; &quot;$LayoutViewState = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">LayoutViewState</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; &quot;$MultiUserState = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">MultiUserState</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; &quot;$RecordAccess = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">RecordAccess</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; &quot;$RecordID = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">RecordID</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; &quot;$RecordOpenCount = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">RecordOpenCount</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; &quot;$RecordOpenState = &quot; &amp;  </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">RecordOpenState</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; &quot;$SortState = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">SortState</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; &quot;$StatusAreaState = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">StatusAreaState</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	</Chunk>
			<Chunk type="FunctionRef">// UserCount is disabled by default because it is slow to calculate (~1000 times slower than Get ( UserName ) )</Chunk>
			<Chunk type="NoRef">	</Chunk>
			<Chunk type="FunctionRef">// &amp; &quot;$UserCount = &quot; &amp; Get ( UserCount ) &amp; &quot; ;¶&quot;</Chunk>
			<Chunk type="NoRef">	&amp; &quot;$UserName = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">UserName</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;	&amp; &quot;$WindowMode = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">WindowMode</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; &quot;$WindowName = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">WindowName</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;	&amp; &quot;$WindowOrientation = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">WindowOrientation</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;	&amp; &quot;$WindowStyle = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">WindowStyle</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; &quot;$WindowVisible = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">WindowVisible</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	&amp; </Chunk>
			<Chunk type="FunctionRef">If</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">not</Chunk>
			<Chunk type="NoRef"> </Chunk>
			<Chunk type="FunctionRef">IsEmpty</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ActiveFieldName</Chunk>
			<Chunk type="NoRef"> ) ) ;		&quot;$ActiveFieldName = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ActiveFieldName</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$ActiveFieldTableName = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ActiveFieldTableName</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;	)	&amp; </Chunk>
			<Chunk type="FunctionRef">If</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">not</Chunk>
			<Chunk type="NoRef"> </Chunk>
			<Chunk type="FunctionRef">IsEmpty</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ActiveLayoutObjectName</Chunk>
			<Chunk type="NoRef"> ) ) ;		&quot;$ActiveLayoutObjectName = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ActiveLayoutObjectName</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;	))</Chunk>
		</DisplayCalculation>
	</CustomFunction>
	<CustomFunction id="31" functionArity="0" visible="True" parameters="" name="LogLevel1Error">
		<Calculation><![CDATA[/** * ===================================== * LogLevel1Error * * RETURNS: *		(number) log level * * EXAMPLE: *		LogData ( LogLevel1Error ) * * HISTORY: *		MODIFIED on 2014-JAN-27 by Daniel Smith dansmith65@gmail.com *			- add NOTES section describing when this log level should be used *		CREATED on 2014-JAN-15 by Daniel Smith dansmith65@gmail.com * * NOTES: *		The system is in distress, customers are probably being affected *		(or will soon be) and the fix probably requires human intervention. *		The "2AM rule" applies here- if you're on call, do you want to be *		woken up at 2AM if this condition happens? If yes, then log it as *		"error". * * REFERENCE: *		http://filemakerstandards.org/display/props/Logging * ===================================== */ 1]]></Calculation>
		<DisplayCalculation>
			<Chunk type="NoRef">/** * ===================================== * LogLevel1Error * * RETURNS: *		(number) log level * * EXAMPLE: *		LogData ( LogLevel1Error ) * * HISTORY: *		MODIFIED on 2014-JAN-27 by Daniel Smith dansmith65@gmail.com *			- add NOTES section describing when this log level should be used *		CREATED on 2014-JAN-15 by Daniel Smith dansmith65@gmail.com * * NOTES: *		The system is in distress, customers are probably being affected *		(or will soon be) and the fix probably requires human intervention. *		The &quot;2AM rule&quot; applies here- if you&apos;re on call, do you want to be *		woken up at 2AM if this condition happens? If yes, then log it as *		&quot;error&quot;. * * REFERENCE: *		http://filemakerstandards.org/display/props/Logging * ===================================== */ 1</Chunk>
		</DisplayCalculation>
	</CustomFunction>
	<CustomFunction id="32" functionArity="0" visible="True" parameters="" name="LogLevel2Warn">
		<Calculation><![CDATA[/** * ===================================== * LogLevel2Warn * * RETURNS: *		(number) log level * * EXAMPLE: *		LogData ( LogLevel2Warn ) * * HISTORY: *		MODIFIED on 2014-JAN-27 by Daniel Smith dansmith65@gmail.com *			- add NOTES section describing when this log level should be used *		CREATED on 2014-JAN-15 Daniel Smith dansmith65@gmail.com * * NOTES: *		An unexpected technical or business event happened, customers may be *		affected, but probably no immediate human intervention is required. On *		call people won't be called immediately, but support personnel will *		want to review these issues asap to understand what the impact is. *		Basically any issue that needs to be tracked but may not require *		immediate intervention. * * REFERENCE: *		http://filemakerstandards.org/display/props/Logging * ===================================== */ 2]]></Calculation>
		<DisplayCalculation>
			<Chunk type="NoRef">/** * ===================================== * LogLevel2Warn * * RETURNS: *		(number) log level * * EXAMPLE: *		LogData ( LogLevel2Warn ) * * HISTORY: *		MODIFIED on 2014-JAN-27 by Daniel Smith dansmith65@gmail.com *			- add NOTES section describing when this log level should be used *		CREATED on 2014-JAN-15 Daniel Smith dansmith65@gmail.com * * NOTES: *		An unexpected technical or business event happened, customers may be *		affected, but probably no immediate human intervention is required. On *		call people won&apos;t be called immediately, but support personnel will *		want to review these issues asap to understand what the impact is. *		Basically any issue that needs to be tracked but may not require *		immediate intervention. * * REFERENCE: *		http://filemakerstandards.org/display/props/Logging * ===================================== */ 2</Chunk>
		</DisplayCalculation>
	</CustomFunction>
	<CustomFunction id="33" functionArity="0" visible="True" parameters="" name="LogLevel3Info">
		<Calculation><![CDATA[/** * ===================================== * LogLevel3Info * * RETURNS: *		(number) log level * * EXAMPLE: *		LogData ( LogLevel3Info ) * * HISTORY: *		MODIFIED on 2014-JAN-27 by Daniel Smith dansmith65@gmail.com *			- add NOTES section describing when this log level should be used *		CREATED on 2014-JAN-15 Daniel Smith dansmith65@gmail.com * * NOTES: *		Things we want to see at high volume in case we need to forensically *		analyze an issue. System lifecycle events (system start, stop) go here. *		 "Session" lifecycle events (login, logout, etc.) go here. Significant *		boundary events should be considered as well (e.g. database calls, *		remote API calls). Typical business exceptions can go here (e.g. login *		failed due to bad credentials). Any other event you think you'll need *		to see in production at high volume goes here. * * REFERENCE: *		http://filemakerstandards.org/display/props/Logging * ===================================== */ 3]]></Calculation>
		<DisplayCalculation>
			<Chunk type="NoRef">/** * ===================================== * LogLevel3Info * * RETURNS: *		(number) log level * * EXAMPLE: *		LogData ( LogLevel3Info ) * * HISTORY: *		MODIFIED on 2014-JAN-27 by Daniel Smith dansmith65@gmail.com *			- add NOTES section describing when this log level should be used *		CREATED on 2014-JAN-15 Daniel Smith dansmith65@gmail.com * * NOTES: *		Things we want to see at high volume in case we need to forensically *		analyze an issue. System lifecycle events (system start, stop) go here. *		 &quot;Session&quot; lifecycle events (login, logout, etc.) go here. Significant *		boundary events should be considered as well (e.g. database calls, *		remote API calls). Typical business exceptions can go here (e.g. login *		failed due to bad credentials). Any other event you think you&apos;ll need *		to see in production at high volume goes here. * * REFERENCE: *		http://filemakerstandards.org/display/props/Logging * ===================================== */ 3</Chunk>
		</DisplayCalculation>
	</CustomFunction>
	<CustomFunction id="34" functionArity="0" visible="True" parameters="" name="LogLevel4Debug">
		<Calculation><![CDATA[/** * ===================================== * LogLevel4Debug * * RETURNS: *		(number) log level * * EXAMPLE: *		LogData ( LogLevel4Debug ) * * HISTORY: *		MODIFIED on 2014-JAN-27 by Daniel Smith dansmith65@gmail.com *			- add NOTES section describing when this log level should be used *		CREATED on 2014-JAN-15 Daniel Smith dansmith65@gmail.com * * NOTES: *		Just about everything that doesn't make the "info" cut. Any message *		that is helpful in tracking the flow through the system and isolating *		issues, especially during the development and QA phases. We use "debug" *		level logs for entry/exit of most non-trivial methods and marking *		interesting events and decision points inside methods. * * REFERENCE: *		http://filemakerstandards.org/display/props/Logging * ===================================== */ 4]]></Calculation>
		<DisplayCalculation>
			<Chunk type="NoRef">/** * ===================================== * LogLevel4Debug * * RETURNS: *		(number) log level * * EXAMPLE: *		LogData ( LogLevel4Debug ) * * HISTORY: *		MODIFIED on 2014-JAN-27 by Daniel Smith dansmith65@gmail.com *			- add NOTES section describing when this log level should be used *		CREATED on 2014-JAN-15 Daniel Smith dansmith65@gmail.com * * NOTES: *		Just about everything that doesn&apos;t make the &quot;info&quot; cut. Any message *		that is helpful in tracking the flow through the system and isolating *		issues, especially during the development and QA phases. We use &quot;debug&quot; *		level logs for entry/exit of most non-trivial methods and marking *		interesting events and decision points inside methods. * * REFERENCE: *		http://filemakerstandards.org/display/props/Logging * ===================================== */ 4</Chunk>
		</DisplayCalculation>
	</CustomFunction>
	<CustomFunction id="35" functionArity="0" visible="True" parameters="" name="LogLevel5Trace">
		<Calculation><![CDATA[/** * ===================================== * LogLevel5Trace * * RETURNS: *		(number) log level * * EXAMPLE: *		LogData ( LogLevel5Trace ) * * HISTORY: *		MODIFIED on 2014-JAN-27 by Daniel Smith dansmith65@gmail.com *			- add NOTES section describing when this log level should be used *		CREATED on 2014-JAN-15 Daniel Smith dansmith65@gmail.com * * NOTES: *		 For extremely detailed and potentially high volume logs that you don't *		 typically want enabled even during normal development. Examples *		 include dumping a full object hierarchy, logging some state during *		 every iteration of a large loop, etc. * * REFERENCE: *		http://filemakerstandards.org/display/props/Logging * ===================================== */ 5]]></Calculation>
		<DisplayCalculation>
			<Chunk type="NoRef">/** * ===================================== * LogLevel5Trace * * RETURNS: *		(number) log level * * EXAMPLE: *		LogData ( LogLevel5Trace ) * * HISTORY: *		MODIFIED on 2014-JAN-27 by Daniel Smith dansmith65@gmail.com *			- add NOTES section describing when this log level should be used *		CREATED on 2014-JAN-15 Daniel Smith dansmith65@gmail.com * * NOTES: *		 For extremely detailed and potentially high volume logs that you don&apos;t *		 typically want enabled even during normal development. Examples *		 include dumping a full object hierarchy, logging some state during *		 every iteration of a large loop, etc. * * REFERENCE: *		http://filemakerstandards.org/display/props/Logging * ===================================== */ 5</Chunk>
		</DisplayCalculation>
	</CustomFunction>
	<CustomFunction id="36" functionArity="0" visible="True" parameters="" name="UTCMiliseconds">
		<Calculation><![CDATA[/** * ===================================== * UTCMiliseconds * * RETURNS: *		(number) current UTC time with milisecond precision * * HISTORY: *		CREATED on 2014-FEB-03 Daniel Smith dansmith65@gmail.com * * NOTES: *		Provide access to UTC milisecond time in FileMaker 12+. *		This function is at least twice as slow as calling the correct function *		for the correct platform, so use it appropriately. * ===================================== */Evaluate ( Case (	GetAsNumber ( Get ( ApplicationVersion ) ) ≥ 13 ;	"Get ( CurrentTimeUTCMilliseconds )" ;	GetAsNumber ( Get ( ApplicationVersion ) ) ≥ 12 ;	"Get ( UTCmSecs )" ;	// else	0) )]]></Calculation>
		<DisplayCalculation>
			<Chunk type="NoRef">/** * ===================================== * UTCMiliseconds * * RETURNS: *		(number) current UTC time with milisecond precision * * HISTORY: *		CREATED on 2014-FEB-03 Daniel Smith dansmith65@gmail.com * * NOTES: *		Provide access to UTC milisecond time in FileMaker 12+. *		This function is at least twice as slow as calling the correct function *		for the correct platform, so use it appropriately. * ===================================== */</Chunk>
			<Chunk type="FunctionRef">Evaluate</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Case</Chunk>
			<Chunk type="NoRef"> (	</Chunk>
			<Chunk type="FunctionRef">GetAsNumber</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ApplicationVersion</Chunk>
			<Chunk type="NoRef"> ) ) ≥ 13 ;	&quot;Get ( CurrentTimeUTCMilliseconds )&quot; ;	</Chunk>
			<Chunk type="FunctionRef">GetAsNumber</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ApplicationVersion</Chunk>
			<Chunk type="NoRef"> ) ) ≥ 12 ;	&quot;Get ( UTCmSecs )&quot; ;	</Chunk>
			<Chunk type="FunctionRef">// else</Chunk>
			<Chunk type="NoRef">	0) )</Chunk>
		</DisplayCalculation>
	</CustomFunction>
	<CustomFunction id="37" functionArity="0" visible="True" parameters="" name="LogDataSession">
		<Calculation><![CDATA[/** * ===================================== * LogDataSession * * RETURNS: *		(string) Let format dictionary containing environmental data *			pertaining to the current session. * * DEPENDENCIES: *		$$SESSIONID global variable * * NOTES: *		This function should be modified to capture the relevant session *		values for your solution. *		Add the data returned by this function to every log entry created. * * HISTORY: *		CREATED on 2014-FEB-05 Daniel Smith dansmith65@gmail.com * ===================================== */If ( IsEmpty ( $$SESSIONID ) ;	// session has not started yet, create a session id and return session data	Let ( $$SESSIONID = Get ( UUID ) ;		""		& "$ApplicationLanguage = " & Quote ( Get ( ApplicationLanguage ) ) & " ;¶"		& "$ApplicationVersion = " & Quote ( Get ( ApplicationVersion ) ) & " ;¶"		& "$ConnectionState = " & Get ( ConnectionState ) & " ;¶"		& "$CurrentTimestamp = GetAsTimeStamp ( " & Quote ( Get ( CurrentTimeStamp ) ) & " ) ;¶"			// CurrentTimestamp: use for determining time zone offset from server		& "$Device = " & Get ( Device ) & " ;¶"		& "$EncryptionState = " & Quote ( Get ( EncryptionState ) ) & " ;¶"		& "$FileMakerPath = " & Quote ( Get ( FileMakerPath ) ) & " ;¶"		& "$HighContrastColor = " & Quote ( Get ( HighContrastColor ) ) & " ;¶"		& "$HighContrastState = " & Get ( HighContrastState ) & " ;¶"		& "$HostIPAddress = " & Quote ( Get ( HostIPAddress ) ) & " ;¶"		& "$HostName = " & Quote ( Get ( HostName ) ) & " ;¶"		& "$InstalledFMPlugins = " & Quote ( Get ( InstalledFMPlugins ) ) & " ;¶"		& "$ScreenDepth = " & Get ( ScreenDepth ) & " ;¶"		& "$ScreenHeight = " & Get ( ScreenHeight ) & " ;¶"		& "$ScreenWidth = " & Get ( ScreenWidth ) & " ;¶"		& "$SystemIPAddress = " & Quote ( Get ( SystemIPAddress ) ) & " ;¶"		& "$SystemLanguage = " & Quote ( Get ( SystemLanguage ) ) & " ;¶"		& "$SystemNICAddress = " & Quote ( Get ( SystemNICAddress ) ) & " ;¶"		& "$SystemPlatform = " & Get ( SystemPlatform ) & " ;¶"		& "$SystemVersion = " & Quote ( Get ( SystemVersion ) ) & " ;¶"		& "$UseSystemFormatsState = " & Get ( UseSystemFormatsState ) & " ;¶"	))& "$SESSIONID = " & Quote ( $$SESSIONID ) & " ;¶"]]></Calculation>
		<DisplayCalculation>
			<Chunk type="NoRef">/** * ===================================== * LogDataSession * * RETURNS: *		(string) Let format dictionary containing environmental data *			pertaining to the current session. * * DEPENDENCIES: *		$$SESSIONID global variable * * NOTES: *		This function should be modified to capture the relevant session *		values for your solution. *		Add the data returned by this function to every log entry created. * * HISTORY: *		CREATED on 2014-FEB-05 Daniel Smith dansmith65@gmail.com * ===================================== */</Chunk>
			<Chunk type="FunctionRef">If</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">IsEmpty</Chunk>
			<Chunk type="NoRef"> ( $$SESSIONID ) ;	</Chunk>
			<Chunk type="FunctionRef">// session has not started yet, create a session id and return session data</Chunk>
			<Chunk type="NoRef">	</Chunk>
			<Chunk type="FunctionRef">Let</Chunk>
			<Chunk type="NoRef"> ( $$SESSIONID = </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">UUID</Chunk>
			<Chunk type="NoRef"> ) ;		&quot;&quot;		&amp; &quot;$ApplicationLanguage = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ApplicationLanguage</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$ApplicationVersion = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ApplicationVersion</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$ConnectionState = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ConnectionState</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;		&amp; &quot;$CurrentTimestamp = GetAsTimeStamp ( &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">CurrentTimeStamp</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ) ;¶&quot;			</Chunk>
			<Chunk type="FunctionRef">// CurrentTimestamp: use for determining time zone offset from server</Chunk>
			<Chunk type="NoRef">		&amp; &quot;$Device = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Device</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;		&amp; &quot;$EncryptionState = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">EncryptionState</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$FileMakerPath = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">FileMakerPath</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$HighContrastColor = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">HighContrastColor</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$HighContrastState = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">HighContrastState</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;		&amp; &quot;$HostIPAddress = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">HostIPAddress</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$HostName = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">HostName</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$InstalledFMPlugins = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">InstalledFMPlugins</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$ScreenDepth = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ScreenDepth</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;		&amp; &quot;$ScreenHeight = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ScreenHeight</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;		&amp; &quot;$ScreenWidth = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">ScreenWidth</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;		&amp; &quot;$SystemIPAddress = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">SystemIPAddress</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$SystemLanguage = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">SystemLanguage</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$SystemNICAddress = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">SystemNICAddress</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$SystemPlatform = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">SystemPlatform</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;		&amp; &quot;$SystemVersion = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">SystemVersion</Chunk>
			<Chunk type="NoRef"> ) ) &amp; &quot; ;¶&quot;		&amp; &quot;$UseSystemFormatsState = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Get</Chunk>
			<Chunk type="NoRef"> ( </Chunk>
			<Chunk type="FunctionRef">UseSystemFormatsState</Chunk>
			<Chunk type="NoRef"> ) &amp; &quot; ;¶&quot;	))&amp; &quot;$SESSIONID = &quot; &amp; </Chunk>
			<Chunk type="FunctionRef">Quote</Chunk>
			<Chunk type="NoRef"> ( $$SESSIONID ) &amp; &quot; ;¶&quot;</Chunk>
		</DisplayCalculation>
	</CustomFunction>
	<CustomFunction id="38" functionArity="1" visible="True" parameters="theLogLevel" name="LogWriteEnabled">
		<Calculation><![CDATA[/** * ===================================== * LogWriteEnabled ( theLogLevel ) * * RETURNS: *		(boolean) True if logs of the specified level should be saved * * PARAMETERS: *		theLogLevel = (numeric) 0 thru [n] * * NOTES: *		Any necessary filtering logic can be used in this script. The most *		efficient method is to hard-code a number into this calculation. * *		$logLevelToWriteOffset and $$LOGLEVELTOWRITEOFFSET allow a developer *		to increase the ~logLevelToWrite by setting one or both of these *		values. This is useful when debugging on a production file as it *		allows you to keep the default ~logLevelToWrite value for most *		users/scripts and only increase the verbosity of logging when *		necessary. *		Local and global variables are included to help manage scope. A *		local variable would not be very effective at increasing verbosity *		for an entire session; on the other hand, a local variable is *		ideal for increasing verbosity for a single script (without *		increasing for sub-scripts). *		If using the LogData custom function, it is recommended to modify *		it to add these two variables to the log, if they are not empty. * * HISTORY: *		CREATED on 2014-FEB-05 Daniel Smith dansmith65@gmail.com * ===================================== */Let ( [	// if the log level is less than or equal to this value, writing is enabled	~logLevelToWrite = 3		+ $logLevelToWriteOffset		+ $$LOGLEVELTOWRITEOFFSET] ;	theLogLevel ≤ ~logLevelToWrite)]]></Calculation>
		<DisplayCalculation>
			<Chunk type="NoRef">/** * ===================================== * LogWriteEnabled ( theLogLevel ) * * RETURNS: *		(boolean) True if logs of the specified level should be saved * * PARAMETERS: *		theLogLevel = (numeric) 0 thru [n] * * NOTES: *		Any necessary filtering logic can be used in this script. The most *		efficient method is to hard-code a number into this calculation. * *		$logLevelToWriteOffset and $$LOGLEVELTOWRITEOFFSET allow a developer *		to increase the ~logLevelToWrite by setting one or both of these *		values. This is useful when debugging on a production file as it *		allows you to keep the default ~logLevelToWrite value for most *		users/scripts and only increase the verbosity of logging when *		necessary. *		Local and global variables are included to help manage scope. A *		local variable would not be very effective at increasing verbosity *		for an entire session; on the other hand, a local variable is *		ideal for increasing verbosity for a single script (without *		increasing for sub-scripts). *		If using the LogData custom function, it is recommended to modify *		it to add these two variables to the log, if they are not empty. * * HISTORY: *		CREATED on 2014-FEB-05 Daniel Smith dansmith65@gmail.com * ===================================== */</Chunk>
			<Chunk type="FunctionRef">Let</Chunk>
			<Chunk type="NoRef"> ( [	</Chunk>
			<Chunk type="FunctionRef">// if the log level is less than or equal to this value, writing is enabled</Chunk>
			<Chunk type="NoRef">	~logLevelToWrite = 3		+ $logLevelToWriteOffset		+ $$LOGLEVELTOWRITEOFFSET] ;	theLogLevel ≤ ~logLevelToWrite)</Chunk>
		</DisplayCalculation>
	</CustomFunction>
</CustomFunctionCatalog>
<ExternalDataSourcesCatalog>
	<FileReference link="Log_fmp12.xml" id="1" pathList="file:Log" name="Log"/>
</ExternalDataSourcesCatalog>
<CustomMenuSetCatalog/>
<CustomMenuCatalog/>
<Options>
	<Encryption type="0"/>
	<OnOpen>
		<MinimumAllowedVersion name="12.0" id="1208"/>
		<Account name="Admin"/>
		<Layout id="10" name="Log: Blank"/>
	</OnOpen>
	<WindowTriggers>
		<OnFirstWindowOpen>
			<Script id="115" name="Startup OnFirstWindowOpen"/>
		</OnFirstWindowOpen>
		<OnLastWindowClose>
			<Script id="223" name="Shutdown OnLastWindowClose"/>
		</OnLastWindowClose>
	</WindowTriggers>
	<DefaultCustomMenuSet>
		<CustomMenuSet id="1" name="[Standard FileMaker Menus]"/>
	</DefaultCustomMenuSet>
</Options>
<ThemeCatalog>
	<Theme group="" name="Cool Gray" locale="en" version="2" internalName="com.filemaker.theme.cool_gray" id="01"/>
	<Theme group="Basic" name="Classic" locale="en" version="5" internalName="com.filemaker.theme.classic" id="02"/>
	<Theme group="Semi-Rounded" name="River" locale="en" version="5" internalName="com.filemaker.theme.river" id="03"/>
	<Theme group="Custom" name="River Flat" locale="en" version="5" internalName="com.filemaker.theme.custom.0B564E06_196B_DD44_BFB3_CE748D9EB3D6" id="04"/>
</ThemeCatalog>
</File>
</FMPReport>
