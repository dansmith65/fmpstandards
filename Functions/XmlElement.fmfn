/**
 * =====================================
 * XmlElement ( name ; attributes ; value )
 *
 * RETURNS:
 *		An XML element.
 *
 * PARAMETERS:
 *		name: element name: http://www.w3schools.com/xml/xml_elements.asp
 *		attributes: attributes to add to the name tag. Must be formatted as xml attributes - the XmlAttribute()
 *			custom function can be used to generate this string.
 *		value: value to be wrapped by the specified name tag. Special characters are not escaped. 
 *			If value is anything other than xml elements, it should be wrapped in XmlEscape() custom function.
 *
 * EXAMPLE:
 *		XmlElement (
 *			"name" ;
 *			XmlAttribute ( "id" ; "123" ) & XmlAttribute ( "language" ; "english" ) ;
 *			XmlEscape ( "Daniel O'dell" )
 *		) = "<name id='123' language='english'>Daniel O&apos;dell</name>¶"
 *
 * DEPENDENCIES: none
 *		XmlEscape and XmlAttribute are meant to be used in combination with this function, but they are not
 *		directly referenced by this function.
 *
 * HISTORY:
 *		MODIFIED on 2014-JAN-16 by Daniel Smith dansmith65@gmail.com
 *			- update documentation
 *			- remove validation of name parameter
 *		CREATED on 2013-AUG-07 by Daniel Smith dansmith65@gmail.com
 * =====================================
 */

"<"
& name
& If ( not IsEmpty ( attributes ) ;
	" " & Trim ( attributes )
)
& If ( IsEmpty ( value ) ;
	" />" ;
	">" & value & "</" & name & ">"
)
& "¶"


/* Unit test
Let ( [
	// specify output format
	~outputEvaluate =
		"$output & If ( $expected = $actual ; \"pass   \" ; \"-FAIL- \" )"
		& " & $test & \"  |  \" & Quote ( $expected ) & \"  |  \" & Quote ( $actual ) & \¶" ;
	
	
	$test = "valid output format" ;
	$expected = "<name id='123'>Daniel Smith</name>¶"  ;
	$actual = XmlElement ( "name" ; "id='123' " ; "Daniel Smith" ) ;
	$output = Evaluate ( ~outputEvaluate ) ;

	$test = "valid output format" ;
	$expected = "<Name>Daniel Smith</name>¶"  ;
	$actual = XmlElement ( "Name" ; "" ; "Daniel Smith" ) ;
	$output = Evaluate ( ~outputEvaluate ) ;

	$test = "valid output format" ;
	$expected = "<name id='123' />¶"  ;
	$actual = XmlElement ( "name" ; "id='123'" ; "" ) ;
	$output = Evaluate ( ~outputEvaluate ) ;

	$test = "valid output format" ;
	$expected = "<name />¶"  ;
	$actual = XmlElement ( "name" ; "" ; "" ) ;
	$output = Evaluate ( ~outputEvaluate ) ;
	
	// set output to local let variable
	~output = $output ;
	// Clean up variables
	$test = "" ;
	$value = "" ;
	$expected = "" ;
	$actual = "" ;
	$output = ""
] ;
	~output
)
*/